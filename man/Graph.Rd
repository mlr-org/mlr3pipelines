% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Graph.R
\docType{data}
\name{Graph}
\alias{Graph}
\title{Graph}
\format{\link{R6Class} Graph}
\usage{
Graph
}
\description{
The graph is a container class for the complete computational graph. It is made up of a list of
PipeOps, and a \code{\link{data.table}} of edges. It can be trained and used for prediction.
}
\section{Public Members / Active Bindings}{

\itemize{
\item \code{pipeops}      :: named list of \link{PipeOp}\code{\cr Contains all PipeOps contained in the Graph, named by the PipeOp}$id`.
\item \code{edges}        :: \code{\link{data.table}} \cr
List of connections between the PipeOps. A \code{data.table} with columns \code{src_id}, \code{src_channel},
\code{dst_id}, \code{dst_channel}. \code{src_id} and \code{dst_id} are IDs of PipeOps that must be present in
the \code{pipeops} list. \code{src_channel} and \code{dst_channel} must be channel IDs of the respective PipeOps.
\item \code{is_trained}   :: \code{logical(1)} \cr
Is the graph, are all of its PipeOps, fully trained - and is the graph ready to predict?
\item \code{lhs}          ::  list of \link{PipeOp}` \cr
The 'left-hand-side' nodes that have some unconnected input channels and therefore act as graph input layer.
\item \code{rhs}          :: \code{list of [PipeOp]} \cr
The 'right-hand-side' nodes that have some unconnected output channels and therefore act as graph output layer.
\item \code{packages}     :: \code{character}
Set of all required packages of the graph, a union of all required packages of all contained \link{PipeOp} objects.
}
}

\section{Methods}{

\itemize{
\item \code{Graph$new()} \cr
Constructs an empty Graph.
\item \code{f$ids(sorted = FALSE)} \cr
\code{logical(0)} -> \code{character} \cr
Get IDs of all PipeOps. This is in order that PipeOps were added if
\code{sorted} is \code{FALSE}, and topologically sorted if \code{sorted} is \code{TRUE}.
\item \code{f$add_pipeop(op)} \cr
(\code{\link{PipeOp}}) -> \link{Graph} \cr
Mutates graph by adding a \link{PipeOp} to the graph (without adding any edges)
\item \code{f$add_edge(src_id, src_channel, dst_id, dst_channel)} \cr
(\code{character(1)}, \code{character(1)}, \code{character(1)}, \code{character(1)}) -> \code{self} \cr
Add an edge from node \code{src_id}, and its channel \code{src_channel}, to node \code{dst_id}'s
channel \code{dst_channel}.
\item \code{f$plot()} \cr
Plot the graph, via igraph.
\item \code{f$print()} \cr
Print a representation of the graph on the console. Output is currently a table with columns \code{id}, and
short representation of \code{state}.
\item \code{f$set_names(old, new)} \cr
(\code{character}, \code{character}) -> \code{self} \cr
list of \link{GraphNode}, indexed by ID.
\item \code{f$train()} \cr
\code{\link{Task}} -> \code{list} of any \cr
Train graph by calling all the PipeOps' $train method. Return a list of outputs for each unconnected
PipeOp out-channel. During training, the \code{$state} member of the PipeOps will be set.
\item \code{f$predict()} \cr
\code{\link{Task}} -> \code{list} of any \cr
Predict with the graph by calling all the PipeOps' $predict method. Return a list of outputs for each
unconnected PipeOp out-channel
}
}

\keyword{datasets}
