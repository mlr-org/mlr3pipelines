% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mlr_graphs_elements.R
\name{mlr_graphs_robustify}
\alias{mlr_graphs_robustify}
\alias{robustify_pipeline}
\title{Robustify a learner}
\usage{
robustify_pipeline(
  task = NULL,
  learner = NULL,
  impute_missings = NULL,
  factors_to_numeric = NULL,
  max_cardinality = 1000
)
}
\arguments{
\item{task}{\code{\link{Task}} \cr
A task to create a robustifying pipeline for.
Optional, if omitted, the full pipeline is created.}

\item{learner}{\code{\link{Learner}} \cr
A learner to create a robustifying pipeline for. Optional, if omitted,
a more conservative pipeline is built.}

\item{impute_missings}{\code{\link{logical}} | \code{\link{NULL}} \cr
Should missing values be imputed? Defaults to \code{NULL}, i.e imputes if the task has
missing values and the learner can not handle them.}

\item{factors_to_numeric}{\code{\link{logical}} | \code{\link{NULL}} \cr
Should factors be encoded? Defaults to \code{NULL}, i.e encodes if the task has factors
and the learner can not handle factors.}

\item{max_cardinality}{\code{\link{integer}} \cr
Maximum number of factor levels allowed. See above. Default: 1000.}
}
\value{
\code{\link{Graph}}
}
\description{
Creates a \code{\link{Graph}} that can be used to robustify any subsequent learner.
Performs the following steps:
\itemize{
\item Drops empty factor levels using \code{\link{PipeOpFixFactors}}
\item Imputes \code{numeric} features using \code{\link{PipeOpImputeHist}} and \code{\link{PipeOpMissInd}}
\item Imputes \code{factor} features using \code{\link{PipeOpImputeNewlvl}}
\item Encodes \code{factors} using \code{one-hot-encoding}. Factors with a cardinality > max_cardinality\verb{ are collapsed using [}PipeOpCollapseFactors`].
\item If \code{scaling}, numeric features are scaled to mean 0 and standard deviation 1.
}

The graph is built conservatively, i.e. the function always tries to assure everything works.
If a learner is provided, some steps can be left out, i.e. if the learner can deal with
factor variables, no encoding is performed.
}
\examples{
library(mlr3)
lrn = lrn("regr.rpart")
task = mlr_tasks$get("boston_housing")
gr = robustify_pipeline(task, lrn) \%>>\% po("learner", lrn)
resample(task, GraphLearner$new(gr), rsmp("holdout"))
}
