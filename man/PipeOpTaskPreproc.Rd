% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTaskPreproc.R
\docType{data}
\name{PipeOpTaskPreproc}
\alias{PipeOpTaskPreproc}
\title{PipeOpTaskPreproc}
\format{Abstract \code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.}
\usage{
PipeOpTaskPreproc
}
\description{
Base class for handling most "preprocessing" operations. These
are operations that have exactly one Task input and one Task output,
and expect the column layout of these tasks during input and output
to be the same.

Users must implement \code{$train_task()} and \code{$predict_task()}, which have a \code{\link{Task}}
input and should return that \code{Task}. The \code{Task} should, if possible, be
manipulated in-place, and should not be cloned.

If \code{can_subset_cols} is \code{TRUE}, then the hyperparameter \code{affect_columns}
is added, which is a function that takes the Task as input and returns
a \code{character} as output, indicating what columns to choose.
}
\section{Public Members / Active Bindings}{

\itemize{
\item \code{state$intasklayout}  :: \code{\link{data.table}} with columns \code{id}, \code{type} \cr
Set during \code{$train()}: \code{$feature_types} of training \code{Task}, is used to verify
that columns have not changed during \code{$predict()}.
\item \code{state$outtasklayout} :: \code{\link{data.table}} with columns \code{id}, \code{type} \cr
Set during \code{$train()}: \code{$feature_types} of transformed \code{Task}, is is used to verify
that the transformed \code{Task} is the same during \code{$train()} and \code{$predict()}.
\item \code{affect_columns} :: \code{NULL} | \code{function} \cr
Can be used to subset the columns that the \code{PipeOp} operates on.
If \code{$affect_columns} is \code{NULL},  then all columns are given to the \code{$train} / \code{$predict} function.
If this is a \code{function}, it should take one argument (the input \code{Task}) and return a
\code{character} indicating the feature columns that should be operated on.
\code{$affect_columns()} is then called during training and
only features named in its return value are seen by the training / prediction function. \cr
This should not be changed if \code{can_subset_columns} is \code{FALSE}, and depends on the \code{PipeOpTaskPreproc} subclass.
\item \code{state$affected_cols} :: \code{character} \cr
Set during \code{$train()}: Indicating the names of features to operate on, if  parameter
\code{$affect_columns} is set.
\item \code{can_subset_columns} :: \code{logical(1)} \cr
Whether \code{affect_columns} can be set to something other than \code{NULL}. Read-only, value depends on
the \code{PipeOpTaskPreproc} subclass.
}
}

\section{Methods}{

\itemize{
\item \code{PipeOpTaskPreproc$new(id, param_set = ParamSet$new(), can_subset_cols = TRUE)} \cr
(\code{character(1)}, \code{ParamSet}, \code{logical(1)}) -> \code{self} \cr
Constructor. The \code{can_subset_cols} argument should be set by the inheriting class to \code{FALSE} if
affecting only a subset of columns chosen by the user should not be possible; this switches
\code{can_subset_cols} to \code{FALSE}.
\item \code{train_task(task)} \cr
(\code{\link{Task}}) -> \code{\link{Task}} \cr
Train \code{PipeOpTaskPreproc} on \code{task}, transform it and store a state in \code{$state}. The transformed \code{Task} must
be returned. \code{task} should not be cloned, instead it should be changed in-place. \cr
This method can be overloaded when inheriting from \code{PipeOpTaskPreproc}, together with \code{$predict_task()};
alternatively, \code{$train_dt()} and \code{$predict_dt()} (and possibly \code{$select_cols()}) can be overloaded.
\item \code{predict_task(task)} \cr
(\code{\link{Task}}) -> \code{\link{Task}} \cr
Predict on new data in \code{task}, possibly using the stored \code{$state}. \code{task} should not be cloned, instead it should be
changed in-place. \cr
This method can be overloaded when inheriting from \code{PipeOpTaskPreproc}, together with \code{$train_task()};
alternatively, \code{$train_dt()} and \code{$predict_dt()} (and possibly \code{$select_cols()}) can be overloaded.
\item \code{train_dt(dt)} \cr
(\code{\link{data.table}}) -> \code{any} \cr
Train \code{PipeOpTaskPreproc} on \code{dt}, transform it and store a state in \code{$state}. A transformed object must be returned
that can be converted to a \code{data.table} using \code{\link{as.data.table}}. \code{dt} does not need to be copied deliberately, it
is possible and encouraged to change it in-place. \cr
This method can be overloaded when inheriting \code{PipeOpTaskPreproc}, together with \code{$predict_dt()} and optionally
\code{$select_cols()}; alternatively, \code{$train_task()} and \code{$predict_task()} can be overloaded.
\item \code{predict_dt(dt)} \cr
(\code{\link{data.table}}) -> \code{any} \cr
Predict on new data in \code{dt}, possibly using the stored \code{$state}. A transformed object must be returned
that can be converted to a \code{data.table} using \code{\link{as.data.table}}. \code{dt} does not need to be copied deliberately, it
is possible and encouraged to change it in-place. \cr
This method can be overloaded when inheriting \code{PipeOpTaskPreproc}, together with \code{$train_dt()} and optionally
\code{$select_cols()}; alternatively, \code{$train_task()} and \code{$predict_task()} can be overloaded.
\item \code{select_cols(dt)} \cr
(\code{\link{data.table}}) -> \code{character} \cr
Selects which columns the \code{PipeOp} operates on, if \code{$train_dt()} and \code{$predict_dt()} are overloaded. This function
is not called if \code{$train_task()} and \code{$predict_task()} are overloaded. It is furthermore not supposed to be changed
by the user, who should use \code{affect_columns}. \code{select_cols} is for the \emph{ineriting class} to determine which columns
the operator should function on, e.g. based on feature type. \cr
This method can optionally be overloaded when inheriting \code{PipeOpTaskPreproc}, together with \code{$train_dt()} and
\code{$predict_dt()}; alternatively, \code{$train_task()} and \code{$predict_task()} can be overloaded. \cr
If this method is not overloaded, it defaults to selecting all columns.
}
}

\seealso{
Other mlr3pipelines backend related: \code{\link{Graph}},
  \code{\link{PipeOpTaskPreprocSimple}},
  \code{\link{PipeOp}}, \code{\link{mlr_pipeops}}

Other PipeOps: \code{\link{PipeOpEnsemble}},
  \code{\link{PipeOp}}, \code{\link{mlr_pipeop_apply}},
  \code{\link{mlr_pipeop_backup_learner}},
  \code{\link{mlr_pipeop_balancesample}},
  \code{\link{mlr_pipeop_branch}},
  \code{\link{mlr_pipeop_chunk}},
  \code{\link{mlr_pipeop_copy}},
  \code{\link{mlr_pipeop_encode}},
  \code{\link{mlr_pipeop_featureunion}},
  \code{\link{mlr_pipeop_filter}},
  \code{\link{mlr_pipeop_impute}},
  \code{\link{mlr_pipeop_learner}},
  \code{\link{mlr_pipeop_majorityvote}},
  \code{\link{mlr_pipeop_modelavg}},
  \code{\link{mlr_pipeop_mutate}},
  \code{\link{mlr_pipeop_nop}},
  \code{\link{mlr_pipeop_pca}},
  \code{\link{mlr_pipeop_scale}},
  \code{\link{mlr_pipeop_select}},
  \code{\link{mlr_pipeop_subsample}},
  \code{\link{mlr_pipeop_unbranch}},
  \code{\link{mlr_pipeops}}
}
\concept{PipeOps}
\concept{mlr3pipelines backend related}
\keyword{datasets}
