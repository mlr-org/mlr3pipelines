% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOp.R
\docType{data}
\name{PipeOp}
\alias{PipeOp}
\title{PipeOp}
\format{\link{R6Class} PipeOp}
\usage{
PipeOp
}
\description{
A PipeOp is a single tranformation of inputs into outputs.
This class is the baseclass for all pipeOp's, and is not intended for direct use.
During training it takes inputs, tranforms them, while doing that learns and stores its
parameters and then returns the output.
During prediction it applies the learned params to the input and transforms the input to an output.'

A PipeOp specifies the types of inputs and outputs as \code{intype} and \code{outtype}, a list of <something specifying types>.
The length of these lists determines the length of input / output the PipeOp produces. The PipeOp input / output
is a list of specified length.
}
\section{Public Members / Active Bindings}{

\itemize{
\item \code{id}                         :: \link{character}
Active binding that allows to return and set the id of the PipeOps. Ids are user-configurable, and ids of PipeOps in graphs must be unique.
\item \code{packages}                   :: \link{character}
Packages required for the pipeOp.
\item \code{param_set}                  :: \link{ParamSet}
The set of all exposed parameters of the PipeOp.
\item \code{param_vals}                   :: named \link{list}
Parameter settings where all setting must come from \code{param_set}, named with param IDs.
\item \code{state}                      :: \link{anys}
The object of learned parameters, obtained in the training step, and applied in the predict step.
\item \code{is_trained}                 :: \link{logical(1)}
Is the PipeOp currently trained?
\item \code{result}                     :: any
A slot to store the result of either the \code{train} or the \code{predict} step, after it was
\item \code{train_intypes}                       :: \link{character}
Input types the PipeOp accepts during training. Read-only.
\item \code{train_outtypes}                      :: \link{character}
Output types that are returned by the PipeOp during training. Read-only.
\item \code{predict_intypes}                     :: \link{character}
Input types the PipeOp accepts during prediction. Read-only.
\item \code{predict_outtypes}                    :: \link{character}
Output types that are returned by the PipeOp. Read-only.
}
}

\section{Methods}{

\itemize{
\item new(id, params)\code{\cr}character(1)\code{, }ParamSet` -> \link{PipeOp}
Constructs the pipeOp from an id string and a (possibly empty) \link{ParamSet}.
\item \code{train()}:
Train graph on \code{input}, transform it to output and store the learned \code{params}.
If the PipeOp is already trained, already present \code{params} are overwritten.
\item \code{predict()} \cr
\item Predict with graph on \code{input}, and transform it to output by applying the learned \code{params}.
\item If \code{is_trained = FALSE} the function cannot be applied.
\item \code{print()}: Prints
}
}

\section{Internals}{

\itemize{
\item \code{.intype}: \code{list of any}
\item \code{.outtype}: \code{list of any}
}
}

\seealso{
Other PipeOp: \code{\link{PipeOpBranch}},
  \code{\link{PipeOpChunk}}, \code{\link{PipeOpCopy}},
  \code{\link{PipeOpDT}}, \code{\link{PipeOpDownsample}},
  \code{\link{PipeOpEnsemble}},
  \code{\link{PipeOpFeatureUnion}},
  \code{\link{PipeOpLearner}},
  \code{\link{PipeOpModelAvg}}, \code{\link{PipeOpNULL}},
  \code{\link{PipeOpPCA}}, \code{\link{PipeOpScale}},
  \code{\link{PipeOpUnBranch}}
}
\concept{PipeOp}
\keyword{datasets}
