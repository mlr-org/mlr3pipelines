% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpBranch.R
\docType{data}
\name{mlr_pipeop_branch}
\alias{mlr_pipeop_branch}
\alias{PipeOpBranch}
\title{PipeOpBranch}
\format{\code{\link{R6Class}} object inheriting from \code{\link{PipeOp}}.}
\usage{
PipeOpBranch
}
\description{
This pipeop is used for multiplexing between different possible paths and
should be used in conjunction with \code{\link{PipeOpUnbranch}}.
}
\section{Methods}{

\itemize{
\item \code{PipeOpBranch$new(options, id = "branch")} \cr
(\code{numeric(1)} | \code{character}, \code{character(1)}) -> \code{self} \cr
Constructor. If \code{options} is an integer number, it determines the number of
output channels / options that are created, named \code{output1}...\code{output<n>}. The
\code{$selection} parameter will then be a \code{\link{ParamInt}}.
If \code{options} is a \code{character}, it determines the names of channels directly.
The \code{$selection} parameter will then be a \code{\link{ParamFct}}.
}
}

\section{Parameter Set}{

\itemize{
\item \code{selection}: (\code{numeric(1)} | \code{character(1)}) \cr
Selection of branching path to take. Is a \code{ParamInt} if the \code{options} parameter
during construction was a \code{numeric(1)}, and ranges from 1 to \code{options}. Is a
\code{ParamFct} if the \code{options} parameter was a \code{character} and its possible values
are the \code{options} values.
}
}

\section{Details}{

Creates a PipeOp with multiple output channels that can be used to
create a Graph network with alternative paths. If \code{options} is an \code{integer(1)},
it determines the number of out-paths and \code{selection} is an integer parameter
choosing between these paths. If \code{options} is a \code{character}, then \code{length(options)}
out channels are created, each named according to \code{options}.

To create a usable graph, the branching paths need to be brought together
using \code{\link{PipeOpUnbranch}}.

Not to be confused with \code{\link{PipeOpCopy}}, the naming scheme is a bit unfortunate.
}

\examples{
pca = PipeOpPCA$new()
nop = PipeOpNOP$new()
choices = c("pca", "nothing")
PipeOpBranch$new(choices) \%>>\% gunion(list(pca, nop)) \%>>\% PipeOpUnbranch$new(choices)
}
\seealso{
Other PipeOps: \code{\link{PipeOpEnsemble}},
  \code{\link{PipeOpTaskPreproc}}, \code{\link{PipeOp}},
  \code{\link{mlr_pipeop_apply}},
  \code{\link{mlr_pipeop_backup_learner}},
  \code{\link{mlr_pipeop_balancesample}},
  \code{\link{mlr_pipeop_chunk}},
  \code{\link{mlr_pipeop_copy}},
  \code{\link{mlr_pipeop_encode}},
  \code{\link{mlr_pipeop_featureunion}},
  \code{\link{mlr_pipeop_filter}},
  \code{\link{mlr_pipeop_impute}},
  \code{\link{mlr_pipeop_learner}},
  \code{\link{mlr_pipeop_majorityvote}},
  \code{\link{mlr_pipeop_modelavg}},
  \code{\link{mlr_pipeop_mutate}},
  \code{\link{mlr_pipeop_nop}},
  \code{\link{mlr_pipeop_pca}},
  \code{\link{mlr_pipeop_scale}},
  \code{\link{mlr_pipeop_select}},
  \code{\link{mlr_pipeop_subsample}},
  \code{\link{mlr_pipeop_unbranch}},
  \code{\link{mlr_pipeops}}

Other Path Branching: \code{\link{NO_OP}},
  \code{\link{filter_noop}}, \code{\link{is_noop}},
  \code{\link{mlr_pipeop_unbranch}}
}
\concept{Path Branching}
\concept{PipeOps}
\keyword{datasets}
