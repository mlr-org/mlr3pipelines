% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpAggregate.R
\name{mlr_pipeops_aggregate}
\alias{mlr_pipeops_aggregate}
\alias{PipeOpAggregate}
\title{Aggregate Features Row-Wise}
\format{
\code{\link{R6Class}} object inheriting from \code{\link{PipeOpTaskPreprocSimple}}/\code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}
\description{
Aggregates features row-wise based on multiple observations indicated via a column of role \code{row_reference} according to expressions given as formulas.
Typically used after \code{\link{PipeOpLearnerCV}}  and prior to \code{\link{PipeOpFeatureUnion}} if the resampling method returned multiple predictions per row id.
However, note that not all \code{\link[mlr3:Resampling]{Resampling}} methods result in at least one prediction per original row id.
}
\section{Construction}{
\preformatted{PipeOpAggregate$new(id = "aggregate", param_vals = list())
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"aggregate"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpTaskPreproc}}.
The output is a \code{\link[mlr3:Task]{Task}} with the same target as the input \code{\link[mlr3:Task]{Task}}, with features aggregated as specified.
}

\section{State}{

The \verb{$state} is a named \code{list} with the \verb{$state} elements inherited from \code{\link{PipeOpTaskPreproc}}.
}

\section{Parameters}{

The parameters are the parameters inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{aggregation} :: named \code{list} of \code{formula}\cr
Expressions for how features should be aggregated, in the form of \code{formula}.
Each element of the list is a \code{formula} with the name of the element naming the feature to aggregate and the formula expression determining the result.
Each formula is evaluated within \code{\link{data.table}} environments of the \code{\link[mlr3:Task]{Task}} that contain all features split via the \code{by} argument (see below).
Initialized to \code{list()}, i.e., no aggregation is performed.
\item \code{by} :: \code{character(1)} | \code{NULL}\cr
Column indicating the \code{row_reference} column of the \code{\link[mlr3:Task]{Task}} that should be the row-wise basis for the aggregation.
Initialized to \code{NULL}, i.e., no aggregation is performed.
}
}

\section{Internals}{

A \code{formula} created using the \code{~} operator always contains a reference to the \code{environment} in which
the \code{formula} is created. This makes it possible to use variables in the \code{~}-expressions that both
reference either column names or variable names.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOpTaskPreprocSimple}}/\code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\examples{
library("mlr3")
calculate_mode = function(x) {
  unique_x = unique(x)
  unique_x[which.max(tabulate(match(x, unique_x)))]
}

task = tsk("iris")
learner = lrn("classif.rpart")

lrnloo_po = po("learner_cv", learner, rsmp("loo"))
nop = mlr_pipeops$get("nop")
agg_po = po("aggregate",
  aggregation = list(
    classif.rpart.response = ~ calculate_mode(classif.rpart.response)
  ),
  by = "pre.classif.rpart")

graph = gunion(list(
  lrnloo_po \%>>\% agg_po,
  nop
)) \%>>\% po("featureunion")

graph$train(task)

graph$pipeops$classif.rpart$learner$predict_type = "prob"
graph$param_set$values$aggregate.aggregation = list(
    classif.rpart.prob.setosa = ~ mean(classif.rpart.prob.setosa),
    classif.rpart.prob.versicolor = ~ mean(classif.rpart.prob.versicolor),
    classif.rpart.prob.virginica = ~ mean(classif.rpart.prob.virginica)
)
graph$train(task)
}
\seealso{
https://mlr3book.mlr-org.com/list-pipeops.html

Other PipeOps: 
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTargetTrafo}},
\code{\link{PipeOpTaskPreprocSimple}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_colroles}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_datefeatures}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputeconstant}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputelearner}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputemode}},
\code{\link{mlr_pipeops_imputeoor}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_multiplicityexply}},
\code{\link{mlr_pipeops_multiplicityimply}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nmf}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_ovrsplit}},
\code{\link{mlr_pipeops_ovrunite}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_proxy}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_randomprojection}},
\code{\link{mlr_pipeops_randomresponse}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_renamecolumns}},
\code{\link{mlr_pipeops_replicate}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_targetinvert}},
\code{\link{mlr_pipeops_targetmutate}},
\code{\link{mlr_pipeops_targettrafoscalerange}},
\code{\link{mlr_pipeops_textvectorizer}},
\code{\link{mlr_pipeops_threshold}},
\code{\link{mlr_pipeops_tunethreshold}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_updatetarget}},
\code{\link{mlr_pipeops_vtreat}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
