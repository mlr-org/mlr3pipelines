[{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"ext-pipeopcopy","dir":"Articles","previous_headings":"","what":"General Case Example: PipeOpCopy","title":"Adding new PipeOps","text":"simple yet useful PipeOp PipeOpCopy, takes single input creates variable number output channels, receive copy input data. simple example showcases important steps defining custom PipeOp. show simplified version , PipeOpCopyTwo, creates exactly two copies input data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"first-steps-inheriting-from-pipeop","dir":"Articles","previous_headings":"General Case Example: PipeOpCopy","what":"First Steps: Inheriting from PipeOp","title":"Adding new PipeOps","text":"first part creating custom PipeOp inheriting PipeOp. make mental note need implement .train() .predict() function, probably want initialize() well: Note, private methods, e.g. .train .predict etc prefixed ..","code":"PipeOpCopyTwo = R6::R6Class(\"PipeOpCopyTwo\",   inherit = mlr3pipelines::PipeOp,   public = list(     initialize = function(id = \"copy.two\") {       ....     },   ),   private == list(     .train = function(inputs) {       ....     },      .predict = function(inputs) {       ....     }   ) )"},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"channel-definitions","dir":"Articles","previous_headings":"General Case Example: PipeOpCopy","what":"Channel Definitions","title":"Adding new PipeOps","text":"need tell PipeOp layout channels: many , names going , types acceptable. done initialization PipeOp (using super$initialize call) giving input output data.table objects. must three columns: \"name\" column giving names input output channels, \"train\" \"predict\" column naming class objects expect training prediction input / output. special value classes \"*\", indicates class accepted; simple copy operator accepts kind input, useful. one input, two output channels. convention, name single channel \"input\" \"output\", group channels [\"input1\", \"input2\", …], unless reason give specific different names. Therefore, input data.table single row <\"input\", \"*\", \"*\">, output table two rows, <\"output1\", \"*\", \"*\"> <\"output2\", \"*\", \"*\">. given PipeOp creator. initialize() thus look follows:","code":"initialize = function(id = \"copy.two\") {   input = data.table::data.table(name = \"input\", train = \"*\", predict = \"*\")   # the following will create two rows and automatically fill the `train`   # and `predict` cols with \"*\"   output = data.table::data.table(     name = c(\"output1\", \"output2\"),     train = \"*\", predict = \"*\"   )   super$initialize(id,     input = input,     output = output   ) }"},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"train-and-predict","dir":"Articles","previous_headings":"General Case Example: PipeOpCopy","what":"Train and Predict","title":"Adding new PipeOps","text":".train() .predict() receive list input must give list return. According input output definitions, always get list single element input, need return list two elements. want create two copies, just create copies using c(inputs, inputs). Two things consider: .train() function must always modify self$state variable something NULL NO_OP. $state slot used signal PipeOp trained data, even state important PipeOp (case). Therefore, .train() set self$state = list(). necessary “clone” input make deep copies, don’t modify data. However, changing reference-passed object, example changing data Task, make deep copy first. PipeOp may never modify input object reference. .train() .predict() functions now:","code":".train = function(inputs) {   self$state = list()   c(inputs, inputs) } .predict = function(inputs) {   c(inputs, inputs) }"},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"putting-it-together","dir":"Articles","previous_headings":"General Case Example: PipeOpCopy","what":"Putting it Together","title":"Adding new PipeOps","text":"whole definition thus becomes can create instance PipeOp, put graph, see happens train something:","code":"PipeOpCopyTwo = R6::R6Class(\"PipeOpCopyTwo\",   inherit = mlr3pipelines::PipeOp,   public = list(     initialize = function(id = \"copy.two\") {       super$initialize(id,         input = data.table::data.table(name = \"input\", train = \"*\", predict = \"*\"),         output = data.table::data.table(name = c(\"output1\", \"output2\"),                             train = \"*\", predict = \"*\")       )     }   ),   private = list(     .train = function(inputs) {       self$state = list()       c(inputs, inputs)     },      .predict = function(inputs) {       c(inputs, inputs)     }   ) ) library(\"mlr3pipelines\") poct = PipeOpCopyTwo$new() gr = Graph$new() gr$add_pipeop(poct)  print(gr) ## Graph with 1 PipeOps: ##        ID         State sccssors prdcssors ##    <char>        <char>   <char>    <char> ##  copy.two <<UNTRAINED>> result = gr$train(task)  str(result) ## List of 2 ##  $ copy.two.output1:Classes 'TaskClassif', 'TaskSupervised', 'Task', 'R6' <TaskClassif:iris>  ##  $ copy.two.output2:Classes 'TaskClassif', 'TaskSupervised', 'Task', 'R6' <TaskClassif:iris>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"ext-pipe-preproc","dir":"Articles","previous_headings":"","what":"Special Case: Preprocessing","title":"Adding new PipeOps","text":"Many PipeOps perform operation exactly one Task, return exactly one Task. may even care “Target” / “Outcome” variable task, modification input data. However, usually important Task perform prediction data columns Task train. cases, auxiliary base class PipeOpTaskPreproc exists. inherits PipeOp , PipeOps use fall kind use-case named . inheriting PipeOpTaskPreproc, one must either implement private methods .train_task() .predict_task(), methods .train_dt(), .predict_dt(), depending whether wants operate Task object data data.tables. second case, one can optionally also overload .select_cols() method, chooses incoming Task’s features given .train_dt() / .predict_dt() functions. following show two examples: PipeOpDropNA, removes Task’s rows missing values training (implements .train_task() .predict_task()), PipeOpScale, scales Task’s numeric columns (implements .train_dt(), .predict_dt(), .select_cols()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"example-pipeopdropna","dir":"Articles","previous_headings":"Special Case: Preprocessing","what":"Example: PipeOpDropNA","title":"Adding new PipeOps","text":"Dropping rows missing values may important training model can handle . mlr3 Tasks contain view underlying data, necessary modify data remove rows missing values. Instead, rows can removed using Task’s $filter method, modifies Task -place. done private method .train_task(). take care also set $state slot signal PipeOp trained. private method .predict_task() need anything; removing missing values prediction useful, since learners handle just ignore respective rows. Furthermore, mlr3 expects Learner always return just many predictions given input rows, PipeOp removes Task rows training can used inside GraphLearner. inherit PipeOpTaskPreproc, sets input output data.tables us accept single Task. thing initialize() therefore set id (can optionally changed user). complete PipeOpDropNA can therefore written follows. Note inherits PipeOpTaskPreproc, unlike PipeOpCopyTwo example : test PipeOp, create small task missing values: test feeding new Graph uses PipeOpDropNA.","code":"PipeOpDropNA = R6::R6Class(\"PipeOpDropNA\",   inherit = mlr3pipelines::PipeOpTaskPreproc,   public = list(     initialize = function(id = \"drop.na\") {       super$initialize(id)     }   ),    private = list(     .train_task = function(task) {       self$state = list()       featuredata = task$data(cols = task$feature_names)       exclude = apply(is.na(featuredata), 1, any)       task$filter(task$row_ids[!exclude])     },      .predict_task = function(task) {       # nothing to be done       task     }   ) ) smalliris = iris[(1:5) * 30, ] smalliris[1, 1] = NA smalliris[2, 2] = NA sitask = as_task_classif(smalliris, target = \"Species\") print(sitask$data()) ##       Species Petal.Length Petal.Width Sepal.Length Sepal.Width ##        <fctr>        <num>       <num>        <num>       <num> ## 1:     setosa          1.6         0.2           NA         3.2 ## 2: versicolor          3.9         1.4          5.2          NA ## 3: versicolor          4.0         1.3          5.5         2.5 ## 4:  virginica          5.0         1.5          6.0         2.2 ## 5:  virginica          5.1         1.8          5.9         3.0 gr = Graph$new() gr$add_pipeop(PipeOpDropNA$new())  filtered_task = gr$train(sitask)[[1]] print(filtered_task$data()) ##       Species Petal.Length Petal.Width Sepal.Length Sepal.Width ##        <fctr>        <num>       <num>        <num>       <num> ## 1: versicolor          4.0         1.3          5.5         2.5 ## 2:  virginica          5.0         1.5          6.0         2.2 ## 3:  virginica          5.1         1.8          5.9         3.0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"example-pipeopscalealways","dir":"Articles","previous_headings":"Special Case: Preprocessing","what":"Example: PipeOpScaleAlways","title":"Adding new PipeOps","text":"often-applied preprocessing step simply center /scale data mean \\(0\\) standard deviation \\(1\\). fits PipeOpTaskPreproc pattern quite well. always replaces columns operates , require information task’s target, needs overload .train_dt() .predict_dt() functions. saves boilerplate-code getting correct feature columns task, replacing modification. scaling makes sense numeric features, want instruct PipeOpTaskPreproc give us numeric columns. overloading .select_cols() function: called class determine columns pass .train_dt() .predict_dt(). input Task transformed, return character vector features work . overloaded, uses columns; instead, set give us numeric columns. levels() data table given .train_dt() .predict_dt() may different Task’s levels, functions must also take levels argument named list column names indicating levels. working numeric data, argument can ignored, used instead levels(dt[[column]]) factorial character columns. first PipeOp using $state slot something useful: save centering offset scaling coefficient use $.predict()! simplicity, using hyperparameters always scale center data. Compare PipeOpScaleAlways operator one defined inside mlr3pipelines package, PipeOpScale. (Note observant: check PipeOpScale.R mlr3pipelines package, notice uses “get(\"type\")” “get(\"id\")” instead “type” “id”, static code checker CRAN otherwise complain references undefined variables. “problem” data.table exclusive mlr3pipelines.) can, , create new Graph uses PipeOp test . Compare resulting data original “iris” Task data printed beginning:","code":"PipeOpScaleAlways = R6::R6Class(\"PipeOpScaleAlways\",   inherit = mlr3pipelines::PipeOpTaskPreproc,   public = list(     initialize = function(id = \"scale.always\") {       super$initialize(id = id)     }   ),    private = list(     .select_cols = function(task) {       task$feature_types[type == \"numeric\", id]     },      .train_dt = function(dt, levels, target) {       sc = scale(as.matrix(dt))       self$state = list(         center = attr(sc, \"scaled:center\"),         scale = attr(sc, \"scaled:scale\")       )       sc     },      .predict_dt = function(dt, levels) {       t((t(dt) - self$state$center) / self$state$scale)     }   ) ) gr = Graph$new() gr$add_pipeop(PipeOpScaleAlways$new())  result = gr$train(task)  result[[1]]$data() ##        Species Petal.Length Petal.Width Sepal.Length Sepal.Width ##         <fctr>        <num>       <num>        <num>       <num> ##   1:    setosa   -1.3357516  -1.3110521  -0.89767388  1.01560199 ##   2:    setosa   -1.3357516  -1.3110521  -1.13920048 -0.13153881 ##   3:    setosa   -1.3923993  -1.3110521  -1.38072709  0.32731751 ##   4:    setosa   -1.2791040  -1.3110521  -1.50149039  0.09788935 ##   5:    setosa   -1.3357516  -1.3110521  -1.01843718  1.24503015 ##  ---                                                             ## 146: virginica    0.8168591   1.4439941   1.03453895 -0.13153881 ## 147: virginica    0.7035638   0.9192234   0.55148575 -1.27867961 ## 148: virginica    0.8168591   1.0504160   0.79301235 -0.13153881 ## 149: virginica    0.9301544   1.4439941   0.43072244  0.78617383 ## 150: virginica    0.7602115   0.7880307   0.06843254 -0.13153881"},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"special-case-preprocessing-with-simple-train","dir":"Articles","previous_headings":"","what":"Special Case: Preprocessing with Simple Train","title":"Adding new PipeOps","text":"possible make even simplifications many PipeOps perform mostly operation training prediction. point Task preprocessing often modify training data mostly way prediction data (way may depend training data). Consider constant feature removal, example: goal remove features variance, single factor level. However, features get removed must decided training, may depend training data. Furthermore, actual process removing features training prediction. simplification make therefore private method .get_state(task) sets $state slot training, private method .transform(task), gets called training prediction. done PipeOpTaskPreprocSimple class. Just like PipeOpTaskPreproc, one can inherit overload functions get PipeOp performs preprocessing little boilerplate code. Just like PipeOpTaskPreproc, PipeOpTaskPreprocSimple offers possibility instead overload .get_state_dt(dt, levels) .transform_dt(dt, levels) methods (optionally, , .select_cols(task) function) operate data.table feature data instead whole Task. Even methods use PipeOpTaskPreprocSimple work similar way: PipeOpScaleAlways example shown also work paradigm.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"example-pipeopdropconst","dir":"Articles","previous_headings":"Special Case: Preprocessing with Simple Train","what":"Example: PipeOpDropConst","title":"Adding new PipeOps","text":"typical example preprocessing operation almost operation training prediction operation drops features depending criterion evaluated training. One simple example dropping constant features. mlr3 Task class offers flexible view underlying data, efficient drop columns task directly using $select() function, .get_state_dt(dt, levels) / .transform_dt(dt, levels) functions get used; instead overload .get_state(task) .transform(task) methods. .get_state() function’s result saved $state slot, want return something useful dropping features. choose save names columns nonzero variance. brevity, use length(unique(column)) > 1 check whether one distinct value present; sophisticated version tolerance parameter numeric values close . .transform() method evaluated training prediction, can rely $state slot present. call Task$select function columns chose keep. full PipeOp written follows: can tested using first five rows “Iris” Task, one feature (\"Petal.Width\") constant: can also see $state correctly set. Calling $.predict() graph, even different data (whole Iris Task!) still drop \"Petal.Width\" column, .","code":"PipeOpDropConst = R6::R6Class(\"PipeOpDropConst\",   inherit = mlr3pipelines::PipeOpTaskPreprocSimple,   public = list(     initialize = function(id = \"drop.const\") {       super$initialize(id = id)     }   ),    private = list(     .get_state = function(task) {       data = task$data(cols = task$feature_names)       nonconst = sapply(data, function(column) length(unique(column)) > 1)       list(cnames = colnames(data)[nonconst])     },      .transform = function(task) {       task$select(self$state$cnames)     }   ) ) irishead = task$clone()$filter(1:5) irishead$data() ##    Species Petal.Length Petal.Width Sepal.Length Sepal.Width ##     <fctr>        <num>       <num>        <num>       <num> ## 1:  setosa          1.4         0.2          5.1         3.5 ## 2:  setosa          1.4         0.2          4.9         3.0 ## 3:  setosa          1.3         0.2          4.7         3.2 ## 4:  setosa          1.5         0.2          4.6         3.1 ## 5:  setosa          1.4         0.2          5.0         3.6 gr = Graph$new()$add_pipeop(PipeOpDropConst$new()) dropped_task = gr$train(irishead)[[1]]  dropped_task$data() ##    Species Petal.Length Sepal.Length Sepal.Width ##     <fctr>        <num>        <num>       <num> ## 1:  setosa          1.4          5.1         3.5 ## 2:  setosa          1.4          4.9         3.0 ## 3:  setosa          1.3          4.7         3.2 ## 4:  setosa          1.5          4.6         3.1 ## 5:  setosa          1.4          5.0         3.6 gr$pipeops$drop.const$state ## $cnames ## [1] \"Petal.Length\" \"Sepal.Length\" \"Sepal.Width\"  ##  ## $affected_cols ## [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  ##  ## $intasklayout ## Key: <id> ##              id    type ##          <char>  <char> ## 1: Petal.Length numeric ## 2:  Petal.Width numeric ## 3: Sepal.Length numeric ## 4:  Sepal.Width numeric ##  ## $outtasklayout ## Key: <id> ##              id    type ##          <char>  <char> ## 1: Petal.Length numeric ## 2: Sepal.Length numeric ## 3:  Sepal.Width numeric ##  ## $outtaskshell ## Empty data.table (0 rows and 4 cols): Species,Petal.Length,Sepal.Length,Sepal.Width dropped_predict = gr$predict(task)[[1]]  dropped_predict$data() ##        Species Petal.Length Sepal.Length Sepal.Width ##         <fctr>        <num>        <num>       <num> ##   1:    setosa          1.4          5.1         3.5 ##   2:    setosa          1.4          4.9         3.0 ##   3:    setosa          1.3          4.7         3.2 ##   4:    setosa          1.5          4.6         3.1 ##   5:    setosa          1.4          5.0         3.6 ##  ---                                                 ## 146: virginica          5.2          6.7         3.0 ## 147: virginica          5.0          6.3         2.5 ## 148: virginica          5.2          6.5         3.0 ## 149: virginica          5.4          6.2         3.4 ## 150: virginica          5.1          5.9         3.0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"example-pipeopscalealwayssimple","dir":"Articles","previous_headings":"Special Case: Preprocessing with Simple Train","what":"Example: PipeOpScaleAlwaysSimple","title":"Adding new PipeOps","text":"example show PipeOpTaskPreprocSimple can used working feature data form data.table. Instead calling scale() function, center scale values calculated directly saved $state slot. .transform_dt() function perform operation training prediction: subtract center divide scale value. PipeOpScaleAlways example , use .select_cols() work numeric columns. can compare PipeOp one show behaves .","code":"PipeOpScaleAlwaysSimple = R6::R6Class(\"PipeOpScaleAlwaysSimple\",   inherit = mlr3pipelines::PipeOpTaskPreprocSimple,   public = list(     initialize = function(id = \"scale.always.simple\") {       super$initialize(id = id)     }   ),    private = list(     .select_cols = function(task) {       task$feature_types[type == \"numeric\", id]     },      .get_state_dt = function(dt, levels, target) {       list(         center = sapply(dt, mean),         scale = sapply(dt, sd)       )     },      .transform_dt = function(dt, levels) {       t((t(dt) - self$state$center) / self$state$scale)     }   ) ) gr = Graph$new()$add_pipeop(PipeOpScaleAlways$new()) result_posa = gr$train(task)[[1]]  gr = Graph$new()$add_pipeop(PipeOpScaleAlwaysSimple$new()) result_posa_simple = gr$train(task)[[1]] result_posa$data() ##        Species Petal.Length Petal.Width Sepal.Length Sepal.Width ##         <fctr>        <num>       <num>        <num>       <num> ##   1:    setosa   -1.3357516  -1.3110521  -0.89767388  1.01560199 ##   2:    setosa   -1.3357516  -1.3110521  -1.13920048 -0.13153881 ##   3:    setosa   -1.3923993  -1.3110521  -1.38072709  0.32731751 ##   4:    setosa   -1.2791040  -1.3110521  -1.50149039  0.09788935 ##   5:    setosa   -1.3357516  -1.3110521  -1.01843718  1.24503015 ##  ---                                                             ## 146: virginica    0.8168591   1.4439941   1.03453895 -0.13153881 ## 147: virginica    0.7035638   0.9192234   0.55148575 -1.27867961 ## 148: virginica    0.8168591   1.0504160   0.79301235 -0.13153881 ## 149: virginica    0.9301544   1.4439941   0.43072244  0.78617383 ## 150: virginica    0.7602115   0.7880307   0.06843254 -0.13153881 result_posa_simple$data() ##        Species Petal.Length Petal.Width Sepal.Length Sepal.Width ##         <fctr>        <num>       <num>        <num>       <num> ##   1:    setosa   -1.3357516  -1.3110521  -0.89767388  1.01560199 ##   2:    setosa   -1.3357516  -1.3110521  -1.13920048 -0.13153881 ##   3:    setosa   -1.3923993  -1.3110521  -1.38072709  0.32731751 ##   4:    setosa   -1.2791040  -1.3110521  -1.50149039  0.09788935 ##   5:    setosa   -1.3357516  -1.3110521  -1.01843718  1.24503015 ##  ---                                                             ## 146: virginica    0.8168591   1.4439941   1.03453895 -0.13153881 ## 147: virginica    0.7035638   0.9192234   0.55148575 -1.27867961 ## 148: virginica    0.8168591   1.0504160   0.79301235 -0.13153881 ## 149: virginica    0.9301544   1.4439941   0.43072244  0.78617383 ## 150: virginica    0.7602115   0.7880307   0.06843254 -0.13153881"},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"ext-pipe-hyperpars","dir":"Articles","previous_headings":"","what":"Hyperparameters","title":"Adding new PipeOps","text":"mlr3pipelines uses paradox package define parameter spaces PipeOps. Parameters PipeOps can modify behavior certain ways, e.g. switch centering scaling PipeOpScale operator. unified interface makes possible parameters whole Graphs modify individual PipeOp’s behavior. Graphs, encapsulated GraphLearners, can even tuned using tuning functionality mlr3tuning. Hyperparameters declared initialization, calling PipeOp’s $initialize() function, giving param_set argument. param_set must ParamSet paradox package; see documentation information define parameter spaces. construction, ParamSet can accessed $param_set slot. possible modify ParamSet, using e.g. $add() $add_dep() functions, adding PipeOp, strongly advised . Hyperparameters can set queried $values slot. setting hyperparameters, automatically checked satisfy conditions set $param_set, necessary type check . aware always possible remove hyperparameter values. PipeOp initialized, usually parameter values—$values takes value list(). possible set initial parameter values $initialize() constructor; must done super$initialize() call corresponding ParamSet must supplied. setting $values checks current $param_set, fail $param_set set yet. using underlying library function (scale function PipeOpScale, say), usually “default” behaviour function parameter given. good practice use default behaviour whenever parameter set (removed). can easily done using mlr3misc library’s mlr3misc::invoke() function, functionality similar \".call()\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/articles/extending.html","id":"hyperparameter-example-pipeopscale","dir":"Articles","previous_headings":"Hyperparameters","what":"Hyperparameter Example: PipeOpScale","title":"Adding new PipeOps","text":"use hyperparameters can best shown example PipeOpScale, similar example , PipeOpScaleAlways. difference made presence hyperparameters. PipeOpScale constructs ParamSet $initialize function passes super$initialize function: user access can set get parameters. Types automatically checked: PipeOpScale handles parameters can seen $.train_dt method: gets relevant parameters $values slot uses mlr3misc::invoke() call. advantage calling scale() directly parameter given, default value \"scale()\" function used. Another change necessary compared PipeOpScaleAlways attributes \"scaled:scale\" \"scaled:center\" always present, depending parameters, possibly need set default values \\(1\\) \\(0\\), respectively. now even possible (bit pointless) call PipeOpScale scale center set FALSE, returns original dataset, unchanged.","code":"PipeOpScale$public_methods$initialize ## function (id = \"scale\", param_vals = list())  ## .__PipeOpScale__initialize(self = self, private = private, super = super,  ##     id = id, param_vals = param_vals) ## <environment: namespace:mlr3pipelines> pss = po(\"scale\") print(pss$param_set) ## <ParamSet(4)> ##                id    class lower upper nlevels        default  value ##            <char>   <char> <num> <num>   <num>         <list> <list> ## 1:         center ParamLgl    NA    NA       2           TRUE [NULL] ## 2:          scale ParamLgl    NA    NA       2           TRUE [NULL] ## 3:         robust ParamLgl    NA    NA       2 <NoDefault[0]>  FALSE ## 4: affect_columns ParamUty    NA    NA     Inf  <Selector[1]> [NULL] pss$param_set$values$center = FALSE print(pss$param_set$values) ## $center ## [1] FALSE ##  ## $robust ## [1] FALSE pss$param_set$values$scale = \"TRUE\" # bad input is checked! ## Error in self$assert(xs, sanitize = TRUE): Assertion on 'xs' failed: scale: Must be of type 'logical flag', not 'character'. PipeOpScale$private_methods$.train_dt ## function (dt, levels, target)  ## .__PipeOpScale__.train_dt(self = self, private = private, super = super,  ##     dt = dt, levels = levels, target = target) ## <environment: namespace:mlr3pipelines> pss$param_set$values$scale = FALSE pss$param_set$values$center = FALSE  gr = Graph$new() gr$add_pipeop(pss)  result = gr$train(task)  result[[1]]$data() ##        Species Petal.Length Petal.Width Sepal.Length Sepal.Width ##         <fctr>        <num>       <num>        <num>       <num> ##   1:    setosa          1.4         0.2          5.1         3.5 ##   2:    setosa          1.4         0.2          4.9         3.0 ##   3:    setosa          1.3         0.2          4.7         3.2 ##   4:    setosa          1.5         0.2          4.6         3.1 ##   5:    setosa          1.4         0.2          5.0         3.6 ##  ---                                                             ## 146: virginica          5.2         2.3          6.7         3.0 ## 147: virginica          5.0         1.9          6.3         2.5 ## 148: virginica          5.2         2.0          6.5         3.0 ## 149: virginica          5.4         2.3          6.2         3.4 ## 150: virginica          5.1         1.8          5.9         3.0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Binder. Author, maintainer. Florian Pfisterer. Author. Lennart Schneider. Author. Bernd Bischl. Author. Michel Lang. Author. Sebastian Fischer. Author. Susanne Dandl. Author. Keno Mersmann. Contributor. Maximilian Mücke. Contributor. Lona Koers. Contributor.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Binder M, Pfisterer F, Lang M, Schneider L, Kotthoff L, Bischl B (2021). “mlr3pipelines - Flexible Machine Learning Pipelines R.” Journal Machine Learning Research, 22(184), 1-7. https://jmlr.org/papers/v22/21-0281.html.","code":"@Article{mlr3pipelines,   title = {{mlr3pipelines} - Flexible Machine Learning Pipelines in R},   author = {Martin Binder and Florian Pfisterer and Michel Lang and Lennart Schneider and Lars Kotthoff and Bernd Bischl},   journal = {Journal of Machine Learning Research},   year = {2021},   volume = {22},   number = {184},   pages = {1-7},   url = {https://jmlr.org/papers/v22/21-0281.html}, }"},{"path":"https://mlr3pipelines.mlr-org.com/dev/index.html","id":"mlr3pipelines-","dir":"","previous_headings":"","what":"Preprocessing Operators and Pipelines for mlr3","title":"Preprocessing Operators and Pipelines for mlr3","text":"Package website: release | dev Dataflow Programming Machine Learning R.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/index.html","id":"what-is-mlr3pipelines","dir":"","previous_headings":"","what":"What is mlr3pipelines?","title":"Preprocessing Operators and Pipelines for mlr3","text":"Watch “WhyR 2020” Webinar Presentation Youtube introduction! Find slides .  mlr3pipelines dataflow programming toolkit machine learning R utilising mlr3 package. Machine learning workflows can written directed “Graphs” represent data flows preprocessing, model fitting, ensemble learning units expressive intuitive language. Using methods mlr3tuning package, even possible simultaneously optimize parameters multiple processing units. principle, mlr3pipelines defining singular data model manipulation steps “PipeOps”: pipeops can combined together define machine learning pipelines. can wrapped GraphLearner behave like Learner mlr3. learner can used resampling, benchmarking, even tuning.","code":"pca        = po(\"pca\") filter     = po(\"filter\", filter = mlr3filters::flt(\"variance\"), filter.frac = 0.5) learner_po = po(\"learner\", learner = lrn(\"classif.rpart\")) graph = pca %>>% filter %>>% learner_po glrn = GraphLearner$new(graph) resample(tsk(\"iris\"), glrn, rsmp(\"cv\")) #> <ResampleResult> with 10 resampling iterations #>  task_id                 learner_id resampling_id iteration warnings errors #>     iris pca.variance.classif.rpart            cv         1        0      0 #>     iris pca.variance.classif.rpart            cv         2        0      0 #>     iris pca.variance.classif.rpart            cv         3        0      0 #>     iris pca.variance.classif.rpart            cv         4        0      0 #>     iris pca.variance.classif.rpart            cv         5        0      0 #>     iris pca.variance.classif.rpart            cv         6        0      0 #>     iris pca.variance.classif.rpart            cv         7        0      0 #>     iris pca.variance.classif.rpart            cv         8        0      0 #>     iris pca.variance.classif.rpart            cv         9        0      0 #>     iris pca.variance.classif.rpart            cv        10        0      0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/index.html","id":"feature-overview","dir":"","previous_headings":"","what":"Feature Overview","title":"Preprocessing Operators and Pipelines for mlr3","text":"Single computational steps can represented -called PipeOps, can connected directed edges Graph. scope mlr3pipelines still growing; currently supported features : Simple data manipulation preprocessing operations, e.g. PCA, feature filtering Task subsampling speed outcome class imbalance handling mlr3 Learner operations prediction stacking Simultaneous path branching (data going ways) Alternative path branching (data going one specific way, controlled hyperparameters) Ensemble methods aggregation predictions","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Preprocessing Operators and Pipelines for mlr3","text":"good way get mlr3pipelines following two vignettes: Sequential Pipelines Non-Sequential Pipelines Tuning","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/index.html","id":"bugs-questions-feedback","dir":"","previous_headings":"","what":"Bugs, Questions, Feedback","title":"Preprocessing Operators and Pipelines for mlr3","text":"mlr3pipelines free open source software project encourages participation feedback. issues, questions, suggestions feedback, please hesitate open “issue” GitHub page! case problems / bugs, often helpful provide “minimum working example” showcases behaviour (don’t worry bug obvious). Please understand resources project limited: response may sometimes delayed days, feature suggestions may rejected deemed tangential vision behind project.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/index.html","id":"citing-mlr3pipelines","dir":"","previous_headings":"","what":"Citing mlr3pipelines","title":"Preprocessing Operators and Pipelines for mlr3","text":"use mlr3pipelines, please cite JMLR article:","code":"@Article{mlr3pipelines,   title = {{mlr3pipelines} - Flexible Machine Learning Pipelines in R},   author = {Martin Binder and Florian Pfisterer and Michel Lang and Lennart Schneider and Lars Kotthoff and Bernd Bischl},   journal = {Journal of Machine Learning Research},   year = {2021},   volume = {22},   number = {184},   pages = {1-7},   url = {https://jmlr.org/papers/v22/21-0281.html}, }"},{"path":"https://mlr3pipelines.mlr-org.com/dev/index.html","id":"similar-projects","dir":"","previous_headings":"","what":"Similar Projects","title":"Preprocessing Operators and Pipelines for mlr3","text":"predecessor package mlrCPO-package, works mlr 2.x. packages provide, varying degree, preprocessing functionality machine learning domain specific language, caret package related recipes project, dplyr package.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfAtom.html","id":null,"dir":"Reference","previous_headings":"","what":"Atoms for CNF Formulas — CnfAtom","title":"Atoms for CNF Formulas — CnfAtom","text":"CnfAtom objects represent single statement used build CNF formulae. mostly intermediate, created using %among% operator CnfAtom() directly, combined CnfClause CnfFormula objects. CnfClause CnfFormula , however, contain CnfAtom objects directly, CnfAtoms contain indirect reference CnfSymbol referencing name CnfUniverse. furthermore contain set values. CnfAtom represents statement asserting given symbol takes one given values. set values empty, CnfAtom represents contradiction (FALSE). full domain symbol, CnfAtom represents tautology (TRUE). values can converted , , logical(1) values using .logical() .CnfAtom(). CnfAtom objects can negated using ! operator, return CnfAtom representing set membership complement symbol respect domain. CnfAtoms can furthermore combined using | operator form CnfClause, using & operator form CnfFormula. happens even resulting statement represented single CnfAtom. part CNF representation tooling, currently considered experimental; internal use.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfAtom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atoms for CNF Formulas — CnfAtom","text":"","code":"CnfAtom(symbol, values)  e1 %among% e2  as.CnfAtom(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfAtom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atoms for CNF Formulas — CnfAtom","text":"symbol (CnfSymbol)  symbol atom refers. values (character)  values symbol can take. e1 (CnfSymbol)  Left-hand side %among% operator. Passed symbol CnfAtom(). e2 (character)  Right-hand side %among% operator. Passed values CnfAtom(). x ()  object coerced CnfAtom .CnfAtom. logical(1) CnfAtom currently supported.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfAtom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atoms for CNF Formulas — CnfAtom","text":"new CnfAtom object.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfAtom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Atoms for CNF Formulas — CnfAtom","text":"preferred overload %% operator, currently easily possible R. therefore created %among% operator. internal representation CnfAtom may change future.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfAtom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atoms for CNF Formulas — CnfAtom","text":"","code":"u = CnfUniverse() X = CnfSymbol(u, \"X\", c(\"a\", \"b\", \"c\"))  CnfAtom(X, c(\"a\", \"b\")) #> CnfAtom: X ∈ {a, b}. X %among% \"a\" #> CnfAtom: X ∈ {a}. X %among% character(0) #> CnfAtom: <FALSE> X %among% c(\"a\", \"b\", \"c\") #> CnfAtom: <TRUE>  as.logical(X %among% character(0)) #> [1] FALSE #> attr(,\"universe\") #> CnfUniverse with variables: #>   X: {a, b, c} as.CnfAtom(TRUE) #> CnfAtom: <TRUE>  !(X %among% \"a\") #> CnfAtom: X ∈ {b, c}.  X %among% \"a\" | X %among% \"b\"  # creates a CnfClause #> CnfClause: #>   X ∈ {a, b}  X %among% \"a\" & X %among% c(\"a\", \"b\")  # creates a CnfFormula #> CnfFormula: #>      (X ∈ {a})"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfClause.html","id":null,"dir":"Reference","previous_headings":"","what":"Clauses in CNF Formulas — CnfClause","title":"Clauses in CNF Formulas — CnfClause","text":"CnfClause disjunction CnfAtom objects. represents statement true least one atoms true. example form   CnfClause objects can constructed explicitly, using CnfClause() constructor, implicitly, using | operator CnfAtoms CnfClause objects. CnfClause objects tautologies contradictions named lists; value ranges symbol can accessed using [[, clauses can subset using [ get clauses containing indicated symbols. However, get list CnfAtom objects, use .list(). Note simplified form clause containing contradiction empty list. Upon construction, CnfClause simplified (1) removing contradictions, (2) unifying atoms refer symbol, (3) evaluating TRUE atom TRUE. Note order atoms clause preserved. Using CnfClause() lists contain CnfClause objects create clause disjunction atoms clauses. CnfClause contains atoms, FALSE atoms, evaluates FALSE. contains least one atom always true, clause evaluates TRUE. values can converted , , logical(1) values using .logical() .CnfClause(). CnfClause objects can negated using ! operator, combined using & operator. operations return CnfFormula, even result principle represented single CnfClause. part CNF representation tooling, currently considered experimental; internal use.","code":"X %among% c(\"a\", \"b\", \"c\") | Y %among% c(\"d\", \"e\", \"f\") | ..."},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfClause.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clauses in CNF Formulas — CnfClause","text":"","code":"CnfClause(atoms)  as.CnfClause(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfClause.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clauses in CNF Formulas — CnfClause","text":"atoms (list (CnfAtom | CnfClause))  list CnfAtom CnfClause objects. clause represents disjunction atoms. x ()  object coerced CnfClause .CnfClause. logical(1), CnfAtom, CnfClause currently supported.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfClause.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clauses in CNF Formulas — CnfClause","text":"new CnfClause object.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfClause.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clauses in CNF Formulas — CnfClause","text":"undecided whether better idea .list() return named list unnamed one. Calling .list() CnfClause tautology returns tautology-atom, name. currently return named list clauses, makes subsetting name commute .list(). However, behaviour may change future.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfClause.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clauses in CNF Formulas — CnfClause","text":"","code":"u = CnfUniverse() X = CnfSymbol(u, \"X\", c(\"a\", \"b\", \"c\")) Y = CnfSymbol(u, \"Y\", c(\"d\", \"e\", \"f\"))  CnfClause(list(X %among% c(\"a\", \"b\"), Y %among% c(\"d\", \"e\"))) #> CnfClause: #>   X ∈ {a, b} | Y ∈ {d, e} cls = X %among% c(\"a\", \"b\") | Y %among% c(\"d\", \"e\") cls #> CnfClause: #>   X ∈ {a, b} | Y ∈ {d, e}  as.list(cls) #> [[1]] #> CnfAtom: X ∈ {a, b}. #>  #> [[2]] #> CnfAtom: Y ∈ {d, e}. #>   as.CnfClause(X %among% c(\"a\", \"b\")) #> CnfClause: #>   X ∈ {a, b}  # The same symbols are unified X %among% \"a\" | Y %among% \"d\" | X %among% \"b\" #> CnfClause: #>   X ∈ {a, b} | Y ∈ {d}  # tautology evaluates to TRUE X %among% \"a\" | X %among% \"b\" | X %among% \"c\" #> CnfClause: TRUE  # contradictions are removed X %among% \"a\" | Y %among% character(0) #> CnfClause: #>   X ∈ {a}  # create CnfFormula: !(X %among% \"a\" | Y %among% \"d\") #> CnfFormula: #>      (X ∈ {b, c}) #>    & (Y ∈ {e, f})  # also a CnfFormula, even if it contains a single clause: !CnfClause(list(X %among% \"a\")) #> CnfFormula: #>      (X ∈ {b, c}) (X %among% c(\"a\", \"c\") | Y %among% \"d\") &   (X %among% c(\"a\", \"b\") | Y %among% \"d\") #> CnfFormula: #>      (X ∈ {a} | Y ∈ {d})"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"CNF Formulas — CnfFormula","title":"CNF Formulas — CnfFormula","text":"CnfFormula conjunction CnfClause objects. represents statement true clauses true. example form   CnfFormula objects can constructed explicitly, using CnfFormula() constructor, implicitly, using & operator CnfAtoms, CnfClauses, CnfFormula objects. get individual clauses formula, [[ used; instead, use .list(). Note simplified form formula containing tautology empty list. Upon construction, CnfFormula simplified using various heuristics. includes unit propagation, subsumption elimination, self/hidden subsumption elimination, hidden tautology elimination, resolution subsumption elimination (see examples). Note order clauses formula preserved. Using CnfFormula() lists contain CnfFormula objects create formula conjunction clauses formulas. may somewhat efficient applying & many times row. CnfFormula contains clauses, TRUE clauses, evaluates TRUE. contains least one clause , , always false, formula evaluates FALSE. contradictions clauses recognized, however. values can converted , , logical(1) values using .logical() .CnfFormula(). CnfFormula objects can negated using ! operator. Beware may lead exponential blow-number clauses. part CNF representation tooling, currently considered experimental; internal use.","code":"(X %among% \"a\" | Y %among% \"d\") & Z %among% \"g\""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CNF Formulas — CnfFormula","text":"","code":"CnfFormula(clauses)  as.CnfFormula(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CNF Formulas — CnfFormula","text":"clauses (list CnfClause)  list CnfClause objects. formula represents conjunction clauses. x ()  object coerced CnfFormula .CnfFormula. logical(1), CnfAtom, CnfClause, CnfFormula currently supported.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CNF Formulas — CnfFormula","text":"new CnfFormula object.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CNF Formulas — CnfFormula","text":"","code":"u = CnfUniverse() X = CnfSymbol(u, \"X\", c(\"a\", \"b\", \"c\")) Y = CnfSymbol(u, \"Y\", c(\"d\", \"e\", \"f\")) Z = CnfSymbol(u, \"Z\", c(\"g\", \"h\", \"i\"))  frm = (X %among% c(\"a\", \"b\") | Y %among% c(\"d\", \"e\")) &   Z %among% c(\"g\", \"h\") frm #> CnfFormula: #>      (Z ∈ {g, h}) #>    & (X ∈ {a, b} | Y ∈ {d, e})  # retrieve individual clauses as.list(frm) #> [[1]] #> CnfClause: #>   Z ∈ {g, h} #>  #> [[2]] #> CnfClause: #>   X ∈ {a, b} | Y ∈ {d, e} #>   # Negation of a formula # Note the parentheses, otherwise `!` would be applied to the first clause only. !((X %among% c(\"a\", \"b\") | Y %among% c(\"d\", \"e\")) &    Z %among% c(\"g\", \"h\")) #> CnfFormula: #>      (X ∈ {c} | Z ∈ {i}) #>    & (Y ∈ {f} | Z ∈ {i})  ## unit propagation # The second clause can not be satisfied when X is \"b\", so \"b\" can be # removed from the possibilities in the first clause. (X %among% c(\"a\", \"b\") | Y %among% c(\"d\", \"e\")) &   X %among% c(\"a\", \"c\") #> CnfFormula: #>      (X ∈ {a, c}) #>    & (X ∈ {a} | Y ∈ {d, e})  ## subsumption elimination # The first clause is a subset of the second clause; whenever the # first clause is satisfied, the second clause is satisfied as well, so the # second clause can be removed. (X %among% \"a\" | Y %among% c(\"d\", \"e\")) &   (X %among% c(\"a\", \"b\") | Y %among% c(\"d\", \"e\") | Z %among% \"g\") #> CnfFormula: #>      (X ∈ {a} | Y ∈ {d, e})  ## self subsumption elimination # If the first clause is satisfied but X is not \"a\", then Y must be \"e\". # The `Y %among% \"d\"` part of the first clause can therefore be removed. (X %among% c(\"a\", \"b\") | Y %among% \"d\") &   (X %among% \"a\" | Y %among% \"e\") #> CnfFormula: #>      (X ∈ {a, b}) #>    & (X ∈ {a} | Y ∈ {e})  ## resolution subsumption elimination # The first two statements can only be satisfied if Y is either \"d\" or \"e\", # since when X is \"a\" then Y must be \"e\", and when X is \"b\" then Y must be \"d\". # The third statement is therefore implied by the first two, and can be # removed. (X %among% \"a\" | Y %among% \"d\") &   (X %among% \"b\" | Y %among% \"e\") &   (Y %among% c(\"d\", \"e\")) #> CnfFormula: #>      (X ∈ {a} | Y ∈ {d}) #>    & (X ∈ {b} | Y ∈ {e})  ## hidden tautology elimination / hidden subsumption elimination # When considering the first two clauses only, adding another atom # `Z %among% \"i\"` to the first clause would not change the formula, since # whenever Z is \"i\", the second clause would need to be satisfied in a way # that would also satisfy the first clause, making this atom redundant # (\"hidden literal addition\"). Considering the pairs of clause 1 and 3, and # clauses 1 and 4, one could likewise add `Z %among% \"g\"` and #' `Z %among% \"h\"`, respectively. This would reveal the first clausee to be # a \"hidden\" tautology: it is equivalent to a clause containing the # atom `Z %among% c(\"g\", \"h\", \"i\")` == TRUE. # Alternatively, one could perform \"hidden\" resolution subsumption using # clause 4 after having added the atom `Z %among% c(\"g\", \"i\")` to the first # clause by using clauses 2 and 3. (X %among% c(\"a\", \"b\") | Y %among% c(\"d\", \"e\")) &   (X %among% \"a\" | Z %among% c(\"g\", \"h\")) &   (X %among% \"b\" | Z %among% c(\"h\", \"i\")) &   (Y %among% c(\"d\", \"e\") | Z %among% c(\"g\", \"i\")) #> CnfFormula: #>      (X ∈ {a} | Z ∈ {g, h}) #>    & (X ∈ {b} | Z ∈ {h, i}) #>    & (Y ∈ {d, e} | Z ∈ {g, i})  ## Simple contradictions are recognized: (X %among% \"a\") & (X %among% \"b\") #> CnfFormula: FALSE # Tautologies are preserved (X %among% c(\"a\", \"b\", \"c\")) & (Y %among% c(\"d\", \"e\", \"f\")) #> CnfFormula: TRUE  # But not all contradictions are recognized. # Builtin heuristic CnfFormula preprocessing is not a SAT solver. contradiction = (X %among% \"a\" | Y %among% \"d\") &   (X %among% \"b\" | Y %among% \"e\") &   (X %among% \"c\" | Y %among% \"f\") contradiction #> CnfFormula: FALSE  # Negation of a contradiction results in a tautology, which is recognized # and simplified to TRUE. However, note that this operation (1) generally has # exponential complexity in the number of terms and (2) is currently also not # particularly well optimized !contradiction #> CnfFormula: TRUE"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfSymbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Symbols for CNF Formulas — CnfSymbol","title":"Symbols for CNF Formulas — CnfSymbol","text":"Representation Symbols used CNF formulas. Symbols name domain (set possible values), stored CnfUniverse. created, currently intended modify delete symbols. Symbols can used CNF formulas creating CnfAtom objects, either using %among% operator using CnfAtom() constructor explicitly. part CNF representation tooling, currently considered experimental; internal use.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfSymbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symbols for CNF Formulas — CnfSymbol","text":"","code":"CnfSymbol(universe, name, domain)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfSymbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symbols for CNF Formulas — CnfSymbol","text":"universe (CnfUniverse)  universe symbol defined. name (character(1))  name symbol. domain (character)  domain, .e. set possible values symbol. Must empty.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfSymbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symbols for CNF Formulas — CnfSymbol","text":"new CnfSymbol object.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfSymbol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Symbols for CNF Formulas — CnfSymbol","text":"","code":"u = CnfUniverse() X = CnfSymbol(u, \"X\", c(\"a\", \"b\", \"c\"))  # Use symbols to create CnfAtom objects X %among% c(\"a\", \"b\") #> CnfAtom: X ∈ {a, b}. X %among% \"a\" #> CnfAtom: X ∈ {a}. X %among% character(0) #> CnfAtom: <FALSE> X %among% c(\"a\", \"b\", \"c\") #> CnfAtom: <TRUE>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfUniverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Symbol Table for CNF Formulas — CnfUniverse","title":"Symbol Table for CNF Formulas — CnfUniverse","text":"symbol table CNF formulas. CnfUniverse -reference object stores domain symbol. Symbols created CnfSymbol() can retrieved $. Using [[ retrieves given symbol's domain. possible combine symbols (identical) universe. part CNF representation tooling, currently considered experimental; internal use.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfUniverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symbol Table for CNF Formulas — CnfUniverse","text":"","code":"CnfUniverse()"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfUniverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symbol Table for CNF Formulas — CnfUniverse","text":"new CnfUniverse object.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/CnfUniverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Symbol Table for CNF Formulas — CnfUniverse","text":"","code":"u = CnfUniverse() X = CnfSymbol(u, \"X\", c(\"a\", \"b\", \"c\")) Y = CnfSymbol(u, \"Y\", c(\"d\", \"e\", \"f\"))  u$X #> CnfSymbol 'X' with domain {a, b, c}. u[[\"Y\"]] #> [1] \"d\" \"e\" \"f\"  X %among% c(\"a\", \"c\") #> CnfAtom: X ∈ {a, c}. u$X %among% c(\"a\", \"c\") #> CnfAtom: X ∈ {a, c}. Y %among% c(\"d\", \"e\", \"f\") #> CnfAtom: <TRUE> Y %among% character(0) #> CnfAtom: <FALSE>  u$X %among% \"a\" | u$Y %among% \"d\" #> CnfClause: #>   X ∈ {a} | Y ∈ {d}"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Base Class — Graph","title":"Graph Base Class — Graph","text":"Graph representation machine learning pipeline graph. can trained, subsequently used prediction. Graph useful used together Learner objects encapsulated PipeOpLearner. case, Graph produces Prediction data $predict() phase can used Learner (using GraphLearner wrapper). However, Graph can also used without Learner objects simply perform preprocessing data, , principle, even need handle data can used general processes dependency structure (although PipeOps need written).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Graph.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Graph Base Class — Graph","text":"R6Class.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Graph.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Graph Base Class — Graph","text":"","code":"Graph$new()"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Graph.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Graph Base Class — Graph","text":"Graph made list PipeOps, data.table edges. training prediction, Graph performs topological sorting PipeOps executes respective $train() $predict() functions order, moving PipeOp results along edges input PipeOps.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Graph.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Graph Base Class — Graph","text":"pipeops :: named list PipeOp  Contains PipeOps Graph, named PipeOp's $ids. edges :: data.table  columns src_id (character), src_channel (character), dst_id (character), dst_channel (character) Table connections PipeOps. data.table. src_id dst_id $ids PipeOps must present $pipeops list. src_channel dst_channel must respectively $output $input channel names respective PipeOps. is_trained :: logical(1)  Graph, .e. PipeOps, trained, can Graph used prediction? lhs :: character  Ids 'left-hand-side' PipeOps unconnected input channels therefore act Graph input layer. rhs :: character  Ids 'right-hand-side' PipeOps unconnected output channels therefore act Graph output layer. input :: data.table columns name (character), train (character), predict (character), op.id (character), channel.name (character) Input channels Graph. channel lists name, input type training, input type prediction, PipeOp $id PipeOp channel pertains , channel name PipeOp knows . output :: data.table columns name (character), train (character), predict (character), op.id (character), channel.name (character) Output channels Graph. channel lists name, output type training, output type prediction, PipeOp $id PipeOp channel pertains , channel name PipeOp knows . packages :: character Set required packages various methods Graph, set union required packages contained PipeOp objects. state :: named list Get / Set $state members PipeOp. param_set :: ParamSet Parameters parameter constraints. Parameter values $param_set$values. union $param_sets PipeOps Graph. Parameter names seen Graph naming scheme <PipeOp$id>.<PipeOp original parameter name>. Changing $param_set$values also propagates changes directly contained PipeOps alternative changing PipeOps $param_set$values directly. hash :: character(1)  Stores checksum calculated Graph configuration, includes PipeOp hashes (therefore $param_set$values) hash $edges. phash :: character(1)  Stores checksum calculated Graph configuration, includes PipeOp hashes except $param_set$values, hash $edges. keep_results :: logical(1) Whether store intermediate results PipeOp's $.result slot, mostly debugging purposes. Default FALSE. man :: character(1) Identifying string help page shows help().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Graph.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Graph Base Class — Graph","text":"ids(sorted = FALSE)  (logical(1)) -> character  Get IDs PipeOps. order PipeOps added sorted FALSE, topologically sorted sorted TRUE. add_pipeop(op, clone = TRUE)  (PipeOp | Learner | Filter | ..., logical(1)) -> self  Mutates Graph adding PipeOp Graph. add edges, new PipeOp connected within Graph first. Instead supplying PipeOp directly, object can naturally converted PipeOp can also supplied, e.g. Learner Filter; see as_pipeop(). argument given op cloned clone TRUE (default); access Graph's PipeOps -reference, use $pipeops. Note $add_pipeop() relatively low-level operation, recommended build graphs using %>>%. add_edge(src_id, dst_id, src_channel = NULL, dst_channel = NULL)  (character(1), character(1), character(1) | numeric(1) | NULL, character(1) | numeric(1) | NULL) -> self  Add edge PipeOp src_id, channel src_channel (identified name number listed PipeOp's $output), PipeOp dst_id's channel dst_channel (identified name number listed PipeOp's $input). source destination PipeOp one input / output channel src_channel / dst_channel therefore unambiguous, can omitted (.e. left NULL). chain(gs, clone = TRUE)  (list Graphs, logical(1)) -> self  Takes list Graphs PipeOps (objects can automatically converted Graphs PipeOps, see as_graph() as_pipeop()) inputs joins serial Graph coming self, connecting using %>>%. plot(html = FALSE, horizontal = FALSE)  (logical(1), logical(1)) -> NULL  Plot Graph, using either igraph package (html = FALSE, default) visNetwork package html = TRUE producing htmlWidget. htmlWidget can rescaled using visOptions. html = FALSE, orientation plotted graph can controlled horizontal. print(dot = FALSE, dotname = \"dot\", fontsize = 24L)  (logical(1), character(1), integer(1)) -> NULL  Print representation Graph console. dot FALSE, output table one row contained PipeOp columns ID ($id PipeOp), State (short representation $state PipeOp), sccssors (PipeOps take input directly PipeOp line), prdcssors (PipeOps produce data read input PipeOp line). dot TRUE, print DOT representation Graph console. DOT output can named via argument dotname fontsize can also specified. set_names(old, new)  (character, character) -> self  Rename PipeOps: Change ID PipeOp identified old corresponding item new. used instead changing PipeOp's $id value directly! update_ids(prefix = \"\", postfix = \"\")  (character, character) -> self  Pre- postfix PipeOp's existing ids. prefix postfix default \"\", .e. changes. train(input, single_input = TRUE)  (, logical(1)) -> named list Train Graph traversing Graphs' edges calling PipeOp's $train methods turn. Return named list outputs unconnected PipeOp -channel, named according Graph's $output name column. training, $state member PipeOps set $is_trained slot Graph (individual PipeOp) consequently set TRUE. single_input TRUE, input value sent unconnected PipeOp's input channel (listed Graph's $input). Typically, input Task, although dependent PipeOps Graph. single_input FALSE, input list length Graph's $input table rows; list item sent corresponding input channel Graph. input named list, names must correspond input channel names ($input$name) inputs sent channels name; otherwise sent channels order listed $input. predict(input, single_input = TRUE)  (, logical(1)) -> list  Predict Graph calling PipeOp's $train methods. Input output, well function single_input argument, analogous $train(). help(help_type)  (character(1)) -> help file Displays help file concrete PipeOp instance. help_type one \"text\", \"html\", \"pdf\" behaves help_type argument R's help().","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph Base Class — Graph","text":"","code":"library(\"mlr3\")  g = Graph$new()$   add_pipeop(PipeOpScale$new(id = \"scale\"))$   add_pipeop(PipeOpPCA$new(id = \"pca\"))$   add_edge(\"scale\", \"pca\") g$input #>           name  train predict  op.id channel.name #>         <char> <char>  <char> <char>       <char> #> 1: scale.input   Task    Task  scale        input g$output #>          name  train predict  op.id channel.name #>        <char> <char>  <char> <char>       <char> #> 1: pca.output   Task    Task    pca       output  task = tsk(\"iris\") trained = g$train(task) trained[[1]]$data() #>        Species        PC1         PC2         PC3         PC4 #>         <fctr>      <num>       <num>       <num>       <num> #>   1:    setosa -2.2571412 -0.47842383  0.12727962 -0.02408751 #>   2:    setosa -2.0740130  0.67188269  0.23382552 -0.10266284 #>   3:    setosa -2.3563351  0.34076642 -0.04405390 -0.02828231 #>   4:    setosa -2.2917068  0.59539986 -0.09098530  0.06573534 #>   5:    setosa -2.3818627 -0.64467566 -0.01568565  0.03580287 #>  ---                                                          #> 146: virginica  1.8642579 -0.38567404 -0.25541818 -0.38795715 #> 147: virginica  1.5593565  0.89369285  0.02628330 -0.21945690 #> 148: virginica  1.5160915 -0.26817075 -0.17957678 -0.11877324 #> 149: virginica  1.3682042 -1.00787793 -0.93027872 -0.02604141 #> 150: virginica  0.9574485  0.02425043 -0.52648503  0.16253353  task$filter(1:10) predicted = g$predict(task) predicted[[1]]$data() #>     Species       PC1         PC2         PC3          PC4 #>      <fctr>     <num>       <num>       <num>        <num> #>  1:  setosa -2.257141 -0.47842383  0.12727962 -0.024087508 #>  2:  setosa -2.074013  0.67188269  0.23382552 -0.102662845 #>  3:  setosa -2.356335  0.34076642 -0.04405390 -0.028282305 #>  4:  setosa -2.291707  0.59539986 -0.09098530  0.065735340 #>  5:  setosa -2.381863 -0.64467566 -0.01568565  0.035802870 #>  6:  setosa -2.068701 -1.48420530 -0.02687825 -0.006586116 #>  7:  setosa -2.435868 -0.04748512 -0.33435030  0.036652767 #>  8:  setosa -2.225392 -0.22240300  0.08839935  0.024529919 #>  9:  setosa -2.326845  1.11160370 -0.14459247  0.026769540 #> 10:  setosa -2.177035  0.46744757  0.25291827  0.039766068"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Multiplicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplicity — Multiplicity","title":"Multiplicity — Multiplicity","text":"Multiplicity class S3 object. function multiplicities indicate PipeOps executed multiple times multiple values. Multiplicity container, like list(), contains multiple values. message passed along edge Graph Multiplicity-object, PipeOp receives object usually called contained value. result calls , , packed Multiplicity sent along outgoing edge(s) PipeOp. means Multiplicity can cause multiple PipeOps row run multiple times, run element Multiplicity independent others. PipeOps return Multiplicity input Multiplicity (run code multiple times, entry). However, special PipeOps \"aware\" Multiplicity objects. may either create Multiplicity even though Multiplicity input (e.g. PipeOpReplicate PipeOpOVRSplit) – causing subsequent PipeOps run multiple times – collect Multiplicity, called even though input Multiplicity (e.g. PipeOpOVRUnite PipeOpFeatureUnion constructed collect_multiplicity argument set TRUE). combination mechanisms makes possible parts Graph called variably many times \"sandwiched\" Multiplicity creating collecting PipeOps. Whether PipeOp creates collects Multiplicity indicated $input $output slot (indicate names types /channels). train predict types input output surrounded square brackets (\"[\", \"]\"), channel handles Multiplicity explicitly. Depending function PipeOp, usually collect (input channel) create (output channel) Multiplicity. PipeOps without indicator Multiplicity agnostic blindly execute function multiple times given Multiplicity. PipeOp trained Multiplicity, $state slot set Multiplicity well; Multiplicity contains \"original\" $state resulting individual call PipeOp input Multiplicity's content. PipeOp trained Multiplicity, predict() argument must Multiplicity number elements.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Multiplicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiplicity — Multiplicity","text":"","code":"Multiplicity(...)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Multiplicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiplicity — Multiplicity","text":"... Can anything.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Multiplicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiplicity — Multiplicity","text":"Multiplicity","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/NO_OP.html","id":null,"dir":"Reference","previous_headings":"","what":"No-Op Sentinel Used for Alternative Branching — NO_OP","title":"No-Op Sentinel Used for Alternative Branching — NO_OP","text":"Special data type -ops. Distinct NULL easier debugging distinction unintentional NULL returns.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/NO_OP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"No-Op Sentinel Used for Alternative Branching — NO_OP","text":"","code":"NO_OP"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/NO_OP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"No-Op Sentinel Used for Alternative Branching — NO_OP","text":"R6 object.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOp.html","id":null,"dir":"Reference","previous_headings":"","what":"PipeOp Base Class — PipeOp","title":"PipeOp Base Class — PipeOp","text":"PipeOp represents transformation given \"input\" given \"output\", two stages: \"training\" \"prediction\". can understood generalized function multiple inputs, also multiple outputs (well two stages). \"training\" stage used training machine learning pipeline fitting statistical model, \"predicting\" stage used making predictions new data. perform training, $train() function called takes inputs transforms , simultaneously storing information $state slot. prediction, $predict() function called, $state information can used influence transformation new data. PipeOp usually used Graph object, representation computational graph. can multiple input channels—think multiple arguments function, example averaging different models—, multiple output channels—transformation may return different objects, example different subsets Task. purpose Graph connect different outputs PipeOps inputs PipeOps. Input output channel information PipeOp defined $input $output slots; channel name, required type training, required type prediction. $train() $predict() functions called list argument one entry declared channel (one exception, see next paragraph). list automatically type-checked channel $input passed private$.train() private$.predict() functions. data processed result list created. list type-checked declared output types channel. length types result list declared $output. special input channel name \"...\", creates vararg channel takes arbitrarily many arguments, type. $input table contains \"...\"-entry, input given $train() $predict() may longer number declared input channels. class abstract base class PipeOps used Graph inherit , intended instantiated.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PipeOp Base Class — PipeOp","text":"Abstract R6Class.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOp.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"PipeOp Base Class — PipeOp","text":"id :: character(1) Identifier resulting object. See $id slot. param_set :: ParamSet | list expression Parameter space description. created subclass given super$initialize(). ParamSet, used PipeOp's ParamSet directly. Otherwise must list expressions e.g. created alist() evaluate ParamSets. ParamSet combined using ParamSetCollection. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings given param_set. subclass param_vals parameter pass super$initialize(). Default list(). input :: data.table columns name (character), train (character), predict (character) Sets $input slot resulting object; see description . output :: data.table columns name (character), train (character), predict (character) Sets $output slot resulting object; see description . packages :: character Set required packages PipeOp's $train $predict methods. See $packages slot. Default character(0). tags ::character set tags associated PipeOp. Tags describe PipeOp's purpose. Can used filter .data.table(mlr_pipeops). Default \"abstract\", indicating abstract PipeOp.","code":"PipeOp$new(id, param_set = ps(), param_vals = list(), input, output, packages = character(0), tags = character(0))"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOp.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"PipeOp Base Class — PipeOp","text":"PipeOp abstract class abstract functions private$.train() private$.predict(). create functional PipeOp class, two methods must implemented. functions receives named list according PipeOp's input channels, must return list (names ignored) values order output channels $output. private$.train() private$.predict() function called user; instead, $train() $predict() used. convenient usage add PipeOp Graph (possibly singleton Graph), using Graph's $train() / $predict() methods. private$.train() private$.predict() treat inputs read-. R6 objects, cloned manipulated -place. Objects, parts objects, changed, need cloned, legal return identical--reference objects multiple outputs.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOp.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"PipeOp Base Class — PipeOp","text":"id :: character ID PipeOp. IDs user-configurable, IDs PipeOps must unique within Graph. IDs PipeOps must changed part Graph, instead Graph's $set_names() method used. packages :: character Packages required PipeOp. Functions base R still called using :: (explicitly attached using require()) private$.train() private$.predict(), packages declared checked (possibly expensive) processing started within Graph. param_set :: ParamSet Parameters parameter constraints. Parameter values influence functioning $train / $predict $param_set$values slot; automatically checked parameter constraints $param_set. state :: | NULL Method-dependent state obtained training step, usually required prediction step. NULL PipeOp trained. $state slot can reliably modified $train(), private$.train() may theoretically executed different R-session (e.g. parallelization). $state furthermore always set something copy-semantics, since never cloned. limitation PipeOp mlr3pipelines, way system whole works, together GraphLearner mlr3. input :: data.table columns name (character), train (character), predict (character) Input channels PipeOp. Column name gives names (order) values list given $train() $predict(). Column train (S3) class input object must conform training, column predict (S3) class input object must conform prediction. Types checked PipeOp need checked private$.train() / private$.predict() code. special name \"...\", creates vararg input channel accepts variable number inputs. row train predict values enclosed square brackets (\"[\", \"]\"), channel Multiplicity-aware. PipeOp receives Multiplicity value channels, Multiplicity given .train() .predict() functions directly. Otherwise, Multiplicity transparently unpacked .train() .predict() functions called multiple times, Multiplicity element. type enclosed square brackets indicates Multiplicity containing values type accepted. See Multiplicity information. output :: data.table columns name (character), train (character), predict (character) Output channels PipeOp, order given list returned $train $predict functions. Column train (S3) class output object must conform training, column predict (S3) class output object must conform prediction. PipeOp checks values returned private$.train() private$.predict() types specifications. row train predict values enclosed square brackets (\"[\", \"]\"), signals channel emits Multiplicity indicated type. See Multiplicity information. innum :: numeric(1)  Number input channels. equals nrow($input). outnum :: numeric(1)  Number output channels. equals nrow($output). is_trained :: logical(1)  Indicate whether PipeOp already trained can therefore used prediction. tags ::character set tags associated PipeOp. Tags describe PipeOp's purpose. Can used filter .data.table(mlr_pipeops). PipeOp tags inherited child classes can introduce additional tags. hash :: character(1)  Checksum calculated PipeOp, depending PipeOp's class slots $id $param_set$values. PipeOp's functionality may change depending values, inherit $hash active binding calculate hash digest(list(super$hash, <THINGS>), algo = \"xxhash64\"). phash :: character(1)  Checksum calculated PipeOp, depending PipeOp's class slots $id ignoring $param_set$values. PipeOp's functionality may change depending values, inherit $hash active binding calculate hash digest(list(super$hash, <THINGS>), algo = \"xxhash64\"). .result :: list  Graph's $keep_results flag set TRUE, intermediate Results $train() $predict() saved slot, exactly returned functions. mainly debugging purposes done, requested, Graph backend ; done explicitly private$.train() private$.predict(). man :: character(1) Identifying string help page shows help(). label :: character(1) Description PipeOp's functionality. Derived title help page. properties :: character() properties PipeOp. Currently supported values : \"validation\": PipeOp can make use $internal_valid_task mlr3::Task. example used PipeOpLearners wrap Learner property, see mlr3::Learner. PipeOps property, also $validate field, controls whether use validation task, well $internal_valid_scores field, allows access internal validation scores training. \"internal_tuning\": PipeOp able internally optimize hyperparameters. works analogously internal tuning implementation mlr3::Learner. PipeOps property also implement standardized accessor $internal_tuned_values least one parameter tagged \"internal_tuning\". example PipeOp PipeOpLearner wraps Learner \"internal_tuning\" property. Programatic access available properties possible via mlr_reflections$pipeops$properties.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOp.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PipeOp Base Class — PipeOp","text":"print()  () -> NULL  Prints PipeOps salient information: $id, $is_trained, $param_set$values, $input $output. help(help_type)  (character(1)) -> help file Displays help file concrete PipeOp instance. help_type one \"text\", \"html\", \"pdf\" behaves help_type argument R's help(). following public $train() $predict() methods primary user-facing functions intended direct use: train(input) (list) -> named list Train PipeOp inputs, transform output store learned $state. PipeOp already trained, already present $state overwritten. Input list typechecked $input train column. Return value list many entries $output rows, entry named $output name column class according $output train column. workhorse function training PipeOp private$.train() function. predict(input)  (list) -> named list Predict new data input, possibly using stored $state. Input output specified $input $output way $train(), except predict column used type checking. workhorse function predicting PipeOp private$.predict() function. implement PipeOp following abstract private functions overloaded inheriting PipeOp. Note called user; instead public $train() $predict() method used. .train(input) (named list) -> list Abstract function must implemented concrete subclasses. private$.train() called $train() typechecking. must change $state value something non-NULL return list transformed data according $output train column. Names returned list ignored. .predict(input) (named list) -> list Abstract function must implemented concrete subclasses. private$.predict() called $predict() typechecking works analogously private$.train(). Unlike private$.train(), private$.predict() modify PipeOp way.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOp.html","id":"inheriting","dir":"Reference","previous_headings":"","what":"Inheriting","title":"PipeOp Base Class — PipeOp","text":"create PipeOp, need overload private$.train() private$.predict() functions. likely also necessary overload $initialize() function additional initialization. $initialize() method least arguments id param_vals, passed super$initialize() unchanged. id useful default value, param_vals default value list(), meaning initialization hyperparameters. $initialize() method arguments, necessary also overload private$.additional_phash_input() function. function return either objects, hash objects, can change function behavior PipeOp independent class, id, $state, $param_set$values. last point particularly important: changing $param_set$values change return value private$.additional_phash_input(). implementing PipeOp operates task (PipeOpTaskPreproc), also need handle $internal_valid_task field input task, one.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PipeOp Base Class — PipeOp","text":"","code":"# example (bogus) PipeOp that returns the sum of two numbers during $train() # as well as a letter of the alphabet corresponding to that sum during $predict().  PipeOpSumLetter = R6::R6Class(\"sumletter\",   inherit = PipeOp,  # inherit from PipeOp   public = list(     initialize = function(id = \"posum\", param_vals = list()) {       super$initialize(id, param_vals = param_vals,         # declare \"input\" and \"output\" during construction here         # training takes two 'numeric' and returns a 'numeric';         # prediction takes 'NULL' and returns a 'character'.         input = data.table::data.table(name = c(\"input1\", \"input2\"),           train = \"numeric\", predict = \"NULL\"),         output = data.table::data.table(name = \"output\",           train = \"numeric\", predict = \"character\")       )     }   ),   private = list(     # PipeOp deriving classes must implement .train and     # .predict; each taking an input list and returning     # a list as output.     .train = function(input) {       sum = input[[1]] + input[[2]]       self$state = sum       list(sum)     },     .predict = function(input) {       list(letters[self$state])     }   ) ) posum = PipeOpSumLetter$new()  print(posum) #> PipeOp: <posum> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input1 [numeric,NULL], input2 [numeric,NULL] #> Output channels <name [train type, predict type]>: #>   output [numeric,character]  posum$train(list(1, 2)) #> $output #> [1] 3 #>  # note the name 'output' is the name of the output channel specified # in the $output data.table.  posum$predict(list(NULL, NULL)) #> $output #> [1] \"c\" #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"Abstract base class piecewise linear encoding. Piecewise linear encoding works splitting values features distinct bins, algorithm implemented private$.get_bins(), creating new feature columns continuous alternative one-hot encoding. , one new feature per bin constructed, values either 0, original value lower bin boundary, 1, original value equal upper bin boundary, scaled value 0 1, original value inside bin boundaries. Scaling done offsetting original value lower bin boundary dividing bin width. PipeOps inheriting encode columns type numeric integer. Use PipeOpTaskPreproc $affect_columns functionality encode subset columns, encode columns certain type, etc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"Abstract R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"id :: character(1) Identifier resulting object. See $id slot PipeOp. param_set :: ParamSet Parameter space description. created subclass given super$initialize(). param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings given param_set. subclass param_vals parameter pass super$initialize(). Default list(). packages :: character Set required packages PipeOp's private$.train() private$.predict() methods. See $packages slot. Default character(0). task_type :: character(1) class Task accepted input returned output. generally character(1) identifying type Task, e.g. \"Task\", \"TaskClassif\" \"TaskRegr\" (another subclass introduced packages). Default \"Task\".","code":"PipeOpEncodePL$new(id = \"encodepl\", param_set = ps(), param_vals = list(), packages = character(0), task_type = \"Task\")"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric integer columns encoded using piecewise linear encoding.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : bins :: named list Named list numeric vectors. element corresponds named one affected feature columns contains bin boundaries derived private$.get_bins().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"parameters parameters inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"PipeOpEncodePL abstract class inheriting PipeOpTaskPreprocSimple allows easier implementation different binning algorithms piecewise linear encoding. respective binning algorithm implemented private$.get_bins().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"Methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp well .get_bins(task, cols) (Task, character) -> named list  Abstract method splitting value range feature column distinct bins. argument cols give names feature columns task bins derived. Returns named list numeric vectors containing bin boundaries affected feature column, named corresponding feature column.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEncodePL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Piecewise Linear Encoding Base Class — PipeOpEncodePL","text":"Gorishniy Y, Rubachev , Babenko (2022). “Embeddings Numerical Features Tabular Deep Learning.” Advances Neural Information Processing Systems, volume 35, 24991–25004. https://proceedings.neurips.cc/paper_files/paper/2022/hash/9e9f0ffc3d836836ca96cbf8fe14b105-Abstract-Conference.html.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensembling Base Class — PipeOpEnsemble","title":"Ensembling Base Class — PipeOpEnsemble","text":"Parent class PipeOps aggregate predictions. Implements private$.train() private$.predict() methods necessary PipeOp requires deriving classes create private$weighted_avg_predictions() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ensembling Base Class — PipeOpEnsemble","text":"Abstract R6Class inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Ensembling Base Class — PipeOpEnsemble","text":"Note: object typically constructed via derived class, e.g. PipeOpClassifAvg PipeOpRegrAvg.   innum :: numeric(1) Determines number input channels. innum 0 (default), vararg input channel created can take arbitrary number inputs. collect_multiplicity :: logical(1) TRUE, input Multiplicity collecting channel. means, Multiplicity input, instead multiple normal inputs, accepted members aggregated. requires innum 0. Default FALSE. id :: character(1) Identifier resulting  object. param_set :: ParamSet (\"Hyper\"-)Parameters form ParamSet resulting PipeOp. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list(). packages :: character Set packages required PipeOp. packages loaded $train() $predict(), attached. Default character(0). prediction_type :: character(1) predict entry $input $output type specifications. \"Prediction\" (default) one subclasses, e.g. \"PredictionClassif\", correspond type accepted private$.train() private$.predict().","code":"PipeOpEnsemble$new(innum = 0, collect_multiplicity = FALSE, id, param_set = ps(), param_vals = list(), packages = character(0), prediction_type = \"Prediction\")"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Ensembling Base Class — PipeOpEnsemble","text":"PipeOpEnsemble multiple input channels depending innum construction argument, named \"input1\", \"input2\", ... innum nonzero; innum 0, one vararg input channel named \"...\". input channels take NULL training take Prediction prediction. PipeOpEnsemble one output channel named \"output\", producing NULL training Prediction prediction. output prediction way weighted averaged representation input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Ensembling Base Class — PipeOpEnsemble","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Ensembling Base Class — PipeOpEnsemble","text":"weights :: numeric Relative weights input predictions. length 1, ignored weighs inputs equally. Otherwise must length equal number connected inputs. Initialized 1 (equal weights).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Ensembling Base Class — PipeOpEnsemble","text":"commonality ensemble methods using PipeOpEnsemble take NULL-input training save empty $state. can used following set PipeOpLearner PipeOps perform (possibly weighted) prediction averaging. See e.g. PipeOpClassifAvg PipeOpRegrAvg inherit class. necessary use output preceding Learners \"training\" phase, PipeOpEnsemble used. fact, training time behaviour Learner important, one use PipeOpLearnerCV instead PipeOpLearner, ensemble can created Learner encapsulated PipeOpLearner. See LearnerClassifAvg LearnerRegrAvg examples.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Ensembling Base Class — PipeOpEnsemble","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpEnsemble.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Ensembling Base Class — PipeOpEnsemble","text":"Methods inherited PipeOp well : weighted_avg_prediction(inputs, weights, row_ids, truth) (list Prediction, numeric, integer | character, list) -> NULL Create Predictions correspond weighted average incoming Predictions. called private$.predict() cleaned sanity-checked values: inputs guaranteed fit together, row_ids truth guaranteed one inputs, weights guaranteed length inputs. method abstract, must implemented deriving classes.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":null,"dir":"Reference","previous_headings":"","what":"Imputation Base Class — PipeOpImpute","title":"Imputation Base Class — PipeOpImpute","text":"Abstract base class feature imputation.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Imputation Base Class — PipeOpImpute","text":"Abstract R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Imputation Base Class — PipeOpImpute","text":"id :: character(1) Identifier resulting object. See $id slot PipeOp. param_set :: ParamSet Parameter space description. created subclass given super$initialize(). param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings given param_set. subclass param_vals parameter pass super$initialize(). Default list(). whole_task_dependent :: logical(1) Whether context_columns parameter added lets user limit columns used imputation inference. generally FALSE imputation depends individual features (e.g. mode imputation), TRUE imputation depends features well (e.g. kNN-imputation). empty_level_control :: logical(1) Control handle edge cases NAs occur factor ordered features prediction training. Can one \"never\", \"always\", \"param\": set \"never\", empty level introduced training, columns missing values prediction imputed. set \"always\", unseen level added feature training missing values imputed value prediction. Finally, set \"param\", hyperparameter create_empty_level added control behavior left user. implementation details, see Internals . Default \"never\". packages :: character Set required packages PipeOp's private$.train private$.predict methods. See $packages slot. Default character(0). task_type :: character(1) class Task accepted input returned output. generally character(1) identifying type Task, e.g. \"Task\", \"TaskClassif\" \"TaskRegr\" (another subclass introduced packages). Default \"Task\". feature_types :: character Feature types affected PipeOp. See private$.select_cols() information.","code":"PipeOpImpute$$new(id, param_set = ps(), param_vals = list(), whole_task_dependent = FALSE, empty_level_control = FALSE,   packages = character(0), task_type = \"Task\")"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Imputation Base Class — PipeOpImpute","text":"PipeOpImpute one input channel named \"input\", taking Task, subclass Task task_type construction argument given ; training prediction. PipeOpImpute one output channel named \"output\", producing Task, subclass; Task type input; training prediction. output Task modified input Task features imputed according private$.impute() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Imputation Base Class — PipeOpImpute","text":"$state named list; besides members added inheriting classes, members : affected_cols :: character Names features selected affect_columns parameter. context_cols :: character Names features selected context_columns parameter. intasklayout :: data.table Copy training Task's $feature_types slot. used prediction ensure prediction Task features, feature layout, feature types training. outtasklayout :: data.table Copy trained Task's $feature_types slot. used prediction ensure Task resulting prediction operation features, feature layout, feature types training. model :: named list Model used imputation. list named Task features, containing result private$.train_imputer() private$.train_nullmodel() function one. imputed_train :: character Names features imputed training. used ensure factor levels added training also added prediction. Note features imputed prediction training still inconsistent factor levels.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Imputation Base Class — PipeOpImpute","text":"affect_columns :: function | Selector | NULL  columns PipeOpImpute operate . parameter must Selector function, takes Task argument returns character features use. See Selector example functions. Defaults NULL, selects features. context_columns :: function | Selector | NULL  columns PipeOpImpute imputation may depend . parameter present constructor called whole_task_dependent argument set TRUE. parameter must Selector function, takes Task argument returns character features use. See Selector example functions. Defaults NULL, selects features. create_empty_level :: logical(1) Whether empty level always created factor ordered columns training. FALSE, columns NAs training NAs prediction imputed. parameter present constructor called empty_level_control argument set \"param\". Initialized FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Imputation Base Class — PipeOpImpute","text":"PipeOpImpute abstract class inheriting PipeOp makes implementing imputer PipeOps simple. Internally, construction argument empty_level_control hyperparameter create_empty_level (exist) modify private$.create_empty_level field. Behavior depends whether field set TRUE FALSE works controlling cases imputation performed factor ordered columns. setting impact columns types. private$.create_empty_level set TRUE, private$.impute() called factor ordered columns training, regardless whether missing values. lead creation empty level columns missing values, inheriting PipeOps must implement private$.train_imputer() way returns name level created feature types factor ordered. private$.create_empty_level set FALSE, private$.impute() called prediction factor ordered columns modified training. means NAs imputed columns. See PipeOpImputeOOR, detailed explanation controls necessary.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Imputation Base Class — PipeOpImpute","text":"Fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpImpute.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Imputation Base Class — PipeOpImpute","text":"Methods inherited PipeOp, well : .select_cols(task)  (Task) -> character  Selects columns PipeOp operates . contrast affect_columns parameter. private$.select_cols() inheriting class determine columns operator function , e.g. based feature type, affect_columns way user limit columns PipeOpTaskPreproc operate . method can optionally overloaded inheriting PipeOpImpute; method overloaded, defaults selecting columns type indicated feature_types construction argument. .train_imputer(feature, type, context) (atomic, character(1), data.table) -> Abstract function must overloaded inheriting. Called feature selected affect_columns create model entry used private$.impute(). function called features least one non-missing value. .train_nullmodel(feature, type, context) (atomic, character(1), data.table) -> Like .train_imputer(), called feature contains missing values. abstract function , overloaded, gives default response 0 (integer, numeric), c(TRUE, FALSE) (logical), available levels (factor/ordered), empty string (character). .impute(feature, type, model, context) (atomic, character(1), , data.table) -> atomic Imputes features. model model created private$.train_imputer(). Default behaviour assume model atomic vector values sampled impute missing values feature. model may attribute probabilities non-uniform sampling. model length zero, feature returned unchanged.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTargetTrafo.html","id":null,"dir":"Reference","previous_headings":"","what":"Target Transformation Base Class — PipeOpTargetTrafo","title":"Target Transformation Base Class — PipeOpTargetTrafo","text":"Base class handling target transformation operations. Target transformations different feature transformation \"inverted\" prediction. target transformed training phase information invert transformation sent along PipeOpTargetInvert inverts transformation prediction phase. inversion may need info training prediction data. Users can overload four private$-functions: .get_state() (optional), .transform() (mandatory), .train_invert() (optional), .invert() (mandatory).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTargetTrafo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Target Transformation Base Class — PipeOpTargetTrafo","text":"Abstract R6Class inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTargetTrafo.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Target Transformation Base Class — PipeOpTargetTrafo","text":"id :: character(1) Identifier resulting object. See $id slot PipeOp. param_set :: ParamSet Parameter space description. created subclass given super$initialize(). param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings given param_set. subclass param_vals parameter pass super$initialize(). Default list(). task_type_in :: character(1) class Task accepted input. generally character(1) identifying type Task, e.g. \"Task\", \"TaskClassif\" \"TaskRegr\" (another subclass introduced packages). Default \"Task\". task_type_out :: character(1) class Task produced output. generally character(1) identifying  type Task, e.g. \"Task\", \"TaskClassif\" \"TaskRegr\" (another subclass introduced packages). Default value task_type_in. packages :: character Set required packages PipeOp's methods. See $packages slot. Default character(0). tags :: character | NULL Tags resulting PipeOp. added tag \"target transform\". Default NULL.","code":"PipeOpTargetTrafo$new(id, param_set = ps(), param_vals = list(), packages = character(0), task_type_in = \"Task\", task_type_out = task_type_in, tags = NULL)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTargetTrafo.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Target Transformation Base Class — PipeOpTargetTrafo","text":"PipeOpTargetTrafo one input channels named \"input\" taking Task (whatever class specified task_type construction) training prediction. PipeOpTargetTrafo two output channels named \"fun\" \"output\". training, \"fun\" returns NULL prediction, \"fun\" returns function can later used invert transformation done training according overloaded .train_invert() .invert() functions. \"output\" returns modified input Task (task_type) according overloaded transform() function training prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTargetTrafo.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Target Transformation Base Class — PipeOpTargetTrafo","text":"$state named list returned explicitly user overloaded .get_state() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTargetTrafo.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Target Transformation Base Class — PipeOpTargetTrafo","text":"PipeOpTargetTrafo abstract class inheriting PipeOp. implements private$.train() private$.predict() functions. functions perform checks go call .get_state(), .transform(), .train_invert(). .invert() packaged sent along \"fun\" output applied Prediction PipeOpTargetInvert. subclass PipeOpTargetTrafo implement functions used combination PipeOpTargetInvert.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTargetTrafo.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Target Transformation Base Class — PipeOpTargetTrafo","text":"Fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTargetTrafo.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Target Transformation Base Class — PipeOpTargetTrafo","text":"Methods inherited PipeOp, well : .get_state(task) (Task) -> list Called PipeOpTargetTrafo's implementation private$.train(). Takes single Task input returns list set $state. .get_state() called single time training right .transform() called. return value (.e. $state) contain info needed .transform() well .invert(). base implementation returns list() overloaded setting state desired. .transform(task, phase) (Task, character(1)) -> Task Called PipeOpTargetTrafo's implementation private$.train() private$.predict(). Takes single Task input modifies . typically consist calculating new target modifying Task using convert_task function. .transform() called training prediction target (needed also type) input Task must transformed times. Note unlike $.train(), argument list singular Task, return object also list singular Task. phase argument \"train\" training phase \"predict\" prediction phase can used enable different behaviour training prediction. phase \"train\", $state slot (previously set .get_state()) may also modified, alternatively addition overloading .get_state(). input cloned possible changed -place. function abstract overloaded inheriting classes. .train_invert(task) (Task) -> Called PipeOpTargetTrafo's implementation private$.predict(). Takes single Task input returns arbitrary value given predict_phase_state .invert(). modify input Task. base implementation returns list single element, $truth column Task, overloaded training-phase-dependent state desired. .invert(prediction, predict_phase_state) (Prediction, ) -> Prediction Takes Prediction predict_phase_state object input inverts prediction. function sent \"fun\" PipeOpTargetInvert. function abstract overloaded inheriting classes. Care taken predict_type Prediction inverted handled well. .invert_help(predict_phase_state) (predict_phase_state object) -> function Helper function packages .invert() can later used inversion.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":null,"dir":"Reference","previous_headings":"","what":"Task Preprocessing Base Class — PipeOpTaskPreproc","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"Base class handling \"preprocessing\" operations. operations exactly one Task input one Task output, expect column layout Tasks input output . Prediction-behavior preprocessing operations always independent row input-Task. means prediction-operation preprocessing-PipeOps commute rbind(): Running prediction n-row Task result result rbind()-ing prediction-result n 1-row Tasks content. large majority cases, number order rows also changed prediction. Users must implement private$.train_task() private$.predict_task(), Task input return Task. Task , possible, manipulated -place, cloned. Alternatively, private$.train_dt() private$.predict_dt() functions can implemented, operate data.table objects instead. generally done data way altered (e.g. PCA changing columns principal components) columns added removed (e.g. feature selection) done Task-level private$.train_task(). private$.select_cols() function can overloaded private$.train_dt() private$.predict_dt() operate subsets Task's data, e.g. numerical columns. can_subset_cols argument constructor TRUE (default), hyperparameter affect_columns added, can limit columns Task modified PipeOpTaskPreproc using Selector function. Note functionality entirely independent private$.select_cols() functionality. PipeOpTaskPreproc useful operations behave differently training prediction. operations perform essentially operation need perform extra work build $state training, PipeOpTaskPreprocSimple class can used instead.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"Abstract R6Class inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"id :: character(1) Identifier resulting object. See $id slot PipeOp. param_set :: ParamSet Parameter space description. created subclass given super$initialize(). param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings given param_set. subclass param_vals parameter pass super$initialize(). Default list(). can_subset_cols :: logical(1) Whether affect_columns parameter added lets user limit columns modified PipeOpTaskPreproc. generally FALSE operation adds removes rows Task, TRUE otherwise. Default TRUE. packages :: character Set required packages PipeOp's private$.train() private$.predict() methods. See $packages slot. Default character(0). task_type :: character(1) class Task accepted input returned output. generally character(1) identifying type Task, e.g. \"Task\", \"TaskClassif\" \"TaskRegr\" (another subclass introduced packages). Default \"Task\". tags :: character | NULL Tags resulting PipeOp. added tag \"data transform\". Default NULL. feature_types :: character Feature types affected PipeOp. See private$.select_cols() information. Defaults available feature types.","code":"PipeOpTaskPreproc$new(id, param_set = ps(), param_vals = list(), can_subset_cols = TRUE,   packages = character(0), task_type = \"Task\", tags = NULL, feature_types = mlr_reflections$task_feature_types)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"PipeOpTaskPreproc one input channel named \"input\", taking Task, subclass Task task_type construction argument given ; training prediction. PipeOpTaskPreproc one output channel named \"output\", producing Task, subclass; Task type input; training prediction. output Task modified input Task according overloaded private$.train_task()/private$.predict_taks() private$.train_dt()/private$.predict_dt() functions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"$state named list; besides members added inheriting classes, members : affect_cols :: character Names features selected affect_columns parameter, present; names present features otherwise. intasklayout :: data.table Copy training Task's $feature_types slot. used prediction ensure prediction Task features, feature layout, feature types training. outtasklayout :: data.table Copy trained Task's $feature_types slot. used prediction ensure Task resulting prediction operation features, feature layout, feature types training. dt_columns :: character Names features selected private$.select_cols() call training. present private$.train_dt() functionality used, present private$.train_task() function overloaded instead. feature_types :: character Feature types affected PipeOp. See private$.select_cols() information.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"affect_columns :: function | Selector | NULL  columns PipeOpTaskPreproc operate . parameter present constructor called can_subset_cols argument set TRUE (default). parameter must Selector function, takes Task argument returns character features use. See Selector example functions. Defaults NULL, selects features.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"PipeOpTaskPreproc abstract class inheriting PipeOp. implements private$.train() $.predict() functions. functions perform checks go call private$.train_task() private$.predict_task(). subclass PipeOpTaskPreproc may implement functions, implement private$.train_dt() private$.predict_dt() instead. works default implementations private$.train_task() private$.predict_task() call private$.train_dt() private$.predict_dt(), respectively. affect_columns functionality works unsetting columns removing \"col_role\" processing, adding afterwards setting col_role \"feature\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"Fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreproc.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Task Preprocessing Base Class — PipeOpTaskPreproc","text":"Methods inherited PipeOp, well : .train_task(task) (Task) -> Task Called PipeOpTaskPreproc's implementation private$.train(). Takes single Task input modifies (ideally -place without cloning) storing information $state slot. Note unlike $.train(), argument list singular Task, return object also list singular Task. Also, contrary private$.train(), $state generated must list, PipeOpTaskPreproc add additional slots (see Section State). Care taken avoid name collisions $state elements added private$.train_task() PipeOpTaskPreproc. default function calls private$.train_dt() function, can overloaded perform operations Task directly. .predict_task(task) (Task) -> Task Called PipeOpTaskPreproc's implementation $.predict(). Takes single Task input modifies (ideally -place without cloning) using information $state slot. Works analogously private$.train_task(). private$.predict_task() overloaded private$.train_task() overloaded (.e. private$.train_dt() used). .train_dt(dt, levels, target)  (data.table, named list, ) -> data.table | data.frame | matrix  Train PipeOpTaskPreproc dt, transform store state $state. transformed object must returned can converted data.table using .data.table. dt need copied deliberately, possible encouraged change -place. levels argument named list factor levels factorial character features. input Task inherits TaskSupervised, target argument contains $truth() information training Task; type depends Task type trained . method can overloaded inheriting PipeOpTaskPreproc, together private$.predict_dt() optionally private$.select_cols(); alternatively, private$.train_task() private$.predict_task() can overloaded. .predict_dt(dt, levels)  (data.table, named list) -> data.table | data.frame | matrix  Predict new data dt, possibly using stored $state. transformed object must returned can converted data.table using .data.table. dt need copied deliberately, possible encouraged change -place. levels argument named list factor levels factorial character features. method can overloaded inheriting PipeOpTaskPreproc, together private$.train_dt() optionally private$.select_cols(); alternatively, private$.train_task() private$.predict_task() can overloaded. .select_cols(task)  (Task) -> character  Selects columns PipeOp operates , private$.train_dt() private$.predict_dt() overloaded. function called private$.train_task() private$.predict_task() overloaded. contrast affect_columns parameter. private$.select_cols() inheriting class determine columns operator function , e.g. based feature type, affect_columns way user limit columns PipeOpTaskPreproc operate . method can optionally overloaded inheriting PipeOpTaskPreproc, together private$.train_dt() private$.predict_dt(); alternatively, private$.train_task() private$.predict_task() can overloaded. method overloaded, defaults selecting type indicated feature_types construction argument.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"Base class handling many \"preprocessing\" operations perform essentially operation training prediction. Instead implementing private$.train_task() private$.predict_task() operation, private$.get_state() private$.transform() operation needs defined, take one argument: Task. Alternatively, analogously PipeOpTaskPreproc approach offering private$.train_dt()/private$.predict_dt(), private$.get_state_dt() private$.transform_dt() functions may implemented. private$.get_state must change input value -place must return something written $state (must NULL), private$.transform() modify argument -place; called training prediction. inherits PipeOpTaskPreproc behaves essentially .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"Abstract R6Class inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"(Construction identical PipeOpTaskPreproc.) id :: character(1) Identifier resulting object. See $id slot PipeOp. param_set :: ParamSet Parameter space description. created subclass given super$initialize(). param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings given param_set. subclass param_vals parameter pass super$initialize(). Default list(). can_subset_cols :: logical(1) Whether affect_columns parameter added lets user limit columns modified PipeOpTaskPreprocSimple. generally FALSE operation adds removes rows Task, TRUE otherwise. Default TRUE. packages :: character Set required packages PipeOp's private$.train() private$.predict() methods. See $packages slot. Default character(0). task_type :: character(1) class Task accepted input returned output. generally character(1) identifying type Task, e.g. \"Task\", \"TaskClassif\" \"TaskRegr\" (another subclass introduced packages). Default \"Task\". tags :: character | NULL Tags resulting PipeOp. added tag \"data transform\". Default NULL. feature_types :: character Feature types affected PipeOp. See private$.select_cols() information. Defaults available feature types.","code":"PipeOpTaskPreprocSimple$new(id, param_set = ps(), param_vals = list(), can_subset_cols = TRUE,   packages = character(0), task_type = \"Task\", tags = NULL, feature_types = mlr_reflections$task_feature_types)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"Input output channels inherited PipeOpTaskPreproc. output training prediction Task, modified private$.transform() private$.transform_dt().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"parameters parameters inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"PipeOpTaskPreprocSimple abstract class inheriting PipeOpTaskPreproc implementing private$.train_task() private$.predict_task() functions. subclass PipeOpTaskPreprocSimple may implement functions private$.get_state() private$.transform(), alternatively functions private$.get_state_dt() private$.transform_dt() (well private$.select_cols(), latter case). works default implementations private$.get_state() private$.transform() call private$.get_state_dt() private$.transform_dt().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"Fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/PipeOpTaskPreprocSimple.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Simple Task Preprocessing Base Class — PipeOpTaskPreprocSimple","text":"Methods inherited PipeOpTaskPreproc, well : .get_state(task)  (Task) -> named list Store create something stored $state training phase PipeOpTaskPreprocSimple. state can influence private$.transform() function. Note private$.get_state() must return state, store $state. strictly necessary implement either private$.get_state() private$.get_state_dt(); implemented, state stored list().  method can optionally overloaded inheriting PipeOpTaskPreprocSimple, together private$.transform(); alternatively, private$.get_state_dt() (optional) private$.transform_dt() (possibly private$.select_cols(), PipeOpTaskPreproc) can overloaded. .transform(task)  (Task) -> Task Predict new data task, possibly using stored $state. task cloned, instead changed -place. method called training prediction phase, essentially behave independently phase. (incongruent functionality implemented, inherit PipeOpTaskPreproc, PipeOpTaskPreprocSimple.)  method can overloaded inheriting PipeOpTaskPreprocSimple, optionally private$.get_state(); alternatively, private$.get_state_dt() (optional) private$.transform_dt() (possibly private$.select_cols(), PipeOpTaskPreproc) can overloaded. .get_state_dt(dt)  (data.table) -> named list Create something stored $state training phase PipeOpTaskPreprocSimple. state can influence private$.transform_dt() function. Note private$.get_state_dt() must return state, store $state. neither private$.get_state() private$.get_state_dt() overloaded, state stored list().  method can optionally overloaded inheriting PipeOpTaskPreprocSimple, together private$.transform_dt() (optionally private$.select_cols(), PipeOpTaskPreproc); Alternatively, private$.get_state() (optional) private$.transform() can overloaded. .transform_dt(dt)  (data.table) -> data.table | data.frame | matrix  Predict new data dt, possibly using stored $state. transformed object must returned can converted data.table using .data.table. dt need copied deliberately, possible encouraged change -place. method called training prediction phase, essentially behave independently phase. (incongruent functionality implemented, inherit PipeOpTaskPreproc, PipeOpTaskPreprocSimple.)  method can optionally overloaded inheriting PipeOpTaskPreprocSimple, together private$.transform_dt() (optionally private$.select_cols(), PipeOpTaskPreproc); Alternatively, private$.get_state() (optional) private$.transform() can overloaded.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Selector.html","id":null,"dir":"Reference","previous_headings":"","what":"Selector Functions — Selector","title":"Selector Functions — Selector","text":"Selector function used different PipeOps, prominently PipeOpSelect many PipeOps inheriting PipeOpTaskPreproc, determine subset Tasks operate . Even though Selector function can written , preferable use Selector constructors shown . can called arguments create Selector, can given PipeOpSelect selector parameter, many PipeOpTaskPreprocs' affect_columns parameter. See examples usage.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Selector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selector Functions — Selector","text":"","code":"selector_all()  selector_none()  selector_type(types)  selector_grep(pattern, ignore.case = FALSE, perl = FALSE, fixed = FALSE)  selector_name(feature_names, assert_present = FALSE)  selector_invert(selector)  selector_intersect(selector_x, selector_y)  selector_union(selector_x, selector_y)  selector_setdiff(selector_x, selector_y)  selector_missing()  selector_cardinality_greater_than(min_cardinality)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Selector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selector Functions — Selector","text":"types (character)  Type feature select pattern (character(1))  grep pattern ignore.case (logical(1))  ignore case perl (logical(1))  perl regex fixed (logical(1))  fixed pattern instead regex feature_names (character) Select features exact name match. assert_present (logical(1)) Throw error feature_names present task operated . selector (Selector)Selector invert. selector_x (Selector) First Selector query. selector_y (Selector) Second Selector query. min_cardinality (integer)  Minimum number levels required selected.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Selector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selector Functions — Selector","text":"function: Selector function takes Task returns feature names processed.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Selector.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Selector Functions — Selector","text":"selector_all(): selector_all selects features. selector_none(): selector_none selects none  features. selector_type(): selector_type selects features according type. Legal types listed mlr_reflections$task_feature_types. selector_grep(): selector_grep selects features names matching grep() pattern. selector_name(): selector_name selects features names matching exactly names listed. selector_invert(): selector_invert inverts given Selector: always selects features dropped Selector, drops features kept. selector_intersect(): selector_intersect selects intersection two Selectors: features selected Selectors selected end. selector_union(): selector_union selects union two Selectors: Features selected either Selector selected end. selector_setdiff(): selector_setdiff selects setdiff two Selectors: Features selected selector_x selected, unless also selected selector_y. selector_missing(): selector_missing selects features missing values. selector_cardinality_greater_than(): selector_cardinality_greater_than selects categorical features cardinality greater given threshold.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Selector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Selector Functions — Selector","text":"Selector function one input argument (commonly named task). function called Task PipeOp operating . return value function must character vector subset feature names present Task. example, Selector selects columns   (selector_all()-Selector.) Selector selects columns names shorter four letters :   Selector selects column \"Sepal.Length\" (iris task), present,   preferable use Selector construction functions like select_type, select_grep etc. possible, instead writing custom Selectors.","code":"function(task) {   task$feature_names } function(task) {   task$feature_names[     nchar(task$feature_names) < 4   ] } function(task) {   intersect(task$feature_names, \"Sepal.Length\") }"},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/Selector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selector Functions — Selector","text":"","code":"library(\"mlr3\")  iris_task = tsk(\"iris\") bh_task = tsk(\"boston_housing\")  sela = selector_all() sela(iris_task) #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  sela(bh_task) #>  [1] \"age\"     \"b\"       \"chas\"    \"crim\"    \"dis\"     \"indus\"   \"lat\"     #>  [8] \"lon\"     \"lstat\"   \"nox\"     \"ptratio\" \"rad\"     \"rm\"      \"tax\"     #> [15] \"town\"    \"tract\"   \"zn\"       self = selector_type(\"factor\") self(iris_task) #> character(0) self(bh_task) #> [1] \"chas\" \"town\"  selg = selector_grep(\"a.*i\") selg(iris_task) #> [1] \"Petal.Width\" \"Sepal.Width\" selg(bh_task) #> [1] \"ptratio\"  selgi = selector_invert(selg) selgi(iris_task) #> [1] \"Petal.Length\" \"Sepal.Length\" selgi(bh_task) #>  [1] \"age\"   \"b\"     \"chas\"  \"crim\"  \"dis\"   \"indus\" \"lat\"   \"lon\"   \"lstat\" #> [10] \"nox\"   \"rad\"   \"rm\"    \"tax\"   \"town\"  \"tract\" \"zn\"     selgf = selector_union(selg, self) selgf(iris_task) #> [1] \"Petal.Width\" \"Sepal.Width\" selgf(bh_task) #> [1] \"ptratio\" \"chas\"    \"town\""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/add_class_hierarchy_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Class Hierarchy to the Cache — add_class_hierarchy_cache","title":"Add a Class Hierarchy to the Cache — add_class_hierarchy_cache","text":"Add class hierarchy class hierarchy cache. necessary whenever S3 class's class hierarchy important inferring compatibility types.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/add_class_hierarchy_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Class Hierarchy to the Cache — add_class_hierarchy_cache","text":"","code":"add_class_hierarchy_cache(hierarchy)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/add_class_hierarchy_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Class Hierarchy to the Cache — add_class_hierarchy_cache","text":"hierarchy character class hierarchy add; correspond class() lowest object hierarchy.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/add_class_hierarchy_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Class Hierarchy to the Cache — add_class_hierarchy_cache","text":"NULL","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/add_class_hierarchy_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Class Hierarchy to the Cache — add_class_hierarchy_cache","text":"","code":"# This lets mlr3pipelines handle \"data.table\" as \"data.frame\". # This is an example and not necessary, because mlr3pipelines adds it by default.  add_class_hierarchy_cache(c(\"data.table\", \"data.frame\"))"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as.Multiplicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a Multiplicity — as.Multiplicity","title":"Convert an object to a Multiplicity — as.Multiplicity","text":"Convert object Multiplicity.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as.Multiplicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a Multiplicity — as.Multiplicity","text":"","code":"as.Multiplicity(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as.Multiplicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a Multiplicity — as.Multiplicity","text":"x ()  Object convert.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as.Multiplicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a Multiplicity — as.Multiplicity","text":"Multiplicity","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to mlr3pipelines Graph — as_graph","title":"Conversion to mlr3pipelines Graph — as_graph","text":"argument turned Graph possible. clone TRUE, deep copy made incoming object Graph ensure resulting object different reference incoming object. as_graph() S3 method can therefore implemented packages may add objects can naturally converted Graphs. default, as_graph() tries apply gunion() x list, recursively applies as_graph() list elements first create Graph one element x PipeOp can converted one using as_pipeop().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to mlr3pipelines Graph — as_graph","text":"","code":"as_graph(x, clone = FALSE)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to mlr3pipelines Graph — as_graph","text":"x ()  Object convert. clone (logical(1))  Whether return (deep copied) clone x Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion to mlr3pipelines Graph — as_graph","text":"Graph x deep clone .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as_pipeop.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to mlr3pipelines PipeOp — as_pipeop","title":"Conversion to mlr3pipelines PipeOp — as_pipeop","text":"argument turned PipeOp possible. clone TRUE, deep copy made incoming object PipeOp ensure resulting object different reference incoming object. as_pipeop() S3 method can therefore implemented packages may add objects can naturally converted PipeOps. Objects can converted example Learner (using PipeOpLearner) Filter (using PipeOpFilter).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as_pipeop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to mlr3pipelines PipeOp — as_pipeop","text":"","code":"as_pipeop(x, clone = FALSE)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as_pipeop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to mlr3pipelines PipeOp — as_pipeop","text":"x ()  Object convert. clone (logical(1))  Whether return (deep copied) clone x PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/as_pipeop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion to mlr3pipelines PipeOp — as_pipeop","text":"PipeOp x deep clone .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/assert_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for mlr3pipelines Graph — assert_graph","title":"Assertion for mlr3pipelines Graph — assert_graph","text":"Function checks given object Graph throws error .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/assert_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for mlr3pipelines Graph — assert_graph","text":"","code":"assert_graph(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/assert_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion for mlr3pipelines Graph — assert_graph","text":"x ()  Object check.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/assert_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertion for mlr3pipelines Graph — assert_graph","text":"Graph invisible(x)","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/assert_pipeop.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for mlr3pipelines PipeOp — assert_pipeop","title":"Assertion for mlr3pipelines PipeOp — assert_pipeop","text":"Function checks given object PipeOp throws error .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/assert_pipeop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for mlr3pipelines PipeOp — assert_pipeop","text":"","code":"assert_pipeop(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/assert_pipeop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion for mlr3pipelines PipeOp — assert_pipeop","text":"x ()  Object check.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/assert_pipeop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertion for mlr3pipelines PipeOp — assert_pipeop","text":"PipeOp invisible(x)","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/chain_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Chain a Series of Graphs — chain_graphs","title":"Chain a Series of Graphs — chain_graphs","text":"Takes arbitrary amount Graphs PipeOps (objects can automatically converted Graphs PipeOps, see as_graph() as_pipeop()) inputs joins serial Graph, connecting using %>>%. Care taken avoid unnecessarily cloning components. call chain_graphs(list(g1, g2, g3, g4, ...), in_place = FALSE) equivalent g1 %>>% g2 %>>!% g3 %>>!% g4 %>>!% .... call chain_graphs(list(g1, g2, g3, g4, ...), in_place = FALSE) equivalent g1 %>>!% g2 %>>!% g3 %>>!% g4 %>>!% ... (differing first operator %>>!% well).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/chain_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chain a Series of Graphs — chain_graphs","text":"","code":"chain_graphs(graphs, in_place = FALSE)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/chain_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chain a Series of Graphs — chain_graphs","text":"graphs list (Graph | PipeOp | NULL | ...) List elements Graphs joined. Elements must convertible Graph PipeOp using as_graph() as_pipeop(). NULL neutral element %>>% skipped. in_place (logical(1)) Whether try avoid cloning first element graphs, similar difference %>>!% %>>%. can avoided graphs[[1]] already Graph. Beware , chain_graphs() fails id collisions, graphs[[1]] possibly incompletely modified state in_place TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/chain_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chain a Series of Graphs — chain_graphs","text":"Graph resulting Graph, NULL non-null values graphs.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/filter_noop.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NO_OPs from a List — filter_noop","title":"Remove NO_OPs from a List — filter_noop","text":"Remove NO_OP elements list.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/filter_noop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NO_OPs from a List — filter_noop","text":"","code":"filter_noop(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/filter_noop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NO_OPs from a List — filter_noop","text":"x list  List filter.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/filter_noop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NO_OPs from a List — filter_noop","text":"list: input list, NO_OP elements removed.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/grapes-greater-than-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"PipeOp Composition Operator — %>>%","title":"PipeOp Composition Operator — %>>%","text":"operators creates connection \"pipes\" data source g1 sink g2. source sink can either Graph PipeOp (object can automatically converted Graph PipeOp, see as_graph() as_pipeop()). %>>% %>>!% try automatically match output channels g1 input channels g2; possible either number output channels g1 (given g1$output) equal number input channels g2 (given g2$input), g1 one output channel (.e. g1$output one line), g2 one input channel, vararg channel (.e. g2$input one line, name entry \"...\"). Connections channels created order occur g1 g2, respectively: g1's output channel 1 connected g2's input channel 1, channel 2 2 etc. %>>% always creates deep copies input arguments, modified reference afterwards. access individual PipeOps composition, use resulting Graph's $pipeops list. %>>!%, hand, tries avoid cloning first argument: Graph, Graph modified -place. %>>!% fails, leaves g1 incompletely modified state. therefore usually recommended use %>>%, since marginal gain performance using %>>!% often outweigh risk either modifying objects -reference modified getting graphs incompletely modified state. However, creating long Graphs, chaining %>>!% instead %>>% can give noticeable performance benefits %>>% makes number clone()-calls quadratic chain length, %>>!% linear. concat_graphs(g1, g2, in_place = FALSE) equivalent g1 %>>% g2. concat_graphs(g1, g2, in_place = TRUE) equivalent g1 %>>!% g2. arguments %>>% automatically converted Graphs using as_graph(); means objects either side may objects can automatically converted PipeOps (Learners Filters), can converted Graphs. means, particular, lists Graphs, PipeOps objects convertible , as_graph() automatically applies gunion() lists. See examples. first argument %>>!% Graph, cloned just %>>% used; %>>!% avoids clone() first argument Graph. Note g1 NULL, g2 converted Graph returned. Analogously, g2 NULL, g1 converted Graph returned.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/grapes-greater-than-greater-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PipeOp Composition Operator — %>>%","text":"","code":"g1 %>>% g2  concat_graphs(g1, g2, in_place = FALSE)  g1 %>>!% g2"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/grapes-greater-than-greater-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PipeOp Composition Operator — %>>%","text":"g1 (Graph | PipeOp | Learner | Filter | list | ...) Graph / PipeOp / object-convertible--PipeOp put front g2. g2 (Graph | PipeOp | Learner | Filter | list | ...) Graph / PipeOp / object-convertible--PipeOp put g1. in_place (logical(1)) Whether try avoid cloning g1. g1 Graph, cloned regardless.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/grapes-greater-than-greater-than-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PipeOp Composition Operator — %>>%","text":"Graph: constructed Graph.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/grapes-greater-than-greater-than-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PipeOp Composition Operator — %>>%","text":"","code":"o1 = PipeOpScale$new() o2 = PipeOpPCA$new() o3 = PipeOpFeatureUnion$new(2)  # The following two are equivalent: pipe1 = o1 %>>% o2  pipe2 = Graph$new()$   add_pipeop(o1)$   add_pipeop(o2)$   add_edge(o1$id, o2$id)  # Note automatical gunion() of lists. # The following three are equivalent: graph1 = list(o1, o2) %>>% o3  graph2 = gunion(list(o1, o2)) %>>% o3  graph3 = Graph$new()$   add_pipeop(o1)$   add_pipeop(o2)$   add_pipeop(o3)$   add_edge(o1$id, o3$id, dst_channel = 1)$   add_edge(o2$id, o3$id, dst_channel = 2)  pipe1 %>>!% o3  # modify pipe1 in-place #> Graph with 3 PipeOps: #>            ID         State     sccssors prdcssors #>        <char>        <char>       <char>    <char> #>         scale <<UNTRAINED>>          pca           #>           pca <<UNTRAINED>> featureunion     scale #>  featureunion <<UNTRAINED>>                    pca  pipe1  # contains o1, o2, and o3 now. #> Graph with 3 PipeOps: #>            ID         State     sccssors prdcssors #>        <char>        <char>       <char>    <char> #>         scale <<UNTRAINED>>          pca           #>           pca <<UNTRAINED>> featureunion     scale #>  featureunion <<UNTRAINED>>                    pca  o1 %>>!% o2 #> Graph with 2 PipeOps: #>      ID         State sccssors prdcssors #>  <char>        <char>   <char>    <char> #>   scale <<UNTRAINED>>      pca           #>     pca <<UNTRAINED>>              scale  o1  # not changed, becuase not a Graph. #> PipeOp: <scale> (not trained) #> values: <robust=FALSE> #> Input channels <name [train type, predict type]>: #>   input [Task,Task] #> Output channels <name [train type, predict type]>: #>   output [Task,Task]"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/greplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Disjoint Graph Union of Copies of a Graph — greplicate","title":"Create Disjoint Graph Union of Copies of a Graph — greplicate","text":"Create new Graph containing n copies input Graph / PipeOp. avoid ID collisions, PipeOp IDs suffixed _i ranges 1 n. function deprecated removed next version favor using pipeline_greplicate / ppl(\"greplicate\").","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/greplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Disjoint Graph Union of Copies of a Graph — greplicate","text":"","code":"greplicate(graph, n)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/greplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Disjoint Graph Union of Copies of a Graph — greplicate","text":"graph Graph  Graph replicate. n integer(1) Number copies create.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/greplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Disjoint Graph Union of Copies of a Graph — greplicate","text":"Graph containing n copies input graph.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/gunion.html","id":null,"dir":"Reference","previous_headings":"","what":"Disjoint Union of Graphs — gunion","title":"Disjoint Union of Graphs — gunion","text":"Takes arbitrary amount Graphs PipeOps (objects can automatically converted Graphs PipeOps, see as_graph() as_pipeop()) inputs joins new Graph. PipeOps input Graphs joined new edges across Graphs, length(graphs) > 1, resulting Graph disconnected. operation always creates deep copies input arguments, modified reference afterwards. access individual PipeOps composition, use resulting Graph's $pipeops list.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/gunion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disjoint Union of Graphs — gunion","text":"","code":"gunion(graphs, in_place = FALSE)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/gunion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disjoint Union of Graphs — gunion","text":"graphs list (Graph | PipeOp | NULL | ...) List elements Graphs joined. Elements must convertible Graph PipeOp using as_graph() as_pipeop(). NULL values automatically get converted PipeOpNOP random ID format nop_********. list can named, case IDs elements prefixed names, separated dot (.). in_place (logical(1) | logical) Whether try avoid cloning first element graphs, similar difference %>>!% %>>%. can avoided graphs[[1]] already Graph. Unlike chain_graphs(), gunion() checks mutating graphs[[1]], leave graphs[[1]] incompletely modified state fails.in_place may also length graph, case determines element graphs whether cloned. internal usage recommended.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/gunion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disjoint Union of Graphs — gunion","text":"Graph resulting Graph.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/is.Multiplicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a Multiplicity — is.Multiplicity","title":"Check if an object is a Multiplicity — is.Multiplicity","text":"Check object Multiplicity.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/is.Multiplicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a Multiplicity — is.Multiplicity","text":"","code":"is.Multiplicity(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/is.Multiplicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a Multiplicity — is.Multiplicity","text":"x ()  Object check.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/is.Multiplicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a Multiplicity — is.Multiplicity","text":"logical(1)","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/is_noop.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for NO_OP — is_noop","title":"Test for NO_OP — is_noop","text":"Test whether given object NO_OP.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/is_noop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for NO_OP — is_noop","text":"","code":"is_noop(x)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/is_noop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for NO_OP — is_noop","text":"x  Object test.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/is_noop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for NO_OP — is_noop","text":"logical(1): Whether x NO_OP.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr3pipelines-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3pipelines: Preprocessing Operators and Pipelines for 'mlr3' — mlr3pipelines-package","title":"mlr3pipelines: Preprocessing Operators and Pipelines for 'mlr3' — mlr3pipelines-package","text":"Dataflow programming toolkit enriches 'mlr3' diverse set pipelining operators ('PipeOps') can composed graphs. Operations exist data preprocessing, model fitting, ensemble learning. Graphs can treated 'mlr3' 'Learners' can therefore resampled, benchmarked, tuned.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr3pipelines-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3pipelines: Preprocessing Operators and Pipelines for 'mlr3' — mlr3pipelines-package","text":"Maintainer: Martin Binder mlr.developer@mb706.com Authors: Florian Pfisterer pfistererf@googlemail.com (ORCID) Lennart Schneider lennart.sch@web.de (ORCID) Bernd Bischl bernd_bischl@gmx.net (ORCID) Michel Lang michellang@gmail.com (ORCID) Sebastian Fischer sebf.fischer@gmail.com (ORCID) Susanne Dandl dandl.susanne@googlemail.com contributors: Keno Mersmann keno.mersmann@gmail.com [contributor] Maximilian Mücke muecke.maximilian@gmail.com (ORCID) [contributor] Lona Koers lona.koers@gmail.com [contributor]","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of (sub-)graphs — mlr_graphs","title":"Dictionary of (sub-)graphs — mlr_graphs","text":"simple Dictionary storing objects class Graph. dictionary contains collection often-used graph structures, aim solely make often-used functions accessible. Graph associated help page, can accessed via ?mlr_graphs_<key>, .e. ?mlr_graphs_bagging.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of (sub-)graphs — mlr_graphs","text":"R6Class object inheriting mlr3misc::Dictionary.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Dictionary of (sub-)graphs — mlr_graphs","text":"Methods inherited Dictionary, well : add(key, value) (character(1), function) Adds constructor value dictionary key key, potentially overwriting previously stored item.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Dictionary of (sub-)graphs — mlr_graphs","text":".data.table(dict)Dictionary -> data.table::data.table Returns data.table column key (character).","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of (sub-)graphs — mlr_graphs","text":"","code":"library(mlr3) lrn = lrn(\"regr.rpart\") task = mlr_tasks$get(\"boston_housing\")  # Robustify the learner for the task. gr = pipeline_robustify(task, lrn) %>>% po(\"learner\", lrn) # or equivalently gr = mlr_graphs$get(\"robustify\", task = task, learner = lrn) %>>% po(lrn) # or equivalently gr = ppl(\"robustify\", task, lrn) %>>% po(\"learner\", lrn)  # all Graphs currently in the dictionary: as.data.table(mlr_graphs) #> Key: <key> #>              key #>           <char> #> 1:       bagging #> 2:        branch #> 3: convert_types #> 4:    greplicate #> 5:           ovr #> 6:     robustify #> 7:      stacking #> 8:   targettrafo"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_bagging.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bagging learner — mlr_graphs_bagging","title":"Create a bagging learner — mlr_graphs_bagging","text":"Creates Graph performs bagging supplied graph. done follows: Subsample data step using PipeOpSubsample, afterwards apply graph Replicate step iterations times (parallel via multiplicities) Average outputs replicated graphs predictions using averager (note setting collect_multipliciy = TRUE required) input arguments cloned references common returned Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_bagging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bagging learner — mlr_graphs_bagging","text":"","code":"pipeline_bagging(   graph,   iterations = 10,   frac = 0.7,   averager = NULL,   replace = FALSE )"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_bagging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bagging learner — mlr_graphs_bagging","text":"graph PipeOp | Graph  PipeOpLearner Graph create robustifying pipeline . Outputs replicated graphs connected averager. iterations integer(1)  Number bagging iterations. Defaults 10. frac numeric(1)  Percentage rows keep subsampling. See PipeOpSubsample information. Defaults 0.7. averager PipeOp | Graph  PipeOp Graph averages predictions replicated subsampled graph's. simplest case, po(\"classifavg\") po(\"regravg\") can used order perform simple averaging classification regression predictions respectively. NULL (default), averager added end graph. Note setting collect_multipliciy = TRUE construction averager required. replace logical(1)  Whether sample replacement. Default FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_bagging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bagging learner — mlr_graphs_bagging","text":"Graph","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_bagging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bagging learner — mlr_graphs_bagging","text":"","code":"# \\donttest{ library(mlr3) lrn_po = po(\"learner\", lrn(\"regr.rpart\")) task = mlr_tasks$get(\"boston_housing\") gr = pipeline_bagging(lrn_po, 3, averager = po(\"regravg\", collect_multiplicity = TRUE)) resample(task, GraphLearner$new(gr), rsmp(\"holdout\"))$aggregate() #> regr.mse  #> 12.44027   # The original bagging method uses boosting by sampling with replacement. gr = ppl(\"bagging\", lrn_po, frac = 1, replace = TRUE,   averager = po(\"regravg\", collect_multiplicity = TRUE)) resample(task, GraphLearner$new(gr), rsmp(\"holdout\"))$aggregate() #> regr.mse  #> 14.96053  # }"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Branch Between Alternative Paths — mlr_graphs_branch","title":"Branch Between Alternative Paths — mlr_graphs_branch","text":"Create multiplexed graph. input arguments cloned references common returned Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Branch Between Alternative Paths — mlr_graphs_branch","text":"","code":"pipeline_branch(graphs, prefix_branchops = \"\", prefix_paths = FALSE)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Branch Between Alternative Paths — mlr_graphs_branch","text":"graphs list Graph  Multiple graphs, possibly named. must exactly one output. arguments named, must unique names. prefix_branchops character(1)  Optional id prefix prepend PipeOpBranch PipeOpUnbranch id. resulting IDs \"[prefix_branchops]branch\" \"[prefix_branchops]unbranch\". Default \"\". prefix_paths logical(1) | character(1)  Whether add prefixes graph IDs performing gunion. Can helpful avoid ID clashes resulting graph. Default FALSE. TRUE, prefixes taken names input arguments present \"poX\" X counts . character(1), prefix added PipeOp IDs additionally input argument list.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Branch Between Alternative Paths — mlr_graphs_branch","text":"Graph","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Branch Between Alternative Paths — mlr_graphs_branch","text":"","code":"library(\"mlr3\")  po_pca = po(\"pca\") po_nop = po(\"nop\")  branches = pipeline_branch(list(pca = po_pca, nothing = po_nop)) # gives the same as branches = c(\"pca\", \"nothing\") po(\"branch\", branches) %>>%   gunion(list(po_pca, po_nop)) %>>%   po(\"unbranch\", branches) #> Graph with 4 PipeOps: #>        ID         State sccssors prdcssors #>    <char>        <char>   <char>    <char> #>    branch <<UNTRAINED>>  pca,nop           #>       pca <<UNTRAINED>> unbranch    branch #>       nop <<UNTRAINED>> unbranch    branch #>  unbranch <<UNTRAINED>>            pca,nop  pipeline_branch(list(pca = po_pca, nothing = po_nop),   prefix_branchops = \"br_\", prefix_paths = \"xy_\") #> Graph with 4 PipeOps: #>              ID         State               sccssors              prdcssors #>          <char>        <char>                 <char>                 <char> #>       br_branch <<UNTRAINED>> xy_pca.pca,xy_nothi...                        #>      xy_pca.pca <<UNTRAINED>>            br_unbranch              br_branch #>  xy_nothing.nop <<UNTRAINED>>            br_unbranch              br_branch #>     br_unbranch <<UNTRAINED>>                        xy_pca.pca,xy_nothi... # gives the same as po(\"branch\", branches, id = \"br_branch\") %>>%   gunion(list(xy_pca = po_pca, xy_nothing = po_nop)) %>>%   po(\"unbranch\", branches, id = \"br_unbranch\") #> Graph with 4 PipeOps: #>              ID         State               sccssors              prdcssors #>          <char>        <char>                 <char>                 <char> #>       br_branch <<UNTRAINED>> xy_pca.pca,xy_nothi...                        #>      xy_pca.pca <<UNTRAINED>>            br_unbranch              br_branch #>  xy_nothing.nop <<UNTRAINED>>            br_unbranch              br_branch #>     br_unbranch <<UNTRAINED>>                        xy_pca.pca,xy_nothi..."},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_convert_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Column Types — mlr_graphs_convert_types","title":"Convert Column Types — mlr_graphs_convert_types","text":"Converts columns type type_from type_to, using corresponding R function (e.g. .numeric(), .factor()). possible subset columns affected using affect_columns argument. resulting Graph contains PipeOpColApply, followed, appropriate, PipeOpFixFactors. Unlike R's .factor() function, ppl(\"convert_types\") convert ordered types (unordered) factor vectors.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_convert_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Column Types — mlr_graphs_convert_types","text":"","code":"pipeline_convert_types(   type_from,   type_to,   affect_columns = NULL,   id = NULL,   fixfactors = NULL,   more_args = list() )"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_convert_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Column Types — mlr_graphs_convert_types","text":"type_from character  column types convert. May combination \"logical\", \"integer\", \"numeric\", \"factor\", \"ordered\", \"character\", \"POSIXct\". type_to character(1)  type convert . Must scalar value, exactly one types allowed type_from. affect_columns function | Selector | NULL  columns affect. argument can restrict columns converted, beyond type_from argument. Must Selector-like function, takes Task argument returns character features use. id character(1) | NULL  ID give constructed PipeOps. Defaults ID built automatically type_from type_to. PipeOpFixFactors appended, ID paste0(id, \"_ff\"). fixfactors logical(1) | NULL  Whether append PipeOpFixFactors. Defaults TRUE type_to \"factor\" \"ordered\". more_args list  Additional arguments give conversion function. e.g. used pass timezone .POSIXct.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_convert_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Column Types — mlr_graphs_convert_types","text":"Graph","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_convert_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Column Types — mlr_graphs_convert_types","text":"","code":"library(\"mlr3\")  data_chr = data.table::data.table(   x = factor(letters[1:3]),   y = letters[1:3],   z = letters[1:3] ) task_chr = TaskClassif$new(\"task_chr\", data_chr, \"x\") str(task_chr$data()) #> Classes ‘data.table’ and 'data.frame':\t3 obs. of  3 variables: #>  $ x: Factor w/ 3 levels \"a\",\"b\",\"c\": 1 2 3 #>  $ y: chr  \"a\" \"b\" \"c\" #>  $ z: chr  \"a\" \"b\" \"c\" #>  - attr(*, \".internal.selfref\")=<externalptr>   graph = ppl(\"convert_types\", \"character\", \"factor\") str(graph$train(task_chr)[[1]]$data()) #> Classes ‘data.table’ and 'data.frame':\t3 obs. of  3 variables: #>  $ x: Factor w/ 3 levels \"a\",\"b\",\"c\": 1 2 3 #>  $ y: Factor w/ 3 levels \"a\",\"b\",\"c\": 1 2 3 #>  $ z: Factor w/ 3 levels \"a\",\"b\",\"c\": 1 2 3 #>  - attr(*, \".internal.selfref\")=<externalptr>   graph_z = ppl(\"convert_types\", \"character\", \"factor\",   affect_columns = selector_name(\"z\")) graph_z$train(task_chr)[[1]]$data() #>         x      z      y #>    <fctr> <fctr> <char> #> 1:      a      a      a #> 2:      b      b      b #> 3:      c      c      c  # `affect_columns` and `type_from` are both applied. The following # looks for a 'numeric' column with name 'z', which is not present; # the task is therefore unchanged. graph_z = ppl(\"convert_types\", \"numeric\", \"factor\",   affect_columns = selector_name(\"z\")) graph_z$train(task_chr)[[1]]$data() #>         x      y      z #>    <fctr> <char> <char> #> 1:      a      a      a #> 2:      b      b      b #> 3:      c      c      c"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_greplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Disjoint Graph Union of Copies of a Graph — mlr_graphs_greplicate","title":"Create Disjoint Graph Union of Copies of a Graph — mlr_graphs_greplicate","text":"Create new Graph containing n copies input Graph / PipeOp. avoid ID collisions, PipeOp IDs suffixed _i ranges 1 n. input arguments cloned references common returned Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_greplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Disjoint Graph Union of Copies of a Graph — mlr_graphs_greplicate","text":"","code":"pipeline_greplicate(graph, n)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_greplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Disjoint Graph Union of Copies of a Graph — mlr_graphs_greplicate","text":"graph Graph  Graph replicate. n integer(1) Number copies create.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_greplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Disjoint Graph Union of Copies of a Graph — mlr_graphs_greplicate","text":"Graph containing n copies input graph.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_greplicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Disjoint Graph Union of Copies of a Graph — mlr_graphs_greplicate","text":"","code":"library(\"mlr3\")  po_pca = po(\"pca\") pipeline_greplicate(po_pca, n = 2) #> Graph with 2 PipeOps: #>      ID         State sccssors prdcssors #>  <char>        <char>   <char>    <char> #>   pca_1 <<UNTRAINED>>                    #>   pca_2 <<UNTRAINED>>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_ovr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create A Graph to Perform ","title":"Create A Graph to Perform ","text":"Create new Graph classification Task perform \"One vs. Rest\" classification. input arguments cloned references common returned Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_ovr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create A Graph to Perform ","text":"","code":"pipeline_ovr(graph)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_ovr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create A Graph to Perform ","text":"graph Graph  Graph wrapped PipeOpOVRSplit PipeOpOVRUnite. Graph return NULL training classification Prediction prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_ovr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create A Graph to Perform ","text":"Graph","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_ovr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create A Graph to Perform ","text":"","code":"library(\"mlr3\")  task = tsk(\"wine\")  learner = lrn(\"classif.rpart\") learner$predict_type = \"prob\"  # Simple OVR g1 = pipeline_ovr(learner) g1$train(task) #> $ovrunite.output #> NULL #>  g1$predict(task) #> $ovrunite.output #>  #> ── <PredictionClassif> for 178 observations: ─────────────────────────────────── #>  row_ids truth response     prob.1     prob.2     prob.3 #>        1     1        1 0.93301153 0.04437722 0.02261125 #>        2     1        1 0.93301153 0.04437722 0.02261125 #>        3     1        1 0.93301153 0.04437722 0.02261125 #>      ---   ---      ---        ---        ---        --- #>      176     3        3 0.08896784 0.04157376 0.86945841 #>      177     3        3 0.08896784 0.04157376 0.86945841 #>      178     3        3 0.01729144 0.04484461 0.93786395 #>   # Bagged Learners gr = po(\"replicate\", reps = 3) %>>%   po(\"subsample\") %>>%   learner %>>%   po(\"classifavg\", collect_multiplicity = TRUE) g2 = pipeline_ovr(gr) g2$train(task) #> $ovrunite.output #> NULL #>  g2$predict(task) #> $ovrunite.output #>  #> ── <PredictionClassif> for 178 observations: ─────────────────────────────────── #>  row_ids truth response     prob.1     prob.2    prob.3 #>        1     1        1 0.94661128 0.04959722 0.0037915 #>        2     1        1 0.94661128 0.04959722 0.0037915 #>        3     1        1 0.94661128 0.04959722 0.0037915 #>      ---   ---      ---        ---        ---       --- #>      176     3        3 0.31367185 0.03577892 0.6505492 #>      177     3        3 0.31367185 0.03577892 0.6505492 #>      178     3        3 0.04328215 0.04987458 0.9068433 #>   # Bagging outside OVR g3 = po(\"replicate\", reps = 3) %>>%   pipeline_ovr(po(\"subsample\") %>>% learner) %>>%   po(\"classifavg\", collect_multiplicity = TRUE) g3$train(task) #> $classifavg.output #> NULL #>  g3$predict(task) #> $classifavg.output #>  #> ── <PredictionClassif> for 178 observations: ─────────────────────────────────── #>  row_ids truth response     prob.1     prob.2     prob.3 #>        1     1        1 0.94463024 0.03159972 0.02377004 #>        2     1        1 0.94463024 0.03159972 0.02377004 #>        3     1        1 0.94463024 0.03159972 0.02377004 #>      ---   ---      ---        ---        ---        --- #>      176     3        3 0.03047528 0.03001841 0.93950630 #>      177     3        3 0.03047528 0.03001841 0.93950630 #>      178     3        3 0.03047528 0.03001841 0.93950630 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_robustify.html","id":null,"dir":"Reference","previous_headings":"","what":"Robustify a learner — mlr_graphs_robustify","title":"Robustify a learner — mlr_graphs_robustify","text":"Creates Graph can used robustify subsequent learner. Performs following steps: Drops empty factor levels using PipeOpFixFactors Imputes numeric features using PipeOpImputeHist PipeOpMissInd Imputes factor features using PipeOpImputeOOR Encodes factors using one-hot-encoding. Factors cardinality > max_cardinality collapsed using PipeOpCollapseFactors graph built conservatively, .e. function always tries assure everything works. learner provided, steps can left , .e. learner can deal factor variables, encoding performed. input arguments cloned references common returned Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_robustify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robustify a learner — mlr_graphs_robustify","text":"","code":"pipeline_robustify(   task = NULL,   learner = NULL,   impute_missings = NULL,   factors_to_numeric = NULL,   max_cardinality = 1000,   ordered_action = \"factor\",   character_action = \"factor\",   POSIXct_action = \"numeric\" )"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_robustify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robustify a learner — mlr_graphs_robustify","text":"task Task  Task create robustifying pipeline . Optional, omitted, \"worst possible\" Task assumed full pipeline created. learner Learner  learner create robustifying pipeline . Optional, omitted, \"worst possible\" Learner assumed conservative pipeline built. impute_missings logical(1) | NULL  missing values imputed? Defaults NULL: imputes task missing values (factors encoded numerics) learner can handle . factors_to_numeric logical(1) | NULL  (ordered unordered) factors encoded? Defaults NULL: encodes task factors (character columns get converted factor) learner can handle factors. max_cardinality integer(1)  Maximum number factor levels allowed. See . Default: 1000. ordered_action character(1) handle ordered columns: \"factor\" (default) \"factor!\": convert factor columns; \"numeric\" \"numeric!\": convert numeric columns; \"integer\" \"integer!\": convert integer columns; \"ignore\" \"ignore!\": ignore. task given ordered columns, learner given can handle ordered, \"factor\", \"numeric\" \"integer\" treated like \"ignore\". means necessary add exclamation point override Task Learner properties given. \"ignore\" \"ignore!\" therefore behave completely identically, \"ignore!\" present consistency. ordered features converted factor, treated like factor features pipeline, possibly eventually converted numerics, different way: factors get one-hot encoded, ordered_action = \"numeric\" converts ordered using .numeric integer-valued rank. character_action character(1) handle character columns: \"factor\" (default) \"factor!\": convert factor columns; \"matrix\" \"matrix!\": Use PipeOpTextVectorizer. \"ignore\" \"ignore!\": ignore. task given character columns, learner given can handle character, \"factor\" \"matrix\" treated like \"ignore\". means necessary add exclamation point override Task Learner properties given. \"ignore\" \"ignore!\" therefore behave completely identically, \"ignore!\" present consistency. character columns converted factor, treated like factor pipeline, possibly eventually converted numerics, using one-hot encoding. POSIXct_action character(1) handle POSIXct columns: \"numeric\" (default) \"numeric!\": convert numeric columns; \"datefeatures\" \"datefeatures!\": Use PipeOpDateFeatures. \"ignore\" \"ignore!\": ignore. task given POSIXct columns, learner given can handle POSIXct, \"numeric\" \"datefeatures\" treated like \"ignore\". means necessary add exclamation point override Task Learner properties given. \"ignore\" \"ignore!\" therefore behave completely identically, \"ignore!\" present consistency.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_robustify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robustify a learner — mlr_graphs_robustify","text":"Graph","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_robustify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robustify a learner — mlr_graphs_robustify","text":"","code":"# \\donttest{ library(mlr3) lrn = lrn(\"regr.rpart\") task = mlr_tasks$get(\"boston_housing\") gr = pipeline_robustify(task, lrn) %>>% po(\"learner\", lrn) resample(task, GraphLearner$new(gr), rsmp(\"holdout\")) #>  #> ── <ResampleResult> with 1 resampling iterations ─────────────────────────────── #>         task_id #>  boston_housing #>                                                                        learner_id #>  removeconstants_prerobustify.fixfactors.removeconstants_postrobustify.regr.rpart #>  resampling_id iteration  prediction_test warnings errors #>        holdout         1 <PredictionRegr>        0      0 # }"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_stacking.html","id":null,"dir":"Reference","previous_headings":"","what":"Create A Graph to Perform Stacking. — mlr_graphs_stacking","title":"Create A Graph to Perform Stacking. — mlr_graphs_stacking","text":"Create new Graph stacking. stacked learner uses predictions several base learners fits super learner using predictions features order predict outcome. input arguments cloned references common returned Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_stacking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create A Graph to Perform Stacking. — mlr_graphs_stacking","text":"","code":"pipeline_stacking(   base_learners,   super_learner,   method = \"cv\",   folds = 3,   use_features = TRUE )"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_stacking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create A Graph to Perform Stacking. — mlr_graphs_stacking","text":"base_learners list Learner list base learners. super_learner Learner super learner makes final prediction based base learners. method character(1)\"cv\" (default) building super learner using cross-validated predictions base learners \"insample\" building super learner using predictions base learners trained training data. folds integer(1) Number cross-validation folds. used method = \"cv\". Default 3. use_features logical(1) Whether original features also passed super learner. Default TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_stacking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create A Graph to Perform Stacking. — mlr_graphs_stacking","text":"Graph","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_stacking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create A Graph to Perform Stacking. — mlr_graphs_stacking","text":"","code":"library(mlr3) library(mlr3learners)  base_learners = list(   lrn(\"classif.rpart\", predict_type = \"prob\"),   lrn(\"classif.nnet\", predict_type = \"prob\") ) super_learner = lrn(\"classif.log_reg\")  graph_stack = pipeline_stacking(base_learners, super_learner) graph_learner = as_learner(graph_stack) graph_learner$train(tsk(\"german_credit\")) #> # weights:  172 #> initial  value 702.752783  #> final  value 610.864302  #> converged #> # weights:  172 #> initial  value 417.427019  #> iter  10 value 398.811803 #> iter  20 value 379.569823 #> iter  30 value 334.453177 #> iter  40 value 289.756050 #> iter  50 value 277.504280 #> iter  60 value 259.000169 #> iter  70 value 257.671612 #> iter  80 value 257.668808 #> iter  80 value 257.668807 #> iter  80 value 257.668807 #> final  value 257.668807  #> converged #> # weights:  172 #> initial  value 437.127855  #> final  value 401.249484  #> converged #> # weights:  172 #> initial  value 466.609427  #> iter  10 value 406.510158 #> final  value 406.510141  #> converged"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_targettrafo.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform and Re-Transform the Target Variable — mlr_graphs_targettrafo","title":"Transform and Re-Transform the Target Variable — mlr_graphs_targettrafo","text":"Wraps Graph transforms target training inverts transformation prediction. done follows: Specify transformation inversion function using subclass PipeOpTargetTrafo, defaults PipeOpTargetMutate, afterwards apply graph. end, prediction transformation inverted using PipeOpTargetInvert. set transformation inversion function PipeOpTargetMutate see parameters trafo inverter param_set resulting Graph. Note input graph explicitly checked actually return Prediction prediction. input arguments cloned references common returned Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_targettrafo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform and Re-Transform the Target Variable — mlr_graphs_targettrafo","text":"","code":"pipeline_targettrafo(   graph,   trafo_pipeop = PipeOpTargetMutate$new(),   id_prefix = \"\" )"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_targettrafo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform and Re-Transform the Target Variable — mlr_graphs_targettrafo","text":"graph PipeOpLearner | Graph  PipeOpLearner Graph wrap transformation re-transformation target variable. trafo_pipeop PipeOp  PipeOp subclass PipeOpTargetTrafo. Default PipeOpTargetMutate. id_prefix character(1)  Optional id prefix prepend PipeOpTargetInvert ID. resulting ID \"[id_prefix]targetinvert\". Default \"\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_targettrafo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform and Re-Transform the Target Variable — mlr_graphs_targettrafo","text":"Graph","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_graphs_targettrafo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform and Re-Transform the Target Variable — mlr_graphs_targettrafo","text":"","code":"library(\"mlr3\")  tt = pipeline_targettrafo(PipeOpLearner$new(LearnerRegrRpart$new())) tt$param_set$values$targetmutate.trafo = function(x) log(x, base = 2) tt$param_set$values$targetmutate.inverter = function(x) list(response = 2 ^ x$response)  # gives the same as g = Graph$new() g$add_pipeop(PipeOpTargetMutate$new(param_vals = list(   trafo = function(x) log(x, base = 2),   inverter = function(x) list(response = 2 ^ x$response))   ) ) g$add_pipeop(LearnerRegrRpart$new()) g$add_pipeop(PipeOpTargetInvert$new()) g$add_edge(src_id = \"targetmutate\", dst_id = \"targetinvert\",   src_channel = 1, dst_channel = 1) g$add_edge(src_id = \"targetmutate\", dst_id = \"regr.rpart\",   src_channel = 2, dst_channel = 1) g$add_edge(src_id = \"regr.rpart\", dst_id = \"targetinvert\",   src_channel = 1, dst_channel = 2)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized Weighted Average of Features for Classification and Regression — mlr_learners_avg","title":"Optimized Weighted Average of Features for Classification and Regression — mlr_learners_avg","text":"Computes weighted average inputs. Used context computing weighted averages predictions. Predictions averaged using weights (order appearance data) optimized using nonlinear optimization package nloptr measure provided measure. (defaults classif.ce LearnerClassifAvg regr.mse LearnerRegrAvg). Learned weights can obtained $model. Learner implements generalizes approach proposed LeDell (2015) uses non-linear optimization order learn base-learner weights optimize given performance metric (e.g AUC). approach similar exactly one implemented AUC SuperLearner R package (metric \"classif.auc\"). detailed analysis general idea, reader referred LeDell (2015). Note, weights always sum 1 division sum(weights) weighting incoming features.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized Weighted Average of Features for Classification and Regression — mlr_learners_avg","text":"","code":"mlr_learners_classif.avg  mlr_learners_regr.avg"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_avg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Optimized Weighted Average of Features for Classification and Regression — mlr_learners_avg","text":"R6Class object inheriting mlr3::LearnerClassif/mlr3::Learner.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_avg.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimized Weighted Average of Features for Classification and Regression — mlr_learners_avg","text":"parameters parameters inherited LearnerClassif, well : measure :: Measure | character Measure optimize . converted Measure case character. Initialized \"classif.ce\", .e. misclassification error classification \"regr.mse\", .e. mean squared error regression. optimizer :: Optimizer | character(1)Optimizer used find optimal thresholds. character, converts Optimizer via opt. Initialized OptimizerNLoptr. Nloptr hyperparameters initialized xtol_rel = 1e-8, algorithm = \"NLOPT_LN_COBYLA\" equal initial weights learner. fine-grained control, recommended supply instantiated Optimizer. log_level :: character(1) | integer(1) Set temporary log-level lgr::get_logger(\"mlr3/bbotk\"). Initialized : \"warn\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_avg.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimized Weighted Average of Features for Classification and Regression — mlr_learners_avg","text":"LearnerClassifAvg$new(), id = \"classif.avg\")  (chr) -> self  Constructor. LearnerRegrAvg$new(), id = \"regr.avg\")  (chr) -> self  Constructor.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_avg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimized Weighted Average of Features for Classification and Regression — mlr_learners_avg","text":"LeDell, Erin (2015). Scalable Ensemble Learning Computationally Efficient Variance Estimation. Ph.D. thesis, UC Berkeley.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Encapsulate a Graph as a Learner — mlr_learners_graph","title":"Encapsulate a Graph as a Learner — mlr_learners_graph","text":"Learner encapsulates Graph used mlr3 resampling benchmarks. Graph must return single Prediction $predict() call. result $train() call discarded, internal state changes training used. predict_type GraphLearner can obtained set via predict_type active binding. Setting new predict type try set predict_type relevant PipeOp / Learner encapsulated within Graph. Similarly, predict_type Graph always smallest denominator Graph. GraphLearner always constructed untrained state. graph argument non-NULL $state, ignored.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_graph.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Encapsulate a Graph as a Learner — mlr_learners_graph","text":"R6Class object inheriting mlr3::Learner.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_graph.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Encapsulate a Graph as a Learner — mlr_learners_graph","text":"graph :: Graph | PipeOpGraph wrap. Can PipeOp, automatically converted Graph. argument usually cloned, unless clone_graph FALSE; access Graph inside GraphLearner -reference, use $graph. id :: character(1) Identifier resulting Learner. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings . Default list(). task_type :: character(1) task_type GraphLearner ; usually automatically inferred Graphs simple enough. predict_type :: character(1) predict_type GraphLearner ; usually automatically inferred Graphs simple enough. clone_graph :: logical(1) Whether clone graph upon construction. Unintentionally changing graph reference can lead unexpected behaviour, TRUE (default) recommended. particular, note $state $graph set NULL reference construction GraphLearner, $train(), $predict() clone_graph FALSE.","code":"GraphLearner$new(graph, id = NULL, param_vals = list(), task_type = NULL, predict_type = NULL)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_graph.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Encapsulate a Graph as a Learner — mlr_learners_graph","text":"Fields inherited Learner, well : graph :: GraphGraph wrapped. field contains prototype Graph trained, contain model. Use graph_model access trained Graph $train(). Read-. graph_model :: LearnerGraph wrapped. Graph contains trained state $train(). Read-. pipeops :: named list PipeOp  Contains PipeOps underlying Graph, named PipeOp's $ids. Shortcut $graph_model$pipeops. See Graph details. edges :: data.table  columns src_id (character), src_channel (character), dst_id (character), dst_channel (character) Table connections PipeOps underlying Graph. Shortcut $graph$edges. See Graph details. param_set :: ParamSet Parameters underlying Graph. Shortcut $graph$param_set. See Graph details. pipeops_param_set :: named list() Named list containing ParamSets PipeOps Graph. See details. pipeops_param_set_values :: named list() Named list containing set parameter values PipeOps Graph. See details. internal_tuned_values :: named list() NULL internal tuned parameter values collected PipeOps. NULL returned learner trained none wrapped learners supports internal tuning. internal_valid_scores :: named list() NULL internal validation scores retrieved PipeOps. names prefixed respective IDs PipeOps. NULL returned learner trained none wrapped learners supports internal validation. validate :: numeric(1), \"predefined\", \"test\" NULL construct validation data. also configured individual PipeOps PipeOpLearner, see set_validate.GraphLearner. details possible values, see mlr3::Learner. marshaled :: logical(1) Whether learner marshaled. impute_selected_features :: logical(1) Whether heuristically determine $selected_features() $selected_features() \"base learner\" Learners, even \"selected_features\" property / implement $selected_features(). impute_selected_features TRUE base learners implement $selected_features(), GraphLearner's $selected_features() method return features seen base learners. useful cases feature selection performed inside Graph: $selected_features() set features selected Graph. impute_selected_features FALSE, $selected_features() method throw error $selected_features() implemented base learners. heuristic may report features actually used base learners, cases base learners implement $selected_features(). default FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_graph.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Encapsulate a Graph as a Learner — mlr_learners_graph","text":"Methods inherited Learner, well : ids(sorted = FALSE)  (logical(1)) -> character  Get IDs PipeOps. order PipeOps added sorted FALSE, topologically sorted sorted TRUE. plot(html = FALSE, horizontal = FALSE)  (logical(1), logical(1)) -> NULL  Plot Graph, using either igraph package (html = FALSE, default) visNetwork package html = TRUE producing htmlWidget. htmlWidget can rescaled using visOptions. html = FALSE, orientation plotted graph can controlled horizontal. marshal () -> self Marshal model. unmarshal () -> self Unmarshal model. base_learner(recursive = Inf, return_po = FALSE, return_all = FALSE, resolve_branching = TRUE) (numeric(1), logical(1), logical(1), character(1)) -> Learner | PipeOp | list Learner | list PipeOp Return base learner GraphLearner. recursive 0, GraphLearner returned. Otherwise, Graph traversed backwards find first PipeOp containing $learner_model field. recursive 1, $learner_model (containing PipeOp, return_po TRUE) returned. recursive greater 1, discovered base learner's base_learner() method called recursive - 1. recursive must set 1 return_po TRUE, must set 1 return_all TRUE. return_po TRUE, container-PipeOp returned instead Learner. typically PipeOpLearner PipeOpLearnerCV. return_all TRUE, list Learners PipeOps returned. return_po FALSE, list may contain Multiplicity objects, unwrapped. return_all FALSE multiple possible base learners, error thrown. may also happen single PipeOpLearner present trained Multiplicity. resolve_branching TRUE, PipeOpUnbranch encountered, corresponding PipeOpBranch searched, hyperparameter configuration used select base learner. may multiple corresponding PipeOpBranchs, considered. resolve_branching FALSE, PipeOpUnbranch treated PipeOp multiple inputs; possible branch paths considered equally. following standard extractors defined Learner class available. Note typically extract information $base_learner(). works well simple Graphs modify features much, may give unexpected results Graphs add new features move information features. example, consider feature missing values, feature B used imputation, using po(\"imputelearner\"). case following Learner performs embedded feature selection selects feature , selected_features() method return feature , $importance() may even report 0 feature B. entirely accurate considering entire GraphLearner, feature B used imputation therefore impact predictions. following therefore used Graph known impact relevant properties. importance() () -> numeric $importance() returned base learner, \"importance property. Throws error otherwise. selected_features() () -> character $selected_features() returned base learner, \"selected_features property. base learner \"selected_features\" property impute_selected_features TRUE, features seen base learners returned. Throws error otherwise. oob_error() () -> numeric(1) $oob_error() returned base learner, \"oob_error property. Throws error otherwise. loglik() () -> numeric(1) $loglik() returned base learner, \"loglik property. Throws error otherwise.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_graph.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Encapsulate a Graph as a Learner — mlr_learners_graph","text":"as_graph() called graph argument, can technically also list things, automatically converted Graph via gunion(); however, usually result valid Graph can work Learner. graph can furthermore Learner, automatically wrapped Graph, wrapped GraphLearner object; usually adds overhead recommended.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_learners_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encapsulate a Graph as a Learner — mlr_learners_graph","text":"","code":"library(\"mlr3\")  graph = po(\"pca\") %>>% lrn(\"classif.rpart\")  lr = GraphLearner$new(graph) lr = as_learner(graph)  # equivalent  lr$train(tsk(\"iris\"))  lr$graph$state  # untrained version! #> $pca #> NULL #>  #> $classif.rpart #> NULL #>  # The following is therefore NULL: lr$graph$pipeops$classif.rpart$learner_model$model #> NULL  # To access the trained model from the PipeOpLearner's Learner, use: lr$graph_model$pipeops$classif.rpart$learner_model$model #> n= 150  #>  #> node), split, n, loss, yval, (yprob) #>       * denotes terminal node #>  #> 1) root 150 100 setosa (0.33333333 0.33333333 0.33333333)   #>   2) PC1< -1.553145 50   0 setosa (1.00000000 0.00000000 0.00000000) * #>   3) PC1>=-1.553145 100  50 versicolor (0.00000000 0.50000000 0.50000000)   #>     6) PC1< 1.142805 44   1 versicolor (0.00000000 0.97727273 0.02272727) * #>     7) PC1>=1.142805 56   7 virginica (0.00000000 0.12500000 0.87500000) *  # Feature importance (of principal components): lr$graph_model$pipeops$classif.rpart$learner_model$importance() #>       PC1       PC2       PC3       PC4  #> 85.795455 18.016529  5.694731  3.254132"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of PipeOps — mlr_pipeops","title":"Dictionary of PipeOps — mlr_pipeops","text":"simple Dictionary storing objects class PipeOp. PipeOp associated help page, see mlr_pipeops_[id].","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of PipeOps — mlr_pipeops","text":"R6Class object inheriting mlr3misc::Dictionary.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Dictionary of PipeOps — mlr_pipeops","text":"Fields inherited Dictionary, well : metainf :: environment Environment stores metainf argument $add() method. internal use.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Dictionary of PipeOps — mlr_pipeops","text":"Methods inherited Dictionary, well : add(key, value, metainf = NULL) (character(1), R6ClassGenerator, NULL | list) Adds constructor value dictionary key key, potentially overwriting previously stored item. metainf NULL (default), must list arguments given value constructor (.e. value$new()) needs constructed .data.table PipeOp listing.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Dictionary of PipeOps — mlr_pipeops","text":".data.table(dict)Dictionary -> data.table::data.table Returns data.table following columns: key :: (character) Key PipeOp registered Dictionary using $add() method. label :: (character) Description PipeOp's functionality. packages :: (character) Set required packages PipeOp's train predict methods. tags :: (character) set tags associated PipeOp describing purpose. feature_types :: (character) Feature types PipeOp operates . NA PipeOps directly operate Task. input.num, output.num :: (integer) Number PipeOp's input output channels. NA PipeOps accept varying number input /output channels depending construction argument. See input output fields PipeOp. input.type.train, input.type.predict, output.type.train, output.type.predict :: (character) Types allowed input returned output PipeOp's $train() $predict() methods. value NULL means null object, e.g. data, taken input returned output. value \"*\" means type possible. input.type.train output.type.train input.type.predict output.type.predict contain values enclosed square brackets (\"[\", \"]\"), respective input channel Multiplicity-aware. information, see Multiplicity.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of PipeOps — mlr_pipeops","text":"","code":"library(\"mlr3\")  mlr_pipeops$get(\"learner\", lrn(\"classif.rpart\")) #> PipeOp: <classif.rpart> (not trained) #> values: <xval=0> #> Input channels <name [train type, predict type]>: #>   input [TaskClassif,TaskClassif] #> Output channels <name [train type, predict type]>: #>   output [NULL,PredictionClassif]  # equivalent: po(\"learner\", learner = lrn(\"classif.rpart\")) #> PipeOp: <classif.rpart> (not trained) #> values: <xval=0> #> Input channels <name [train type, predict type]>: #>   input [TaskClassif,TaskClassif] #> Output channels <name [train type, predict type]>: #>   output [NULL,PredictionClassif]  # all PipeOps currently in the dictionary: as.data.table(mlr_pipeops)[, c(\"key\", \"input.num\", \"output.num\", \"packages\")] #> Key: <key> #>                       key input.num output.num                         packages #>                    <char>     <int>      <int>                           <list> #>  1:                  adas         1          1        mlr3pipelines,smotefamily #>  2:               blsmote         1          1        mlr3pipelines,smotefamily #>  3:                boxcox         1          1      mlr3pipelines,bestNormalize #>  4:                branch         1         NA                    mlr3pipelines #>  5:                 chunk         1         NA                    mlr3pipelines #>  6:        classbalancing         1          1                    mlr3pipelines #>  7:            classifavg        NA          1              mlr3pipelines,stats #>  8:          classweights         1          1                    mlr3pipelines #>  9:              colapply         1          1                    mlr3pipelines #> 10:       collapsefactors         1          1                    mlr3pipelines #> 11:              colroles         1          1                    mlr3pipelines #> 12:                  copy         1         NA                    mlr3pipelines #> 13:          datefeatures         1          1                    mlr3pipelines #> 14:                decode         1          1                    mlr3pipelines #> 15:                encode         1          1              mlr3pipelines,stats #> 16:          encodeimpact         1          1                    mlr3pipelines #> 17:            encodelmer         1          1        mlr3pipelines,lme4,nloptr #> 18:     encodeplquantiles         1          1              mlr3pipelines,stats #> 19:          encodepltree         1          1         mlr3pipelines,mlr3,rpart #> 20:          featureunion        NA          1                    mlr3pipelines #> 21:                filter         1          1                    mlr3pipelines #> 22:            fixfactors         1          1                    mlr3pipelines #> 23:               histbin         1          1           mlr3pipelines,graphics #> 24:                   ica         1          1            mlr3pipelines,fastICA #> 25:        imputeconstant         1          1                    mlr3pipelines #> 26:            imputehist         1          1           mlr3pipelines,graphics #> 27:         imputelearner         1          1                    mlr3pipelines #> 28:            imputemean         1          1                    mlr3pipelines #> 29:          imputemedian         1          1              mlr3pipelines,stats #> 30:            imputemode         1          1                    mlr3pipelines #> 31:             imputeoor         1          1                    mlr3pipelines #> 32:          imputesample         1          1                    mlr3pipelines #> 33:             kernelpca         1          1            mlr3pipelines,kernlab #> 34:               learner         1          1                    mlr3pipelines #> 35:            learner_cv         1          1                    mlr3pipelines #> 36:     learner_pi_cvplus         1          1                    mlr3pipelines #> 37:     learner_quantiles         1          1                    mlr3pipelines #> 38:               missind         1          1                    mlr3pipelines #> 39:           modelmatrix         1          1              mlr3pipelines,stats #> 40:     multiplicityexply         1         NA                    mlr3pipelines #> 41:     multiplicityimply        NA          1                    mlr3pipelines #> 42:                mutate         1          1                    mlr3pipelines #> 43:              nearmiss         1          1             mlr3pipelines,themis #> 44:                   nmf         1          1           mlr3pipelines,MASS,NMF #> 45:                   nop         1          1                    mlr3pipelines #> 46:              ovrsplit         1          1                    mlr3pipelines #> 47:              ovrunite         1          1                    mlr3pipelines #> 48:                   pca         1          1                    mlr3pipelines #> 49:                 proxy        NA          1                    mlr3pipelines #> 50:           quantilebin         1          1              mlr3pipelines,stats #> 51:      randomprojection         1          1                    mlr3pipelines #> 52:        randomresponse         1          1                    mlr3pipelines #> 53:               regravg        NA          1                    mlr3pipelines #> 54:       removeconstants         1          1                    mlr3pipelines #> 55:         renamecolumns         1          1                    mlr3pipelines #> 56:             replicate         1          1                    mlr3pipelines #> 57:              rowapply         1          1                    mlr3pipelines #> 58:                 scale         1          1                    mlr3pipelines #> 59:           scalemaxabs         1          1                    mlr3pipelines #> 60:            scalerange         1          1                    mlr3pipelines #> 61:                select         1          1                    mlr3pipelines #> 62:                 smote         1          1        mlr3pipelines,smotefamily #> 63:               smotenc         1          1             mlr3pipelines,themis #> 64:           spatialsign         1          1                    mlr3pipelines #> 65:             subsample         1          1                    mlr3pipelines #> 66:          targetinvert         2          1                    mlr3pipelines #> 67:          targetmutate         1          2                    mlr3pipelines #> 68: targettrafoscalerange         1          2                    mlr3pipelines #> 69:        textvectorizer         1          1 mlr3pipelines,quanteda,stopwords #> 70:             threshold         1          1                    mlr3pipelines #> 71:                 tomek         1          1             mlr3pipelines,themis #> 72:         tunethreshold         1          1              mlr3pipelines,bbotk #> 73:              unbranch        NA          1                    mlr3pipelines #> 74:                vtreat         1          1             mlr3pipelines,vtreat #> 75:            yeojohnson         1          1      mlr3pipelines,bestNormalize #>                       key input.num output.num                         packages"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":null,"dir":"Reference","previous_headings":"","what":"ADAS Balancing — mlr_pipeops_adas","title":"ADAS Balancing — mlr_pipeops_adas","text":"Generates balanced data set creating synthetic instances minority classes using ADASYN algorithm. algorithm generates minority instance new data points based K nearest neighbors difficulty learning data point. can applied tasks numeric features missing values. See smotefamily::ADAS details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ADAS Balancing — mlr_pipeops_adas","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"ADAS Balancing — mlr_pipeops_adas","text":"id :: character(1) Identifier resulting object, default \"adas\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpADAS$new(id = \"adas\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"ADAS Balancing — mlr_pipeops_adas","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif used input output training prediction. output training input Task added synthetic rows minority class. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"ADAS Balancing — mlr_pipeops_adas","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"ADAS Balancing — mlr_pipeops_adas","text":"parameters parameters inherited PipeOpTaskPreproc, well : K :: numeric(1)  number nearest neighbors used sampling new values. Default 5. See ADAS().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"ADAS Balancing — mlr_pipeops_adas","text":"target level unobserved training, synthetic data points generated class. error raised; unobserved class simply ignored.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"ADAS Balancing — mlr_pipeops_adas","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ADAS Balancing — mlr_pipeops_adas","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ADAS Balancing — mlr_pipeops_adas","text":"H, Bai Y, Garcia, . E, Li S (2008). “ADASYN: Adaptive synthetic sampling approach imbalanced learning.” 2008 IEEE International Joint Conference Neural Networks (IEEE World Congress Computational Intelligence), 1322-1328. doi:10.1109/IJCNN.2008.4633969 .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_adas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ADAS Balancing — mlr_pipeops_adas","text":"","code":"library(\"mlr3\")  # Create example task data = data.frame(   target = factor(sample(c(\"c1\", \"c2\"), size = 300, replace = TRUE, prob = c(0.1, 0.9))),   x1 = rnorm(300),   x2 = rnorm(300) ) task = TaskClassif$new(id = \"example\", backend = data, target = \"target\") task$head() #>    target          x1         x2 #>    <fctr>       <num>      <num> #> 1:     c2 -1.80179859  0.4839497 #> 2:     c2 -0.73610585  0.1665491 #> 3:     c2  1.57174231 -1.1888893 #> 4:     c2  1.43272699  1.2162566 #> 5:     c2 -1.62214871 -1.3224060 #> 6:     c2 -0.04208987 -0.1837415 table(task$data(cols = \"target\")) #> target #>  c1  c2  #>  25 275   # Generate synthetic data for minority class pop = po(\"adas\") adas_result = pop$train(list(task))[[1]]$data() nrow(adas_result) #> [1] 558 table(adas_result$target) #>  #>  c1  c2  #> 283 275"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":null,"dir":"Reference","previous_headings":"","what":"BLSMOTE Balancing — mlr_pipeops_blsmote","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"Adds new data points generating synthetic instances minority class using Borderline-SMOTE algorithm. can applied classification tasks numeric features missing values. See smotefamily::BLSMOTE details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"id :: character(1) Identifier resulting object, default \"smote\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpBLSmote$new(id = \"blsmote\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif used input output training prediction. output training input Task added synthetic rows minority class. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"parameters parameters inherited PipeOpTaskPreproc, well : K :: numeric(1)  number nearest neighbors used sampling minority class. Default 5. See BLSMOTE(). C :: numeric(1)  number nearest neighbors used classifying sample points SAFE/DANGER/NOISE. Default 5. See BLSMOTE(). dup_size :: numeric(1)  Desired times synthetic minority instances original number majority instances. 0 leads balancing minority majority class. Default 0. See BLSMOTE(). method :: character(1)  type Borderline-SMOTE algorithm use. Default \"type1\". See BLSMOTE(). quiet :: logical(1)  Whether suppress printing status training. Initialized TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"target level unobserved training, synthetic data points generated class. error raised; unobserved class simply ignored.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"Han H, Wang W, Mao B (2005). “Borderline-SMOTE: New -Sampling Method Imbalanced Data Sets Learning.” Huang D, Zhang X, Huang G (eds.), Advances Intelligent Computing, 878–887. ISBN 978-3-540-31902-3, doi:10.1007/11538059_91 .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_blsmote.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BLSMOTE Balancing — mlr_pipeops_blsmote","text":"","code":"library(\"mlr3\")  # Create example task data = smotefamily::sample_generator(500, 0.8) data$result = factor(data$result) task = TaskClassif$new(id = \"example\", backend = data, target = \"result\") task$head() #>    result        X1          X2 #>    <fctr>     <num>       <num> #> 1:      n 0.7045238 0.727653679 #> 2:      n 0.2206197 0.738630963 #> 3:      n 0.7768594 0.761680195 #> 4:      n 0.4361547 0.956357428 #> 5:      p 0.6626200 0.662670787 #> 6:      n 0.2244044 0.008419263 table(task$data(cols = \"result\")) #> result #>   n   p  #> 393 107   # Generate synthetic data for minority class pop = po(\"blsmote\") bls_result = pop$train(list(task))[[1]]$data() nrow(bls_result) #> [1] 776 table(bls_result$result) #>  #>   n   p  #> 393 383"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":null,"dir":"Reference","previous_headings":"","what":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"Conducts Box-Cox transformation numeric features. lambda parameter transformation estimated training used training prediction transformation. See bestNormalize::boxcox() details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"id :: character(1) Identifier resulting object, default \"boxcox\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpBoxCox$new(id = \"boxcox\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric features replaced transformed versions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"$state named list $state elements inherited PipeOpTaskPreproc, well list class boxcox column, transformed.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"parameters parameters inherited PipeOpTaskPreproc, well : standardize :: logical(1)  Whether center scale transformed values attempt standard normal distribution. details see boxcox(). eps :: numeric(1)  Tolerance parameter identify lambda parameter equal zero. details see boxcox(). lower :: numeric(1)  Lower value estimation lambda parameter. details see boxcox(). upper :: numeric(1)  Upper value estimation lambda parameter. details see boxcox().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"Uses bestNormalize::boxcox function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_boxcox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box-Cox Transformation of Numeric Features — mlr_pipeops_boxcox","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"boxcox\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa   -1.3431567  -1.3850773   -0.8917547  1.01831791 #>   2:    setosa   -1.3431567  -1.3850773   -1.1812229 -0.08167295 #>   3:    setosa   -1.4033413  -1.3850773   -1.4845435  0.37307046 #>   4:    setosa   -1.2832670  -1.3850773   -1.6417967  0.14833599 #>   5:    setosa   -1.3431567  -1.3850773   -1.0348319  1.22454068 #>  ---                                                             #> 146: virginica    0.8174171   1.2930924    1.0385560 -0.08167295 #> 147: virginica    0.7075555   0.9020852    0.6097200 -1.32264877 #> 148: virginica    0.8174171   1.0023867    0.8279148 -0.08167295 #> 149: virginica    0.9269887   1.2930924    0.4976284  0.80781419 #> 150: virginica    0.7625234   0.7998822    0.1485189 -0.08167295  pop$state #> $bc #> $bc$Petal.Length #> Standardized Box Cox Transformation with 150 nonmissing obs.: #>  Estimated statistics: #>  - lambda = 0.931286  #>  - mean (before standardization) = 2.58137  #>  - sd (before standardization) = 1.627669  #>  #> $bc$Petal.Width #> Standardized Box Cox Transformation with 150 nonmissing obs.: #>  Estimated statistics: #>  - lambda = 0.6433629  #>  - mean (before standardization) = 0.08586719  #>  - sd (before standardization) = 0.7857394  #>  #> $bc$Sepal.Length #> Standardized Box Cox Transformation with 150 nonmissing obs.: #>  Estimated statistics: #>  - lambda = -0.144751  #>  - mean (before standardization) = 1.549011  #>  - sd (before standardization) = 0.1094848  #>  #> $bc$Sepal.Width #> Standardized Box Cox Transformation with 150 nonmissing obs.: #>  Estimated statistics: #>  - lambda = 0.2810121  #>  - mean (before standardization) = 1.30301  #>  - sd (before standardization) = 0.1950175  #>  #>  #> $dt_columns #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Path Branching — mlr_pipeops_branch","title":"Path Branching — mlr_pipeops_branch","text":"Perform alternative path branching: PipeOpBranch multiple output channels connect different paths Graph. time, one paths taken execution. end different paths, PipeOpUnbranch PipeOp must used indicate end alternative paths. confused PipeOpCopy, naming scheme bit unfortunate.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Path Branching — mlr_pipeops_branch","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Path Branching — mlr_pipeops_branch","text":"options :: numeric(1) | character options integer number, determines number output channels / options created, named output1...output<n>. $selection parameter integer. options character, determines names channels directly. $selection parameter factorial. id :: character(1) Identifier resulting object, default \"branch\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpBranch$new(options, id = \"branch\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Path Branching — mlr_pipeops_branch","text":"PipeOpBranch one input channel named \"input\", taking input (\"*\") training prediction. PipeOpBranch multiple output channels depending options construction argument, named \"output1\", \"output2\", ... options numeric, named options value options character. output channels produce object given input (\"*\") NO_OP, training prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Path Branching — mlr_pipeops_branch","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Path Branching — mlr_pipeops_branch","text":"selection :: numeric(1) | character(1) Selection branching path take. ParamInt options parameter construction numeric(1), ranges 1 options. ParamFct options parameter character possible values options values. Initialized either 1 (options construction argument numeric(1)) first element options (character).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Path Branching — mlr_pipeops_branch","text":"Alternative path branching handled PipeOp backend. indicate path taken, PipeOpBranch returns NO_OP object output channel. PipeOp handles NO_OP input automatically returning NO_OP output without calling private$.train() private$.predict(), PipeOpUnbranch reached. PipeOpUnbranch take multiple inputs, except one must NO_OP, forward non-NO_OP object output.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Path Branching — mlr_pipeops_branch","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Path Branching — mlr_pipeops_branch","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path Branching — mlr_pipeops_branch","text":"","code":"library(\"mlr3\")  pca = po(\"pca\") nop = po(\"nop\") choices = c(\"pca\", \"nothing\") gr = po(\"branch\", choices) %>>%   gunion(list(pca, nop)) %>>%   po(\"unbranch\", choices)  gr$param_set$values$branch.selection = \"pca\" gr$train(tsk(\"iris\")) #> $unbranch.output #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): PC1, PC2, PC3, PC4 #>   gr$param_set$values$branch.selection = \"nothing\" gr$train(tsk(\"iris\")) #> $unbranch.output #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"Chunks input outnum chunks. Creates outnum Tasks training, simply passes input outnum times prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"outnum :: numeric(1) Number output channels, therefore number chunks created. id :: character(1) Identifier resulting object, default \"chunk\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpChunk$new(outnum, id = \"chunk\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"input-and-output","dir":"Reference","previous_headings":"","what":"Input and Output","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"PipeOpChunk one input channel named \"input\", taking Task training prediction. PipeOpChunk multiple output channels depending options construction argument, named \"output1\", \"output2\", ... output channels produce (respectively disjoint, random) subsets input Task training, pass original Task prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"shuffle :: logical(1)  data shuffled chunking? Initialized TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"Uses mlr3misc::chunk_vector() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_chunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chunk Input into Multiple Outputs — mlr_pipeops_chunk","text":"","code":"library(\"mlr3\")  task = tsk(\"wine\") opc = mlr_pipeops$get(\"chunk\", 2)  # watch the row number: 89 during training (task is chunked)... opc$train(list(task)) #> $output1 #>  #> ── <TaskClassif> (89x14): Wine Regions ───────────────────────────────────────── #> • Target: type #> • Target classes: 2 (42%), 1 (34%), 3 (25%) #> • Properties: multiclass #> • Features (13): #>   • dbl (11): alcalinity, alcohol, ash, color, dilution, flavanoids, hue, #>   malic, nonflavanoids, phenols, proanthocyanins #>   • int (2): magnesium, proline #>  #> $output2 #>  #> ── <TaskClassif> (89x14): Wine Regions ───────────────────────────────────────── #> • Target: type #> • Target classes: 2 (38%), 1 (33%), 3 (29%) #> • Properties: multiclass #> • Features (13): #>   • dbl (11): alcalinity, alcohol, ash, color, dilution, flavanoids, hue, #>   malic, nonflavanoids, phenols, proanthocyanins #>   • int (2): magnesium, proline #>   # ... 178 during predict (task is copied) opc$predict(list(task)) #> $output1 #>  #> ── <TaskClassif> (178x14): Wine Regions ──────────────────────────────────────── #> • Target: type #> • Target classes: 2 (40%), 1 (33%), 3 (27%) #> • Properties: multiclass #> • Features (13): #>   • dbl (11): alcalinity, alcohol, ash, color, dilution, flavanoids, hue, #>   malic, nonflavanoids, phenols, proanthocyanins #>   • int (2): magnesium, proline #>  #> $output2 #>  #> ── <TaskClassif> (178x14): Wine Regions ──────────────────────────────────────── #> • Target: type #> • Target classes: 2 (40%), 1 (33%), 3 (27%) #> • Properties: multiclass #> • Features (13): #>   • dbl (11): alcalinity, alcohol, ash, color, dilution, flavanoids, hue, #>   malic, nonflavanoids, phenols, proanthocyanins #>   • int (2): magnesium, proline #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":null,"dir":"Reference","previous_headings":"","what":"Class Balancing — mlr_pipeops_classbalancing","title":"Class Balancing — mlr_pipeops_classbalancing","text":"undersamples Task keep fraction rows majority class, well oversamples (repeats data points) rows minority class. Sampling happens training phase. Class-balancing Task sampling may beneficial classification imbalanced training data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Class Balancing — mlr_pipeops_classbalancing","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Class Balancing — mlr_pipeops_classbalancing","text":"id :: character(1) Identifier resulting  object, default \"classbalancing\" param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpClassBalancing$new(id = \"classbalancing\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Class Balancing — mlr_pipeops_classbalancing","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif used input output training prediction. output training input Task added removed rows balance target classes. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Class Balancing — mlr_pipeops_classbalancing","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Class Balancing — mlr_pipeops_classbalancing","text":"parameters parameters inherited PipeOpTaskPreproc; however, affect_columns parameter present. parameters : ratio :: numeric(1)  Ratio number rows classes keep, relative $reference value. Initialized 1. reference :: numeric(1)  $ratio value measured . Can \"\" (mean instance count classes), \"major\" (instance count class instances), \"minor\" (instance count class fewest instances), \"nonmajor\" (average instance count classes except major one), \"nonminor\" (average instance count classes except minor one), \"one\" ($ratio determines number instances , per class). Initialized \"\". adjust :: numeric(1)  classes / downsample. Can \"\" (downsample match required instance count), \"major\", \"minor\", \"nonmajor\", \"nonminor\" (see respective values $reference), \"upsample\" (upsample), \"downsample\". Initialized \"\". shuffle :: logical(1)  Whether shuffle rows resulting task. case data upsampled shuffle = FALSE, resulting task original rows (removed downsampling) original order, followed newly added rows ordered target class. Initialized TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Class Balancing — mlr_pipeops_classbalancing","text":"/ downsampling happens follows: first, \"target class count\" calculated, taking mean class count classes indicated reference parameter (e.g. reference \"nonmajor\": mean class count classes \"major\" class, .e. class samples) multiplying value ratio parameter. reference \"one\", \"target class count\" just value ratio (.e. 1 * ratio). class referenced adjust parameter (e.g. adjust \"nonminor\": class class fewest samples), PipeOpClassBalancing either throws samples (downsampling), adds additional rows equal randomly chosen samples (upsampling), number samples classes equals \"target class count\". upsampling performed classes observed training (.e. empty factor levels target column). Uses task$filter() remove rows. identical rows added upsampling, task$row_roles$use can used duplicate rows [inaudible]; instead task$rbind() function used, new data.table attached contains rows duplicated exactly many times added.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Class Balancing — mlr_pipeops_classbalancing","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class Balancing — mlr_pipeops_classbalancing","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classbalancing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class Balancing — mlr_pipeops_classbalancing","text":"","code":"library(\"mlr3\")  task = tsk(\"spam\") opb = po(\"classbalancing\")  # target class counts table(task$truth()) #>  #>    spam nonspam  #>    1813    2788   # double the instances in the minority class (spam) opb$param_set$values = list(ratio = 2, reference = \"minor\",   adjust = \"minor\", shuffle = FALSE) result = opb$train(list(task))[[1L]] table(result$truth()) #>  #>    spam nonspam  #>    3626    2788   # up or downsample all classes until exactly 20 per class remain opb$param_set$values = list(ratio = 20, reference = \"one\",   adjust = \"all\", shuffle = FALSE) result = opb$train(list(task))[[1]] table(result$truth()) #>  #>    spam nonspam  #>      20      20"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":null,"dir":"Reference","previous_headings":"","what":"Majority Vote Prediction — mlr_pipeops_classifavg","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"Perform (weighted) majority vote prediction classification Predictions connecting PipeOpClassifAvg multiple PipeOpLearner outputs. Always returns \"prob\" prediction, regardless incoming Learner's $predict_type. label class highest predicted probability selected \"response\" prediction. Learner's $predict_type set \"prob\", prediction obtained also \"prob\" type prediction probability predicted weighted average incoming predictions. incoming Learner's $predict_type must agree. Weights can set parameter; none provided, defaults equal weights prediction. Defaults equal weights model.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"R6Class inheriting PipeOpEnsemble/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"innum :: numeric(1) Determines number input channels. innum 0 (default), vararg input channel created can take arbitrary number inputs. collect_multiplicity :: logical(1) TRUE, input Multiplicity collecting channel. means, Multiplicity input, instead multiple normal inputs, accepted members aggregated. requires innum 0. Default FALSE. id :: character(1) Identifier resulting object, default \"classifavg\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpClassifAvg$new(innum = 0, collect_multiplicity = FALSE, id = \"classifavg\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"Input output channels inherited PipeOpEnsemble. Instead Prediction, PredictionClassif used input output prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"parameters parameters inherited PipeOpEnsemble.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"Inherits PipeOpEnsemble implementing private$weighted_avg_predictions() method.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"methods inherited PipeOpEnsemble/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classifavg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Majority Vote Prediction — mlr_pipeops_classifavg","text":"","code":"# \\donttest{ library(\"mlr3\")  # Simple Bagging gr = ppl(\"greplicate\",   po(\"subsample\") %>>%   po(\"learner\", lrn(\"classif.rpart\")),   n = 3 ) %>>%   po(\"classifavg\")  resample(tsk(\"iris\"), GraphLearner$new(gr), rsmp(\"holdout\")) #>  #> ── <ResampleResult> with 1 resampling iterations ─────────────────────────────── #>  task_id #>     iris #>                                                                                      learner_id #>  subsample_1.subsample_2.subsample_3.classif.rpart_1.classif.rpart_2.classif.rpart_3.classifavg #>  resampling_id iteration     prediction_test warnings errors #>        holdout         1 <PredictionClassif>        0      0 # }"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":null,"dir":"Reference","previous_headings":"","what":"Class Weights for Sample Weighting — mlr_pipeops_classweights","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"Adds class weight column Task different Learners may able use sample weighting. Sample weights added sample according target class. binary classification tasks supported. Caution: constructed naively without parameter, weights set 1. minor_weight parameter must adjusted PipeOp useful. Note sets \"weights_learner\" column. therefore influences behaviour subsequent Learners, influence resampling evaluation metric weights.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"id :: character(1) Identifier resulting  object, default \"classweights\" param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpClassWeights$new(id = \"classweights\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif used input output training prediction. output training input Task added weights column according target class. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"parameters parameters inherited PipeOpTaskPreproc; however, affect_columns parameter present. parameters : minor_weight :: numeric(1)  Weight given samples minor class. Major class samples weight 1. Initialized 1.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"Introduces, overwrites, \"weights\" column Task. However, Learner method needs respect weights effect. newly introduced column named .WEIGHTS; naming conflict column already exists weight column .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_classweights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class Weights for Sample Weighting — mlr_pipeops_classweights","text":"","code":"library(\"mlr3\")  task = tsk(\"spam\") opb = po(\"classweights\")  # task weights if (\"weights_learner\" %in% names(task)) {   task$weights_learner  # recent mlr3-versions } else {   task$weights  # old mlr3-versions } #> NULL  # double the instances in the minority class (spam) opb$param_set$values$minor_weight = 2 result = opb$train(list(task))[[1L]] if (\"weights_learner\" %in% names(result)) {   result$weights_learner  # recent mlr3-versions } else {   result$weights  # old mlr3-versions } #> Key: <row_id> #>       row_id weight #>        <int>  <num> #>    1:      1      2 #>    2:      2      2 #>    3:      3      2 #>    4:      4      2 #>    5:      5      2 #>   ---               #> 4597:   4597      1 #> 4598:   4598      1 #> 4599:   4599      1 #> 4600:   4600      1 #> 4601:   4601      1"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"Applies function column task. Use affect_columns parameter inherited PipeOpTaskPreprocSimple limit columns function applied . can used simple parameter transformations type conversions (e.g. .numeric). function applied training prediction. One important relationship machine learning preprocessing prediction phase, preprocessing data row independent rows. Therefore, applicator function always return vector / list result component depends corresponding input component components. rule thumb, function f generates output different Vectorize(f), function used applicator.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"id :: character(1) Identifier resulting object, default \"colapply\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpColApply$new(id = \"colapply\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"Input output channels inherited PipeOpTaskPreproc. output input Task features changed according applicator parameter.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"parameters parameters inherited PipeOpTaskPreproc, well : applicator :: function Function apply column task. return value vector length input, .e., function vectorizes input. typical example .numeric. return value can also matrix, data.frame, data.table. case, length input must match number returned rows. names resulting features output Task based (column) name(s) return value applicator function, prefixed original feature name separated dot (.). Use Vectorize create vectorizing function function ordinarily takes one element input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"Calls map data, using value applicator f. coerces output via .data.table.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Function to each Column of a Task — mlr_pipeops_colapply","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") poca = po(\"colapply\", applicator = as.character) poca$train(list(task))[[1]]  # types are converted #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • chr (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width  # function that does not vectorize f1 = function(x) {   # we could use `ifelse` here, but that is not the point   if (x > 1) {     \"a\"   } else {     \"b\"   } } poca$param_set$values$applicator = Vectorize(f1) poca$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>       <char>      <char>       <char>      <char> #>   1:    setosa            a           b            a           a #>   2:    setosa            a           b            a           a #>   3:    setosa            a           b            a           a #>   4:    setosa            a           b            a           a #>   5:    setosa            a           b            a           a #>  ---                                                             #> 146: virginica            a           a            a           a #> 147: virginica            a           a            a           a #> 148: virginica            a           a            a           a #> 149: virginica            a           a            a           a #> 150: virginica            a           a            a           a  # only affect Petal.* columns poca$param_set$values$affect_columns = selector_grep(\"^Petal\") poca$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>       <char>      <char>        <num>       <num> #>   1:    setosa            a           b          5.1         3.5 #>   2:    setosa            a           b          4.9         3.0 #>   3:    setosa            a           b          4.7         3.2 #>   4:    setosa            a           b          4.6         3.1 #>   5:    setosa            a           b          5.0         3.6 #>  ---                                                             #> 146: virginica            a           a          6.7         3.0 #> 147: virginica            a           a          6.3         2.5 #> 148: virginica            a           a          6.5         3.0 #> 149: virginica            a           a          6.2         3.4 #> 150: virginica            a           a          5.9         3.0  # function returning multiple columns f2 = function(x) {   cbind(floor = floor(x), ceiling = ceiling(x)) } poca$param_set$values$applicator = f2 poca$param_set$values$affect_columns = selector_all() poca$train(list(task))[[1]]$data() #>        Species Petal.Length.floor Petal.Length.ceiling Petal.Width.floor #>         <fctr>              <num>                <num>             <num> #>   1:    setosa                  1                    2                 0 #>   2:    setosa                  1                    2                 0 #>   3:    setosa                  1                    2                 0 #>   4:    setosa                  1                    2                 0 #>   5:    setosa                  1                    2                 0 #>  ---                                                                     #> 146: virginica                  5                    6                 2 #> 147: virginica                  5                    5                 1 #> 148: virginica                  5                    6                 2 #> 149: virginica                  5                    6                 2 #> 150: virginica                  5                    6                 1 #>      Petal.Width.ceiling Sepal.Length.floor Sepal.Length.ceiling #>                    <num>              <num>                <num> #>   1:                   1                  5                    6 #>   2:                   1                  4                    5 #>   3:                   1                  4                    5 #>   4:                   1                  4                    5 #>   5:                   1                  5                    5 #>  ---                                                             #> 146:                   3                  6                    7 #> 147:                   2                  6                    7 #> 148:                   2                  6                    7 #> 149:                   3                  6                    7 #> 150:                   2                  5                    6 #>      Sepal.Width.floor Sepal.Width.ceiling #>                  <num>               <num> #>   1:                 3                   4 #>   2:                 3                   3 #>   3:                 3                   4 #>   4:                 3                   4 #>   5:                 3                   4 #>  ---                                       #> 146:                 3                   3 #> 147:                 2                   3 #> 148:                 3                   3 #> 149:                 3                   4 #> 150:                 3                   3"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse Factors — mlr_pipeops_collapsefactors","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"Collapses factors type factor, ordered: Collapses rarest factors training samples, target_level_count levels remain. Levels prevalence strictly no_collapse_above_prevalence absolute count strictly no_collapse_above_absolute retained, however. factor variables, collapsed next larger level, ordered variables, rare variables collapsed neighbouring class, whichever fewer samples. case no_collapse_above_prevalence no_collapse_above_absolute given, less strict threshold two used, .e. no_collapse_above_prevalence 1 no_collapse_above_absolute 10 task 100 samples, levels seen 10 times collapsed. Levels seen training touched prediction; Therefore useful combine PipeOpFixFactors.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"id :: character(1) Identifier resulting object, default \"collapsefactors\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpCollapseFactors$new(id = \"collapsefactors\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"Input output channels inherited PipeOpTaskPreproc. output input Task rare affected factor ordered feature levels collapsed.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : collapse_map :: named list named list character List factor level maps. factor, collapse_map contains named list indicates levels input task get mapped levels output task. collapse_map entry feat_1 entry = c(\"x\", \"y\"), means levels \"x\" \"y\" get collapsed level \"\" feature \"feat_1\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"parameters parameters inherited PipeOpTaskPreproc, well : no_collapse_above_prevalence  :: numeric(1)  Fraction samples factor levels get collapsed. Default 1, causes levels collapsed target_level_count remain. no_collapse_above_absolute  :: integer(1)  Number samples factor levels get collapsed. Default Inf, causes levels collapsed target_level_count remain. target_level_count  :: integer(1)  Number levels retain. Default 2.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"Makes use fact levels(fact_var) = list(target1 = c(\"source1\", \"source2\"), target2 = \"source2\") causes renaming level \"source1\" \"source2\" \"target1\", also \"source2\" \"target2\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_collapsefactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse Factors — mlr_pipeops_collapsefactors","text":"","code":"library(\"mlr3\") op = PipeOpCollapseFactors$new()  # Create example training task df = data.frame(   target = runif(100),   fct = factor(rep(LETTERS[1:6], times = c(25, 30, 5, 15, 5, 20))),   ord = factor(rep(1:6, times = c(20, 25, 30, 5, 5, 15)), ordered = TRUE) ) task = TaskRegr$new(df, target = \"target\", id = \"example_train\")  # Training train_task_collapsed = op$train(list(task))[[1]] train_task_collapsed$levels(c(\"fct\", \"ord\")) #> $fct #> [1] \"A\" \"B\" #>  #> $ord #> [1] \"2\" \"3\" #>   # Create example prediction task df_pred = data.frame(   target = runif(7),   fct = factor(LETTERS[1:7]),   ord = factor(1:7, ordered = TRUE) ) pred_task = TaskRegr$new(df_pred, target = \"target\", id = \"example_pred\")  # Prediction pred_task_collapsed = op$predict(list(pred_task))[[1]] pred_task_collapsed$levels(c(\"fct\", \"ord\")) #> $fct #> [1] \"A\" \"B\" \"G\" #>  #> $ord #> [1] \"2\" \"3\" \"7\" #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Column Roles of a Task — mlr_pipeops_colroles","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"Changes column roles input Task according new_role inverse new_role_direct. Setting new target variable changing role existing target variable supported.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"id :: character(1) Identifier resulting object, default \"colroles\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpColRoles$new(id = \"colroles\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"Input output channels inherited PipeOpTaskPreproc. output input Task transformed column roles according new_role inverse new_role_direct.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"parameters parameters inherited PipeOpTaskPreproc, well : new_role :: named list Named list new column roles column. names must match column names input task later trained/predicted . entry list must contain character vector possible values mlr_reflections$task_col_roles. value given character() NULL, column dropped input task. Changing role column results column loosing previous role(s). new_role_direct :: named list# Named list new column roles role. names must match possible column roles, .e. values mlr_reflections$task_col_roles. entry list must contain character vector column names input task later trained/predicted . value given character() NULL, columns dropped role given element name. value given role overwrites previous entry task$col_roles role, completely.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_colroles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change Column Roles of a Task — mlr_pipeops_colroles","text":"","code":"library(\"mlr3\")  task = tsk(\"penguins\") pop = po(\"colroles\", param_vals = list(   new_role = list(body_mass = c(\"order\", \"feature\")) ))  train_out1 = pop$train(list(task))[[1L]] train_out1$col_roles #> $feature #> [1] \"bill_depth\"     \"bill_length\"    \"flipper_length\" \"island\"         #> [5] \"sex\"            \"year\"           \"body_mass\"      #>  #> $target #> [1] \"species\" #>  #> $name #> character(0) #>  #> $order #> [1] \"body_mass\" #>  #> $stratum #> character(0) #>  #> $group #> character(0) #>  #> $offset #> character(0) #>  #> $weights_learner #> character(0) #>  #> $weights_measure #> character(0) #>   pop$param_set$set_values(  new_role = NULL,  new_role_direct = list(order = character(), group = \"island\") )  train_out2 = pop$train(list(train_out1)) train_out2$col_roles #> NULL"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Input Multiple Times — mlr_pipeops_copy","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"Copies input outnum times. PipeOp usually needed, copying happens automatically one PipeOp followed multiple different PipeOps. However, constructing big Graphs using %>>%-operator, PipeOpCopy can helpful specify PipeOp gets connected .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"outnum :: numeric(1) Number output channels, therefore number copies made. id :: character(1) Identifier resulting object, default \"copy\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpCopy$new(outnum, id = \"copy\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"PipeOpCopy one input channel named \"input\", taking input (\"*\") training prediction. PipeOpCopy multiple output channels depending outnum construction argument, named \"output1\", \"output2\", ... output channels produce object given input (\"*\").","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"PipeOpCopy parameters.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"Note copies clones, reference copies. affects R6-objects: R6 objects copied using PipeOpCopy, must cloned beforehand.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_copy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Input Multiple Times — mlr_pipeops_copy","text":"","code":"# The following copies the output of 'scale' automatically to both # 'pca' and 'nop' po(\"scale\") %>>%   gunion(list(     po(\"pca\"),     po(\"nop\")   )) #> Graph with 3 PipeOps: #>      ID         State sccssors prdcssors #>  <char>        <char>   <char>    <char> #>   scale <<UNTRAINED>>  pca,nop           #>     pca <<UNTRAINED>>              scale #>     nop <<UNTRAINED>>              scale  # The following would not work: the '%>>%'-operator does not know # which output to connect to which input # > gunion(list( # >   po(\"scale\"), # >   po(\"select\") # > )) %>>% # >   gunion(list( # >     po(\"pca\"), # >     po(\"nop\"), # >     po(\"imputemean\") # >   )) # Instead, the 'copy' operator makes clear which output gets copied. gunion(list(   po(\"scale\") %>>% po(\"copy\", outnum = 2),   po(\"select\") )) %>>%   gunion(list(     po(\"pca\"),     po(\"nop\"),     po(\"imputemean\")   )) #> Graph with 6 PipeOps: #>          ID         State   sccssors prdcssors #>      <char>        <char>     <char>    <char> #>       scale <<UNTRAINED>>       copy           #>      select <<UNTRAINED>> imputemean           #>        copy <<UNTRAINED>>    pca,nop     scale #>  imputemean <<UNTRAINED>>               select #>         pca <<UNTRAINED>>                 copy #>         nop <<UNTRAINED>>                 copy"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess Date Features — mlr_pipeops_datefeatures","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"Based POSIXct columns data, set date related features computed added feature set output task. POSIXct column found, original task returned unaltered. functionality based add_datepart() add_cyclic_datepart() functions fastai library. operation particular POSIXct columns requested, use affect_columns parameter inherited PipeOpTaskPreprocSimple. cyclic = TRUE, cyclic features computed features \"month\", \"week_of_year\", \"day_of_year\", \"day_of_month\", \"day_of_week\", \"hour\", \"minute\" \"second\". means feature x, two additional features computed, namely sine cosine transformation 2 * pi * x / max_x (max_x largest possible value feature take + 1, assuming lowest possible value given 0, e.g., hours 0 23, 24). useful respect cyclical nature features seconds, .e., second 21 second 22 one second apart, second 60 second 1 next minute.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"id :: character(1) Identifier resulting object, default \"datefeatures\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpDateFeatures$new(id = \"datefeatures\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"Input output channels inherited PipeOpTaskPreproc. output input Task date-related features computed added feature set output task POSIXct columns data removed feature set (depending value keep_date_var).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"parameters parameters inherited PipeOpTaskPreproc, well : keep_date_var :: logical(1) POSIXct columns kept features? Default FALSE. cyclic :: logical(1) cyclic features computed? See Internals. Default FALSE. year :: logical(1) year extracted feature? Default TRUE. month :: logical(1) month extracted feature? Default TRUE. week_of_year :: logical(1) week year extracted feature? Default TRUE. day_of_year :: logical(1) day year extracted feature? Default TRUE. day_of_month :: logical(1) day month extracted feature? Default TRUE. day_of_week :: logical(1) day week extracted feature? Default TRUE. hour :: logical(1) hour extracted feature? Default TRUE. minute :: logical(1) minute extracted feature? Default TRUE. second :: logical(1) second extracted feature? Default TRUE. is_day :: logical(1) feature extracted indicating whether day time (06:00am - 08:00pm)? Default TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"cyclic feature transformation always assumes values range 0, values (e.g. day month) shifted sine/cosine transform.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_datefeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess Date Features — mlr_pipeops_datefeatures","text":"","code":"library(\"mlr3\") dat = iris set.seed(1) dat$date = sample(seq(as.POSIXct(\"2020-02-01\"), to = as.POSIXct(\"2020-02-29\"), by = \"hour\"),   size = 150L) task = TaskClassif$new(\"iris_date\", backend = dat, target = \"Species\") pop = po(\"datefeatures\", param_vals = list(cyclic = FALSE, minute = FALSE, second = FALSE)) pop$train(list(task)) #> $output #>  #> ── <TaskClassif> (150x13) ────────────────────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (12): #>   • dbl (11): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width, #>   date.day_of_month, date.day_of_week, date.day_of_year, date.hour, date.month, #>   date.week_of_year, date.year #>   • lgl (1): date.is_day #>  pop$state #> $dt_columns #> [1] \"date\" #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  \"date\"         #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #> 5:         date POSIXct #>  #> $outtasklayout #> Key: <id> #>                    id    type #>                <char>  <char> #>  1:      Petal.Length numeric #>  2:       Petal.Width numeric #>  3:      Sepal.Length numeric #>  4:       Sepal.Width numeric #>  5: date.day_of_month numeric #>  6:  date.day_of_week numeric #>  7:  date.day_of_year numeric #>  8:         date.hour numeric #>  9:       date.is_day logical #> 10:        date.month numeric #> 11: date.week_of_year numeric #> 12:         date.year numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 13 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width,date.year... #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Factor Encoding — mlr_pipeops_decode","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"Reverses one-hot treatment encoding columns. collapses multiple numeric integer columns one factor column based pre-specified grouping pattern column names. May applied multiple groups columns, grouped matching common naming pattern. grouping pattern extracted form name newly derived factor column, levels constructed previous column names, parts matching grouping pattern removed (see examples). level per row new factor column generally determined name column maximum value group.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"id :: character(1) Identifier resulting object, default \"decode\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpEncode$new(id = \"decode\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"Input output channels inherited PipeOpTaskPreproc. output input Task encoding columns collapsed new decoded columns.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : colmaps :: named list Named list named character vectors. element named according new column name extracted group_pattern. vector contains level names new factor column created, named corresponding old column name. treatment_encoding TRUE, vector also contains ref_name reference class empty string name. treatment_encoding :: logical(1) Value treatment_encoding hyperparameter. cutoff :: numeric(1) Value treatment_encoding hyperparameter, 0 given. ties_method :: character(1) Value ties_method hyperparameter.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"parameters parameters inherited PipeOpTaskPreproc, well : group_pattern :: character(1) regular expression applied column names. contain capturing group new column name, match everything interpreted new factor levels (constructed difference column names group_pattern matches). set \"\", columns matching group_pattern collapsed one factor column called pipeop.decoded. Use PipeOpRenameColumns rename column. Initialized \"^([^.]+)\\\\.\", extract everything first dot new column name construct new levels everything first dot. treatment_encoding :: logical(1) TRUE, treatment encoding assumed instead one-hot encoding. Initialized FALSE. treatment_cutoff :: numeric(1) treatment_encoding TRUE, specifies cutoff value identifying reference level. reference level set ref_name rows value less equal specified cutoff value (e.g., 0) columns group. Default 0. ref_name :: character(1) treatment_encoding TRUE, specifies name reference levels. Default \"ref\". ties_method :: character(1) Method resolving ties multiple columns value. Specifies value columns value picked. Options \"first\", \"last\", \"random\". Initialized \"random\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_decode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Factor Encoding — mlr_pipeops_decode","text":"","code":"library(\"mlr3\")  # Reverse one-hot encoding df = data.frame(   target = runif(4),   x.1 = rep(c(1, 0), 2),   x.2 = rep(c(0, 1), 2),   y.1 = rep(c(1, 0), 2),   y.2 = rep(c(0, 1), 2),   a = runif(4) ) task_one_hot = TaskRegr$new(id = \"example\", backend = df, target = \"target\")  pop = po(\"decode\")  train_out = pop$train(list(task_one_hot))[[1]] # x.1 and x.2 are collapsed into x, same for y; a is ignored. train_out$data() #>        target          a      x      y #>         <num>      <num> <fctr> <fctr> #> 1: 0.70246251 0.62041003      1      1 #> 2: 0.16502764 0.16957677      2      2 #> 3: 0.06445754 0.06221405      1      1 #> 4: 0.75470562 0.10902927      2      2  # Reverse treatment encoding from PipeOpEncode df = data.frame(   target = runif(6),   fct = factor(rep(c(\"a\", \"b\", \"c\"), 2)) ) task = TaskRegr$new(id = \"example\", backend = df, target = \"target\")  po_enc = po(\"encode\", method = \"treatment\") task_encoded = po_enc$train(list(task))[[1]] task_encoded$data() #>       target fct.b fct.c #>        <num> <num> <num> #> 1: 0.3817164     0     0 #> 2: 0.1693109     1     0 #> 3: 0.2986525     0     1 #> 4: 0.1922095     0     0 #> 5: 0.2571700     1     0 #> 6: 0.1812318     0     1  po_dec = po(\"decode\", treatment_encoding = TRUE) task_decoded = pop$train(list(task))[[1]] # x.1 and x.2 are collapsed into x. All rows where all values # are smaller or equal to 0, the level is set to the reference level. task_decoded$data() #>       target    fct #>        <num> <fctr> #> 1: 0.3817164      a #> 2: 0.1693109      b #> 3: 0.2986525      c #> 4: 0.1922095      a #> 5: 0.2571700      b #> 6: 0.1812318      c  # Different group_pattern df = data.frame(   target = runif(4),   x_1 = rep(c(1, 0), 2),   x_2 = rep(c(0, 1), 2),   y_1 = rep(c(2, 0), 2),   y_2 = rep(c(0, 1), 2) ) task = TaskRegr$new(id = \"example\", backend = df, target = \"target\")  # Grouped by first underscore pop = po(\"decode\", group_pattern = \"^([^_]+)\\\\_\") train_out = pop$train(list(task))[[1]] # x_1 and x_2 are collapsed into x, same for y train_out$data() #>        target      x      y #>         <num> <fctr> <fctr> #> 1: 0.47731371      1      1 #> 2: 0.77073704      2      2 #> 3: 0.02778712      1      1 #> 4: 0.52731078      2      2  # Empty string to collapse all matches into one factor column. pop$param_set$set_values(group_pattern = \"\") train_out = pop$train(list(task))[[1]] # All columns are combined into a single column. # The level for each row is determined by the column with the largest value in that row. # By default, ties are resolved randomly. train_out$data() #>        target pipeop.decoded #>         <num>         <fctr> #> 1: 0.47731371            y_1 #> 2: 0.77073704            x_2 #> 3: 0.02778712            y_1 #> 4: 0.52731078            y_2"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor Encoding — mlr_pipeops_encode","title":"Factor Encoding — mlr_pipeops_encode","text":"Encodes columns type factor ordered. Possible encodings \"one-hot\" encoding, well encoding according stats::contr.helmert(), stats::contr.poly(), stats::contr.sum() stats::contr.treatment(). Newly created columns named via pattern [column-name].[x] x respective factor level \"one-hot\" \"treatment\" encoding, integer sequence otherwise. Use PipeOpTaskPreproc $affect_columns functionality encode subset columns, encode columns certain type. character-type features can encoded converting factor features first, using ppl(\"convert_types\", \"character\", \"factor\").","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Factor Encoding — mlr_pipeops_encode","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Factor Encoding — mlr_pipeops_encode","text":"id :: character(1) Identifier resulting object, default \"encode\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpEncode$new(id = \"encode\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Factor Encoding — mlr_pipeops_encode","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected factor ordered columns encoded according method parameter.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Factor Encoding — mlr_pipeops_encode","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : constrasts :: named list matrix List contrast matrices, one affected discrete feature. rows matrix correspond (training task) levels, columns new columns replace old discrete feature. See stats::contrasts.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Factor Encoding — mlr_pipeops_encode","text":"parameters parameters inherited PipeOpTaskPreproc, well : method  :: character(1)  Initialized \"one-hot\". One : \"one-hot\": create new column factor level. \"treatment\": create \\(n-1\\) columns leaving first factor level factor variable (see stats::contr.treatment()). \"helmert\": create columns according Helmert contrasts (see stats::contr.helmert()). \"poly\": create columns contrasts based orthogonal polynomials (see stats::contr.poly()). \"sum\": create columns contrasts summing zero, (see stats::contr.sum()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Factor Encoding — mlr_pipeops_encode","text":"Uses stats::contrasts functions. relatively inefficient features large number levels.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Factor Encoding — mlr_pipeops_encode","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Factor Encoding — mlr_pipeops_encode","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor Encoding — mlr_pipeops_encode","text":"","code":"library(\"mlr3\")  data = data.table::data.table(x = factor(letters[1:3]), y = factor(letters[1:3])) task = TaskClassif$new(\"task\", data, \"x\")  poe = po(\"encode\")  # poe is initialized with encoding: \"one-hot\" poe$train(list(task))[[1]]$data() #>         x   y.a   y.b   y.c #>    <fctr> <num> <num> <num> #> 1:      a     1     0     0 #> 2:      b     0     1     0 #> 3:      c     0     0     1  # other kinds of encoding: poe$param_set$values$method = \"treatment\" poe$train(list(task))[[1]]$data() #>         x   y.b   y.c #>    <fctr> <num> <num> #> 1:      a     0     0 #> 2:      b     1     0 #> 3:      c     0     1  poe$param_set$values$method = \"helmert\" poe$train(list(task))[[1]]$data() #>         x   y.1   y.2 #>    <fctr> <num> <num> #> 1:      a    -1    -1 #> 2:      b     1    -1 #> 3:      c     0     2  poe$param_set$values$method = \"poly\" poe$train(list(task))[[1]]$data() #>         x           y.1        y.2 #>    <fctr>         <num>      <num> #> 1:      a -7.071068e-01  0.4082483 #> 2:      b -7.850462e-17 -0.8164966 #> 3:      c  7.071068e-01  0.4082483  poe$param_set$values$method = \"sum\" poe$train(list(task))[[1]]$data() #>         x   y.1   y.2 #>    <fctr> <num> <num> #> 1:      a     1     0 #> 2:      b     0     1 #> 3:      c    -1    -1  # converting character-columns data_chr = data.table::data.table(x = factor(letters[1:3]), y = letters[1:3]) task_chr = TaskClassif$new(\"task_chr\", data_chr, \"x\")  goe = ppl(\"convert_types\", \"character\", \"factor\") %>>% po(\"encode\")  goe$train(task_chr)[[1]]$data() #>         x   y.a   y.b   y.c #>    <fctr> <num> <num> <num> #> 1:      a     1     0     0 #> 2:      b     0     1     0 #> 3:      c     0     0     1"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"Encodes columns type factor, character ordered. Impact coding classification Tasks converts factor levels (factorial) column difference target level's conditional log-likelihood given level, target level's global log-likelihood. Impact coding regression Tasks converts factor levels (factorial) column difference target's conditional mean given level, target's global mean. Treats new levels prediction like missing values.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"id :: character(1) Identifier resulting object, default \"encodeimpact\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpEncodeImpact$new(id = \"encodeimpact\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskSupervised used input output training prediction. output input Task affected factor, character ordered parameters encoded.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : impact :: named list list element affected feature: regression element single column matrix impact values level feature. classification, list element feature level, vector giving impact feature level outcome level.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"parameters parameters inherited PipeOpTaskPreproc, well : smoothing  :: numeric(1)  finite positive value used smoothing. Mostly relevant classification Tasks factor coincide target factor level (otherwise give infinite logit value). Initialized 1e-4. impute_zero :: logical(1) TRUE, impute missing values impact 0; otherwise respective impact coded NA. Default FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"Uses Laplace smoothing, mostly avoid infinite values classification Task.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeimpact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Target Value Impact Encoding — mlr_pipeops_encodeimpact","text":"","code":"library(\"mlr3\") poe = po(\"encodeimpact\")  task = TaskClassif$new(\"task\",   data.table::data.table(     x = factor(c(\"a\", \"a\", \"a\", \"b\", \"b\")),     y = factor(c(\"a\", \"a\", \"b\", \"b\", \"b\"))),   \"x\")  poe$train(list(task))[[1]]$data() #>         x       y.a       y.b #>    <fctr>     <num>     <num> #> 1:      a  9.498089 -9.498089 #> 2:      a  9.498089 -9.498089 #> 3:      a -1.098546  1.098546 #> 4:      b -1.098546  1.098546 #> 5:      b -1.098546  1.098546  poe$state #> $impact #> $impact$y #>                       a         b #> a              9.498089 -9.498089 #> b             -1.098546  1.098546 #> .TEMP.MISSING        NA        NA #>  #>  #> $dt_columns #> [1] \"y\" #>  #> $affected_cols #> [1] \"y\" #>  #> $intasklayout #> Key: <id> #>        id   type #>    <char> <char> #> 1:      y factor #>  #> $outtasklayout #> Key: <id> #>        id    type #>    <char>  <char> #> 1:    y.a numeric #> 2:    y.b numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 3 cols): x,y.a,y.b #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"Encodes columns type factor, character ordered. PipeOpEncodeLmer converts factor levels factorial column estimated coefficients simple random intercept model. Models fitted glmer function lme4 package type target ~ 1 + (1 | factor). task regression task, numeric target variable used dependent variable factor used grouping. task classification task, target variable used dependent variable factor used grouping. target variable multiclass, level multiclass target variable, binary \"one vs. rest\" models fitted. training, multiple models can estimated cross-validation scheme ensure factor level always result identical values converted numerical feature. prediction, global model (fitted observations training) used factor. New factor levels converted value intercept coefficient global model prediction. NAs ignored CPO. Use PipeOpTaskPreproc $affect_columns functionality encode subset columns, encode columns certain type.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"id :: character(1) Identifier resulting object, default \"encodelmer\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpEncodeLmer$new(id = \"encodelmer\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskSupervised used input output training prediction. output input Task affected factor, character ordered parameters encoded according method parameter.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : target_levels :: character Levels target columns. control :: named list List coefficients learned via glmer.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"parameters parameters inherited PipeOpTaskPreproc, well : fast_optim  :: logical(1)  fast_optim TRUE (default), faster (50 percent) optimizer nloptr package used fitting lmer models. uses additional stopping criteria can give suboptimal results. Initialized TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"Uses lme4::glmer. relatively inefficient features large number levels.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodelmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impact Encoding with Random Intercept Models — mlr_pipeops_encodelmer","text":"","code":"library(\"mlr3\") poe = po(\"encodelmer\")  task = TaskClassif$new(\"task\",   data.table::data.table(     x = factor(c(\"a\", \"a\", \"a\", \"b\", \"b\")),     y = factor(c(\"a\", \"a\", \"b\", \"b\", \"b\"))),   \"x\")  poe$train(list(task))[[1]]$data() #>         x          y #>    <fctr>      <num> #> 1:      a -0.5525584 #> 2:      a -0.5525584 #> 3:      a -0.3310264 #> 4:      b -0.3310264 #> 5:      b -0.3310264  poe$state #> $target_levels #> [1] \"a\" \"b\" #>  #> $control #> $control$y #>              a              b ..new..level..  #>     -0.5525584     -0.3310264     -0.4429541  #>  #>  #> $dt_columns #> [1] \"y\" #>  #> $affected_cols #> [1] \"y\" #>  #> $intasklayout #> Key: <id> #>        id   type #>    <char> <char> #> 1:      y factor #>  #> $outtasklayout #> Key: <id> #>        id    type #>    <char>  <char> #> 1:      y numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 2 cols): x,y #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"Encodes numeric integer feature columns using piecewise lienar encoding. details, see documentation PipeOpEncodePL Gorishniy et al. (2022). Bins constructed taking quantiles respective feature column bin boundaries. first last boundaries set minimum maximum value feature, respectively. number bins can controlled numsplits hyperparameter. Affected feature columns may contain NAs. ignored calculating quantiles.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"R6Class object inheriting PipeOpEncodePL/PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"id :: character(1) Identifier resulting object, default \"encodeplquantiles\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpEncodePLQuantiles$new(id = \"encodeplquantiles\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric integer columns encoded using piecewise linear encoding bins derived quantiles respective original feature column.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"$state named list $state elements inherited PipeOpEncodePL/PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"parameters parameters inherited PipeOpTaskPreproc, well : numsplits :: integer(1)  Number bins create. Initialized 2. type :: integer(1) Method used calculate sample quantiles. See help stats::quantile. Default 7.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"overloads private$.get_bins() method PipeOpEncodePL uses stats::quantile function derive bins used piecewise linear encoding.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"methods inherited PipeOpEncodePL/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"Gorishniy Y, Rubachev , Babenko (2022). “Embeddings Numerical Features Tabular Deep Learning.” Advances Neural Information Processing Systems, volume 35, 24991–25004. https://proceedings.neurips.cc/paper_files/paper/2022/hash/9e9f0ffc3d836836ca96cbf8fe14b105-Abstract-Conference.html.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodeplquantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piecewise Linear Encoding using Quantiles — mlr_pipeops_encodeplquantiles","text":"","code":"library(mlr3)  task = tsk(\"iris\")$select(c(\"Petal.Width\", \"Petal.Length\")) pop = po(\"encodeplquantiles\")  train_out = pop$train(list(task))[[1L]] # Calculated bin boundaries per feature pop$state$bins #> $Petal.Length #> [1] 1.00 4.35 6.90 #>  #> $Petal.Width #> [1] 0.1 1.3 2.5 #>  # Each feature was split into two encoded features using piecewise linear encoding train_out$head() #>    Species Petal.Length.bin1 Petal.Length.bin2 Petal.Width.bin1 #>     <fctr>             <num>             <num>            <num> #> 1:  setosa        0.11940299                 0       0.08333333 #> 2:  setosa        0.11940299                 0       0.08333333 #> 3:  setosa        0.08955224                 0       0.08333333 #> 4:  setosa        0.14925373                 0       0.08333333 #> 5:  setosa        0.11940299                 0       0.08333333 #> 6:  setosa        0.20895522                 0       0.25000000 #>    Petal.Width.bin2 #>               <num> #> 1:                0 #> 2:                0 #> 3:                0 #> 4:                0 #> 5:                0 #> 6:                0  # Prediction works the same as training, using the bins learned during training predict_out = pop$predict(list(task))[[1L]] predict_out$head() #>    Species Petal.Length.bin1 Petal.Length.bin2 Petal.Width.bin1 #>     <fctr>             <num>             <num>            <num> #> 1:  setosa        0.11940299                 0       0.08333333 #> 2:  setosa        0.11940299                 0       0.08333333 #> 3:  setosa        0.08955224                 0       0.08333333 #> 4:  setosa        0.14925373                 0       0.08333333 #> 5:  setosa        0.11940299                 0       0.08333333 #> 6:  setosa        0.20895522                 0       0.25000000 #>    Petal.Width.bin2 #>               <num> #> 1:                0 #> 2:                0 #> 3:                0 #> 4:                0 #> 5:                0 #> 6:                0  # Binning into three bins per feature # Using the nearest even order statistic for caluclating quantiles pop$param_set$set_values(numsplits = 4, type = 3)  train_out = pop$train(list(task))[[1L]] # Calculated bin boundaries per feature pop$state$bins #> $Petal.Length #> [1] 1.0 1.6 4.3 5.1 6.9 #>  #> $Petal.Width #> [1] 0.1 0.3 1.3 1.8 2.5 #>  # Each feature was split into three encoded features using # piecewise linear encoding train_out$head() #>    Species Petal.Length.bin1 Petal.Length.bin2 Petal.Length.bin3 #>     <fctr>             <num>             <num>             <num> #> 1:  setosa         0.6666667        0.00000000                 0 #> 2:  setosa         0.6666667        0.00000000                 0 #> 3:  setosa         0.5000000        0.00000000                 0 #> 4:  setosa         0.8333333        0.00000000                 0 #> 5:  setosa         0.6666667        0.00000000                 0 #> 6:  setosa         1.0000000        0.03703704                 0 #>    Petal.Length.bin4 Petal.Width.bin1 Petal.Width.bin2 Petal.Width.bin3 #>                <num>            <num>            <num>            <num> #> 1:                 0              0.5              0.0                0 #> 2:                 0              0.5              0.0                0 #> 3:                 0              0.5              0.0                0 #> 4:                 0              0.5              0.0                0 #> 5:                 0              0.5              0.0                0 #> 6:                 0              1.0              0.1                0 #>    Petal.Width.bin4 #>               <num> #> 1:                0 #> 2:                0 #> 3:                0 #> 4:                0 #> 5:                0 #> 6:                0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"Encodes numeric integer feature columns using piecewise lienar encoding. details, see documentation PipeOpEncodePL Gorishniy et al. (2022). Bins constructed trainig one decision tree Learner per feature column, taking target column account, using decision boundaries bin boundaries.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"R6Class object inheriting PipeOpEncodePL/PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"task_type :: character(1) class Task accepted input, given character(1). used construct appropriate Learner used obtaining bins piecewise linear encoding. Supported options \"TaskClassif\"LearnerClassifRpart \"TaskRegr\"LearnerRegrRpart. id :: character(1) Identifier resulting object, default \"encodeplquantiles\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpEncodePLTree$new(task_type, id = \"encodepltree\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif TaskRegr used input output training prediction, depending task_type construction argument. output input Task affected numeric integer columns encoded using piecewise linear encoding bins derived decision tree Learner trained respective feature column.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"$state named list $state elements inherited PipeOpEncodePL/PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"parameters parameters inherited PipeOpTaskPreproc, well parameters Learner used obtaining bins piecewise linear encoding.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"overloads private$.get_bins() method PipeOpEncodePL. derive bins feature, Task split smaller Tasks target respective feature columns. Tasks either LearnerClassifRpart LearnerRegrRpart gets trained respective splits extracted bin boundaries used piecewise linear encodings.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"methods inherited PipeOpEncodePL/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"Gorishniy Y, Rubachev , Babenko (2022). “Embeddings Numerical Features Tabular Deep Learning.” Advances Neural Information Processing Systems, volume 35, 24991–25004. https://proceedings.neurips.cc/paper_files/paper/2022/hash/9e9f0ffc3d836836ca96cbf8fe14b105-Abstract-Conference.html.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_encodepltree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piecewise Linear Encoding using Decision Trees — mlr_pipeops_encodepltree","text":"","code":"library(mlr3)  # For classification task task = tsk(\"iris\")$select(c(\"Petal.Width\", \"Petal.Length\")) pop = po(\"encodepltree\", task_type = \"TaskClassif\") train_out = pop$train(list(task))[[1L]]  # Calculated bin boundaries per feature pop$state$bins #> $Petal.Length #> [1] 1.00 2.45 4.75 6.90 #>  #> $Petal.Width #> [1] 0.10 0.80 1.75 2.50 #>  # Each feature was split into three encoded features using piecewise linear encoding train_out$head() #>    Species Petal.Length.bin1 Petal.Length.bin2 Petal.Length.bin3 #>     <fctr>             <num>             <num>             <num> #> 1:  setosa         0.2758621                 0                 0 #> 2:  setosa         0.2758621                 0                 0 #> 3:  setosa         0.2068966                 0                 0 #> 4:  setosa         0.3448276                 0                 0 #> 5:  setosa         0.2758621                 0                 0 #> 6:  setosa         0.4827586                 0                 0 #>    Petal.Width.bin1 Petal.Width.bin2 Petal.Width.bin3 #>               <num>            <num>            <num> #> 1:        0.1428571                0                0 #> 2:        0.1428571                0                0 #> 3:        0.1428571                0                0 #> 4:        0.1428571                0                0 #> 5:        0.1428571                0                0 #> 6:        0.4285714                0                0  # Prediction works the same as training, using the bins learned during training predict_out = pop$predict(list(task))[[1L]] predict_out$head() #>    Species Petal.Length.bin1 Petal.Length.bin2 Petal.Length.bin3 #>     <fctr>             <num>             <num>             <num> #> 1:  setosa         0.2758621                 0                 0 #> 2:  setosa         0.2758621                 0                 0 #> 3:  setosa         0.2068966                 0                 0 #> 4:  setosa         0.3448276                 0                 0 #> 5:  setosa         0.2758621                 0                 0 #> 6:  setosa         0.4827586                 0                 0 #>    Petal.Width.bin1 Petal.Width.bin2 Petal.Width.bin3 #>               <num>            <num>            <num> #> 1:        0.1428571                0                0 #> 2:        0.1428571                0                0 #> 3:        0.1428571                0                0 #> 4:        0.1428571                0                0 #> 5:        0.1428571                0                0 #> 6:        0.4285714                0                0  # Controlling behavior of the tree learner, here: setting minimum number of # observations per node for a split to be attempted pop$param_set$set_values(minsplit = 5)  train_out = pop$train(list(task))[[1L]] # feature \"hp\" now gets split into five encoded features instead of three pop$state$bins #> $Petal.Length #> [1] 1.00 2.45 4.75 6.90 #>  #> $Petal.Width #> [1] 0.10 0.80 1.75 2.50 #>  train_out$head() #>    Species Petal.Length.bin1 Petal.Length.bin2 Petal.Length.bin3 #>     <fctr>             <num>             <num>             <num> #> 1:  setosa         0.2758621                 0                 0 #> 2:  setosa         0.2758621                 0                 0 #> 3:  setosa         0.2068966                 0                 0 #> 4:  setosa         0.3448276                 0                 0 #> 5:  setosa         0.2758621                 0                 0 #> 6:  setosa         0.4827586                 0                 0 #>    Petal.Width.bin1 Petal.Width.bin2 Petal.Width.bin3 #>               <num>            <num>            <num> #> 1:        0.1428571                0                0 #> 2:        0.1428571                0                0 #> 3:        0.1428571                0                0 #> 4:        0.1428571                0                0 #> 5:        0.1428571                0                0 #> 6:        0.4285714                0                0  # For regression task task = tsk(\"mtcars\")$select(c(\"cyl\", \"hp\")) pop = po(\"encodepltree\", task_type = \"TaskRegr\") train_out = pop$train(list(task))[[1L]]  # Calculated bin boundaries per feature pop$state$bins #> $cyl #> [1] 4 5 7 8 #>  #> $hp #> [1]  52 118 335 #>  # First feature was split into three encoded features, # second into two, using piecewise linear encoding train_out$head() #>      mpg cyl.bin1 cyl.bin2 cyl.bin3   hp.bin1   hp.bin2 #>    <num>    <num>    <num>    <num>     <num>     <num> #> 1:  21.0        1      0.5        0 0.8787879 0.0000000 #> 2:  21.0        1      0.5        0 0.8787879 0.0000000 #> 3:  22.8        0      0.0        0 0.6212121 0.0000000 #> 4:  21.4        1      0.5        0 0.8787879 0.0000000 #> 5:  18.7        1      1.0        1 1.0000000 0.2626728 #> 6:  18.1        1      0.5        0 0.8030303 0.0000000"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"Aggregates features input tasks cbind()ing together single Task. DataBackend primary keys Task targets equal across Tasks. target column(s) first Task kept. assert_targets_equal TRUE target column names compared error thrown differ across inputs. input tasks share feature names features identical error thrown. check performed first comparing features names duplicates found, also values possibly duplicated features. True duplicated features added single time output task.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"innum :: numeric(1) | character Determines number input channels. innum 0 (default), vararg input channel created can take arbitrary number inputs. innum character vector, number input channels length innum, columns result prefixed values. collect_multiplicity :: logical(1) TRUE, input Multiplicity collecting channel. means, Multiplicity input, instead multiple normal inputs, accepted members aggregated. requires innum 0. Default FALSE. id :: character(1) Identifier resulting object, default \"featureunion\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list(). assert_targets_equal :: logical(1) assert_targets_equal TRUE (Default), task target column names checked agreement. Disagreeing target column names usually bug, often left default.","code":"PipeOpFeatureUnion$new(innum = 0, collect_multiplicity = FALSE, id = \"featureunion\", param_vals = list(),   assert_targets_equal = TRUE)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"PipeOpFeatureUnion multiple input channels depending innum construction argument, named \"input1\", \"input2\", ... innum nonzero; innum 0, one vararg input channel named \"...\". input channels take Task training prediction. PipeOpFeatureUnion one output channel named \"output\", producing Task training prediction. output Task constructed cbind()ing features input Tasks, training prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"PipeOpFeatureUnion Parameters.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"PipeOpFeatureUnion uses Task $cbind() method bind input values beyond first input first Task. means Tasks database-backed, except first fetched R memory . behaviour may change future.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_featureunion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Features from Multiple Inputs — mlr_pipeops_featureunion","text":"","code":"library(\"mlr3\")  task1 = tsk(\"iris\") gr = gunion(list(   po(\"nop\"),   po(\"pca\") )) %>>% po(\"featureunion\")  gr$train(task1) #> $featureunion.output #>  #> ── <TaskClassif> (150x9): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (8): #>   • dbl (8): PC1, PC2, PC3, PC4, Petal.Length, Petal.Width, Sepal.Length, #>   Sepal.Width #>   task2 = tsk(\"iris\") task3 = tsk(\"iris\") po = po(\"featureunion\", innum = c(\"a\", \"b\"))  po$train(list(task2, task3)) #> $output #>  #> ── <TaskClassif> (150x9): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (8): #>   • dbl (8): a.Petal.Length, a.Petal.Width, a.Sepal.Length, a.Sepal.Width, #>   b.Petal.Length, b.Petal.Width, b.Sepal.Length, b.Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Filtering — mlr_pipeops_filter","title":"Feature Filtering — mlr_pipeops_filter","text":"Feature filtering using mlr3filters::Filter object, see mlr3filters package. Filter can operate subset columns based column type, features considered filtered. nfeat frac count features type Filter can operate ; means e.g. setting nfeat 0 remove features type Filter can work .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Feature Filtering — mlr_pipeops_filter","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Feature Filtering — mlr_pipeops_filter","text":"filter :: FilterFilter used feature filtering. argument always cloned; access Filter inside PipeOpFilter -reference, use $filter. id :: character(1) Identifier resulting  object, defaulting id Filter used. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpFilter$new(filter, id = filter$id, param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Feature Filtering — mlr_pipeops_filter","text":"Input output channels inherited PipeOpTaskPreproc. output input Task features removed filtered .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Feature Filtering — mlr_pipeops_filter","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : scores :: named numeric Scores calculated features training Task used cutoff feature filtering. frac nfeat given, underlying Filter may choose calculate scores features given. includes features Filter can operate; e.g. Filter can operate numeric features, scores factorial features given. features :: character Names features kept. Features types Filter can operate always kept.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Feature Filtering — mlr_pipeops_filter","text":"parameters parameters inherited PipeOpTaskPreproc, well parameters Filter used object. Besides, parameters introduced : filter.nfeat :: numeric(1)  Number features select. Mutually exclusive frac, cutoff, permuted. filter.frac :: numeric(1)  Fraction features keep. Mutually exclusive nfeat, cutoff, permuted. filter.cutoff :: numeric(1)  Minimum value filter heuristic keep features. Mutually exclusive nfeat, frac, permuted. filter.permuted :: integer(1)  parameter set, random permutation feature added task applying filter. features selected permuted-th permuted features selected kept. similar approach Wu (2007) Thomas (2017). Mutually exclusive nfeat, frac, cutoff. Note least one filter.nfeat, filter.frac, filter.cutoff, filter.permuted must given.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Feature Filtering — mlr_pipeops_filter","text":"use $.select_cols feature PipeOpTaskPreproc select features compatible Filter; instead whole Task used private$.get_state() subset internally.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Feature Filtering — mlr_pipeops_filter","text":"Fields inherited PipeOp, well : filter :: FilterFilter used feature filtering. use slot get feature filtering scores training; instead, use $state$scores. Read-.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Filtering — mlr_pipeops_filter","text":"Methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Feature Filtering — mlr_pipeops_filter","text":"Wu Y, Boos DD, Stefanski LA (2007). “Controlling Variable Selection Addition Pseudovariables.” Journal American Statistical Association, 102(477), 235–243. doi:10.1198/016214506000000843 . Thomas J, Hepp T, Mayr , Bischl B (2017). “Probing Sparse Fast Variable Selection Model-Based Boosting.” Computational Mathematical Methods Medicine, 2017, 1–8. doi:10.1155/2017/1421409 .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature Filtering — mlr_pipeops_filter","text":"","code":"library(\"mlr3\") library(\"mlr3filters\")  # setup PipeOpFilter to keep the 5 most important # features of the spam task w.r.t. their AUC task = tsk(\"spam\") filter = flt(\"auc\") po = po(\"filter\", filter = filter) po$param_set #> <ParamSetCollection(5)> #>                 id    class lower upper nlevels        default  value #>             <char>   <char> <num> <num>   <num>         <list> <list> #> 1:    filter.nfeat ParamInt     0   Inf     Inf <NoDefault[0]> [NULL] #> 2:     filter.frac ParamDbl     0     1     Inf <NoDefault[0]> [NULL] #> 3:   filter.cutoff ParamDbl  -Inf   Inf     Inf <NoDefault[0]> [NULL] #> 4: filter.permuted ParamInt     1   Inf     Inf <NoDefault[0]> [NULL] #> 5:  affect_columns ParamUty    NA    NA     Inf  <Selector[1]> [NULL] po$param_set$values$filter.nfeat = 5  # filter the task filtered_task = po$train(list(task))[[1]]  # filtered task + extracted AUC scores filtered_task$feature_names #> [1] \"capitalAve\"      \"capitalLong\"     \"charDollar\"      \"charExclamation\" #> [5] \"your\"            head(po$state$scores, 10) #> charExclamation     capitalLong      capitalAve            your      charDollar  #>       0.3290461       0.3041626       0.2882004       0.2801659       0.2721394  #>    capitalTotal            free             our             you          remove  #>       0.2622801       0.2327285       0.2109325       0.2104681       0.2031303   # feature selection embedded in a 3-fold cross validation # keep 30% of features based on their AUC score task = tsk(\"spam\") gr = po(\"filter\", filter = flt(\"auc\"), filter.frac = 0.5) %>>%   po(\"learner\", lrn(\"classif.rpart\")) learner = GraphLearner$new(gr) rr = resample(task, learner, rsmp(\"holdout\"), store_models = TRUE) rr$learners[[1]]$model$auc$scores #>   charExclamation       capitalLong        capitalAve              your  #>       0.328759080       0.306751518       0.288703808       0.279083484  #>        charDollar      capitalTotal              free               you  #>       0.273296589       0.263313380       0.230684960       0.215739152  #>               our            remove             money                hp  #>       0.213188551       0.204291119       0.179973626       0.176336364  #>               all            num000          business              over  #>       0.176079754       0.157094167       0.149369524       0.140389728  #>              mail            george               hpl          internet  #>       0.136271572       0.135293399       0.133370707       0.131148231  #>           receive             email           address             order  #>       0.129122806       0.127931640       0.127513404       0.113377057  #>              make           num1999          charHash            credit  #>       0.106704315       0.102212867       0.101519423       0.096648263  #>            people              will         addresses              labs  #>       0.090943952       0.089247316       0.073828362       0.073427396  #>            num650             num85               edu               lab  #>       0.068441105       0.067097612       0.062289775       0.060257929  #>        technology            telnet           meeting              data  #>       0.054653251       0.052352619       0.052065676       0.048215864  #>                pm            report           project            num857  #>       0.041177580       0.038103133       0.037171012       0.034819678  #> charSquarebracket            num415          original        conference  #>       0.033739215       0.032761485       0.029735304       0.024965106  #>     charSemicolon                cs              font                re  #>       0.024724216       0.024623477       0.023837706       0.023239245  #>  charRoundbracket            direct             num3d             table  #>       0.020505763       0.012178452       0.008840974       0.005753906  #>             parts  #>       0.001509991"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix Factor Levels — mlr_pipeops_fixfactors","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"Fixes factors type factor, ordered: Makes sure factor levels prediction training; possibly dropping empty training factor levels . Note may introduce missing values prediction unseen factor levels found.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"id :: character(1) Identifier resulting object, default \"fixfactors\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpFixFactors$new(id = \"fixfactors\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected factor ordered feature levels fixed.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : levels :: named list character List factor levels affected factor ordered feature fixed.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"parameters parameters inherited PipeOpTaskPreproc, well : droplevels  :: logical(1)  Whether drop empty factor levels training task. Default TRUE","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"Changes factor levels columns attaches new data.table backend virtual cbind() backend.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_fixfactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix Factor Levels — mlr_pipeops_fixfactors","text":"","code":"library(\"mlr3\")"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"Splits numeric features equally spaced bins. See graphics::hist() details. Values fall training data range prediction binned lowest / highest bin respectively.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"id :: character(1) Identifier resulting object, default \"histbin\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpHistBin$new(id = \"histbin\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric features replaced binned versions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : breaks :: list  List intervals representing bins numeric feature.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"parameters parameters inherited PipeOpTaskPreproc, well : breaks :: character(1) | numeric | function  Either character(1) string naming algorithm compute number cells, numeric(1) giving number breaks histogram, vector numeric giving breakpoints histogram cells, function compute vector breakpoints compute number cells. Default algorithm \"Sturges\" (see grDevices::nclass.Sturges()). details see hist().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"Uses graphics::hist function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_histbin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Numeric Features into Equally Spaced Bins — mlr_pipeops_histbin","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"histbin\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <ord>       <ord>        <ord>       <ord> #>   1:    setosa   [-Inf,1.5]  [-Inf,0.2]      (5,5.5]   (3.4,3.6] #>   2:    setosa   [-Inf,1.5]  [-Inf,0.2]      (4.5,5]     (2.8,3] #>   3:    setosa   [-Inf,1.5]  [-Inf,0.2]      (4.5,5]     (3,3.2] #>   4:    setosa   [-Inf,1.5]  [-Inf,0.2]      (4.5,5]     (3,3.2] #>   5:    setosa   [-Inf,1.5]  [-Inf,0.2]      (4.5,5]   (3.4,3.6] #>  ---                                                             #> 146: virginica      (5,5.5]   (2.2,2.4]      (6.5,7]     (2.8,3] #> 147: virginica      (4.5,5]     (1.8,2]      (6,6.5]   (2.4,2.6] #> 148: virginica      (5,5.5]     (1.8,2]      (6,6.5]     (2.8,3] #> 149: virginica      (5,5.5]   (2.2,2.4]      (6,6.5]   (3.2,3.4] #> 150: virginica      (5,5.5]   (1.6,1.8]      (5.5,6]     (2.8,3]  pop$state #> $breaks #> $breaks[[1]] #>  [1] -Inf  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  Inf #>  #> $breaks[[2]] #>  [1] -Inf  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6  1.8  2.0  2.2  2.4  Inf #>  #> $breaks[[3]] #> [1] -Inf  4.5  5.0  5.5  6.0  6.5  7.0  7.5  Inf #>  #> $breaks[[4]] #>  [1] -Inf  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6  3.8  4.0  4.2  Inf #>  #>  #> $dt_columns #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length ordered #> 2:  Petal.Width ordered #> 3: Sepal.Length ordered #> 4:  Sepal.Width ordered #>  #> $outtaskshell #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":null,"dir":"Reference","previous_headings":"","what":"Independent Component Analysis — mlr_pipeops_ica","title":"Independent Component Analysis — mlr_pipeops_ica","text":"Extracts statistically independent components data. affects numerical features. See fastICA::fastICA details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Independent Component Analysis — mlr_pipeops_ica","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Independent Component Analysis — mlr_pipeops_ica","text":"id :: character(1) Identifier resulting object, default \"ica\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpICA$new(id = \"ica\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Independent Component Analysis — mlr_pipeops_ica","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric parameters replaced independent components.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Independent Component Analysis — mlr_pipeops_ica","text":"$state named list $state elements inherited PipeOpTaskPreproc, well elements function fastICA::fastICA(), exception $X $S slots. particular: K :: matrix Matrix projects data onto first n.comp principal components. See fastICA(). W :: matrix Estimated un-mixing matrix. See fastICA(). :: matrix Estimated mixing matrix. See fastICA(). center :: numeric mean numeric feature training.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Independent Component Analysis — mlr_pipeops_ica","text":"parameters parameters inherited PipeOpTaskPreproc, well following parameters based fastICA(): n.comp :: numeric(1) Number components extract. Default NULL, sets number available numeric columns. alg.typ:: character(1) Algorithm type. One \"parallel\" (default) \"deflation\". fun :: character(1) One \"logcosh\" (default) \"exp\". alpha :: numeric(1) range [1, 2], Used negentropy calculation fun \"logcosh\". Default 1.0. method :: character(1) Internal calculation method. \"C\" (default) \"R\". See fastICA(). row.norm :: logical(1) Logical value indicating whether rows standardized beforehand. Default FALSE. maxit :: numeric(1) Maximum number iterations. Default 200. tol :: numeric(1) Tolerance convergence, default 1e-4. verbose logical(1) Logical value indicating level output run algorithm. Default FALSE. w.init:: matrix Initial un-mixing matrix. See fastICA(). Default NULL.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Independent Component Analysis — mlr_pipeops_ica","text":"Uses fastICA() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Independent Component Analysis — mlr_pipeops_ica","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Independent Component Analysis — mlr_pipeops_ica","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ica.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Independent Component Analysis — mlr_pipeops_ica","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"ica\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species          V1          V2         V3         V4 #>         <fctr>       <num>       <num>      <num>      <num> #>   1:    setosa  0.37500059  0.02943659  1.3924519 -0.2614936 #>   2:    setosa -0.97225996 -0.08167029  1.3294610 -0.3857646 #>   3:    setosa -0.34913589 -0.15929558  1.3492190  0.3572738 #>   4:    setosa -0.38004875  0.31177235  1.2048972  0.8805817 #>   5:    setosa  0.73635117  0.10791837  1.3728500  0.2002559 #>  ---                                                         #> 146: virginica -0.31596226 -2.59266317 -0.8292284 -1.2709946 #> 147: virginica -1.36041153 -1.05409554 -0.7570305 -0.7271920 #> 148: virginica  0.09333273 -0.98343101 -0.8277795 -0.3432144 #> 149: virginica  1.39423603 -1.76937234 -1.0485595  1.2489928 #> 150: virginica  0.57294721  0.04233626 -0.8751853  1.5511628  pop$state #> $K #>            [,1]       [,2]       [,3]      [,4] #> [1,] -0.4180098  0.3531217  0.2735163  3.118456 #> [2,] -0.1748261  0.1537381  1.9583093 -4.897992 #> [3,] -0.1763375 -1.3373258 -2.0881803 -2.050340 #> [4,]  0.0412425 -1.4871770  2.1451574  2.077869 #>  #> $W #>             [,1]         [,2]        [,3]      [,4] #> [1,] -0.06938934 -0.012593052  0.98684804 0.1454561 #> [2,] -0.79805659  0.003084436 -0.14237669 0.5855126 #> [3,]  0.47946944 -0.596461056 -0.06824042 0.6400676 #> [4,]  0.35832924  0.802537295 -0.03468520 0.4757426 #>  #> $A #>             [,1]        [,2]        [,3]        [,4] #> [1,]  0.09053775  0.05276721  0.21348058  0.37160785 #> [2,]  0.06895140 -0.17444975  0.06613582 -0.06320762 #> [3,] -1.74870327 -0.73625778 -0.67223450  0.20890405 #> [4,] -0.15680615 -0.04289852 -0.42340889 -0.05462953 #>  #> $center #> Petal.Length  Petal.Width Sepal.Length  Sepal.Width  #>     3.758000     1.199333     5.843333     3.057333  #>  #> $dt_columns #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>        id    type #>    <char>  <char> #> 1:     V1 numeric #> 2:     V2 numeric #> 3:     V3 numeric #> 4:     V4 numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 5 cols): Species,V1,V2,V3,V4 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Features by a Constant — mlr_pipeops_imputeconstant","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"Impute features constant value.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"R6Class object inheriting PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"id :: character(1) Identifier resulting object, default \"imputeconstant\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpImputeConstant$new(id = \"imputeconstant\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"Input output channels inherited PipeOpImpute. output input Task affected features missing values imputed value constant parameter.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"$state named list $state elements inherited PipeOpImpute. $state$model contains value constant parameter used imputation.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"parameters parameters inherited PipeOpImpute, well : constant :: atomic(1) constant value used imputation, atomic vector length 1. atomic mode must match type features selected affect_columns parameter checked imputation. required hyperparameter needs set user. check_levels :: logical(1) checked whether constant value valid level factorial features (.e., already level)? Raises error unsuccessful. check performed factorial features (.e., factor, ordered; skipped character). Initialized TRUE. Note empty factor levels can problem many Learners. Thus, PipeOpImputeOOR preferred choice creating new levels, since designed impute --range values offers explicit control handling potentially problematic behavior.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"constructor called empty_level_control set \"always\", allow creation new empty level factor ordered (character) features training, constant already existing level check_levels set FALSE. impact check_levels TRUE, since case error raised imputation.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"methods inherited PipeOpImpute/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeconstant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Features by a Constant — mlr_pipeops_imputeconstant","text":"","code":"library(\"mlr3\")  task = tsk(\"pima\") task$missings() #> diabetes      age  glucose  insulin     mass pedigree pregnant pressure  #>        0        0        5      374       11        0        0       35  #>  triceps  #>      227   # impute missing values of the numeric feature \"glucose\" by the constant value -999 po = po(\"imputeconstant\", param_vals = list(   constant = -999, affect_columns = selector_name(\"glucose\")) ) new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age  insulin     mass pedigree pregnant pressure  triceps  #>        0        0      374       11        0        0       35      227  #>  glucose  #>        0  new_task$data(cols = \"glucose\")[[1]] #>   [1]  148   85  183   89  137  116   78  115  197  125  110  168  139  189  166 #>  [16]  100  118  107  103  115  126   99  196  119  143  125  147   97  145  117 #>  [31]  109  158   88   92  122  103  138  102   90  111  180  133  106  171  159 #>  [46]  180  146   71  103  105  103  101   88  176  150   73  187  100  146  105 #>  [61]   84  133   44  141  114   99  109  109   95  146  100  139  126  129   79 #>  [76] -999   62   95  131  112  113   74   83  101  137  110  106  100  136  107 #>  [91]   80  123   81  134  142  144   92   71   93  122  163  151  125   81   85 #> [106]  126   96  144   83   95  171  155   89   76  160  146  124   78   97   99 #> [121]  162  111  107  132  113   88  120  118  117  105  173  122  170   84   96 #> [136]  125  100   93  129  105  128  106  108  108  154  102   57  106  147   90 #> [151]  136  114  156  153  188  152   99  109   88  163  151  102  114  100  131 #> [166]  104  148  120  110  111  102  134   87   79   75  179   85  129  143  130 #> [181]   87  119 -999   73  141  194  181  128  109  139  111  123  159  135   85 #> [196]  158  105  107  109  148  113  138  108   99  103  111  196  162   96  184 #> [211]   81  147  179  140  112  151  109  125   85  112  177  158  119  142  100 #> [226]   87  101  162  197  117  142  134   79  122   74  171  181  179  164  104 #> [241]   91   91  139  119  146  184  122  165  124  111  106  129   90   86   92 #> [256]  113  111  114  193  155  191  141   95  142  123   96  138  128  102  146 #> [271]  101  108  122   71  106  100  106  104  114  108  146  129  133  161  108 #> [286]  136  155  119   96  108   78  107  128  128  161  151  146  126  100  112 #> [301]  167  144   77  115  150  120  161  137  128  124   80  106  155  113  109 #> [316]  112   99  182  115  194  129  112  124  152  112  157  122  179  102  105 #> [331]  118   87  180  106   95  165  117  115  152  178  130   95 -999  122   95 #> [346]  126  139  116   99 -999   92  137   61   90   90  165  125  129   88  196 #> [361]  189  158  103  146  147   99  124  101   81  133  173  118   84  105  122 #> [376]  140   98   87  156   93  107  105  109   90  125  119  116  105  144  100 #> [391]  100  166  131  116  158  127   96  131   82  193   95  137  136   72  168 #> [406]  123  115  101  197  172  102  112  143  143  138  173   97  144   83  129 #> [421]  119   94  102  115  151  184   94  181  135   95   99   89   80  139   90 #> [436]  141  140  147   97  107  189   83  117  108  117  180  100   95  104  120 #> [451]   82  134   91  119  100  175  135   86  148  134  120   71   74   88  115 #> [466]  124   74   97  120  154  144  137  119  136  114  137  105  114  126  132 #> [481]  158  123   85   84  145  135  139  173   99  194   83   89   99  125   80 #> [496]  166  110   81  195  154  117   84 -999   94   96   75  180  130   84  120 #> [511]   84  139   91   91   99  163  145  125   76  129   68  124  114  130  125 #> [526]   87   97  116  117  111  122  107   86   91   77  132  105   57  127  129 #> [541]  100  128   90   84   88  186  187  131  164  189  116   84  114   88   84 #> [556]  124   97  110  103   85  125  198   87   99   91   95   99   92  154  121 #> [571]   78  130  111   98  143  119  108  118  133  197  151  109  121  100  124 #> [586]   93  143  103  176   73  111  112  132   82  123  188   67   89  173  109 #> [601]  108   96  124  150  183  124  181   92  152  111  106  174  168  105  138 #> [616]  106  117   68  112  119  112   92  183   94  108   90  125  132  128   94 #> [631]  114  102  111  128   92  104  104   94   97  100  102  128  147   90  103 #> [646]  157  167  179  136  107   91  117  123  120  106  155  101  120  127   80 #> [661]  162  199  167  145  115  112  145  111   98  154  165   99   68  123   91 #> [676]  195  156   93  121  101   56  162   95  125  136  129  130  107  140  144 #> [691]  107  158  121  129   90  142  169   99  127  118  122  125  168  129  110 #> [706]   80  115  127  164   93  158  126  129  134  102  187  173   94  108   97 #> [721]   83  114  149  117  111  112  116  141  175   92  130  120  174  106  105 #> [736]   95  126   65   99  102  120  102  109  140  153  100  147   81  187  162 #> [751]  136  121  108  181  154  128  137  123  106  190   88  170   89  101  122 #> [766]  121  126   93"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"Impute numerical features histogram. training, histogram fitted column using R's hist() function. fitted histogram sampled imputation. Sampling happens two-step process: First, bin sampled histogram, value sampled uniformly bin. approximation sampling empirical training data distribution (.e. sampling training data replacement), much memory efficient large datasets, since $state need save training data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"R6Class object inheriting PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"id :: character(1) Identifier resulting object, default \"imputehist\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpImputeHist$new(id = \"imputehist\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"Input output channels inherited PipeOpImpute. output input Task affected numeric features missing values imputed (column-wise) histogram; see Description details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"$state named list $state elements inherited PipeOpImpute. $state$model named list lists containing elements $counts $breaks.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"parameters parameters inherited PipeOpImpute.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"Uses graphics::hist() function. Features entirely NA imputed 0.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"methods inherited PipeOpImpute/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputehist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Numerical Features by Histogram — mlr_pipeops_imputehist","text":"","code":"library(\"mlr3\")  task = tsk(\"pima\") task$missings() #> diabetes      age  glucose  insulin     mass pedigree pregnant pressure  #>        0        0        5      374       11        0        0       35  #>  triceps  #>      227   po = po(\"imputehist\") new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age pedigree pregnant  glucose  insulin     mass pressure  #>        0        0        0        0        0        0        0        0  #>  triceps  #>        0   po$state$model #> $age #> $age$counts #>  [1] 267 150  81  76  76  37  31  23  14  11   1   0   1 #>  #> $age$breaks #>  [1] 20 25 30 35 40 45 50 55 60 65 70 75 80 85 #>  #>  #> $glucose #> $glucose$counts #> [1]   4  38 167 205 157  91  60  41 #>  #> $glucose$breaks #> [1]  40  60  80 100 120 140 160 180 200 #>  #>  #> $insulin #> $insulin$counts #> [1] 151 158  48  17  11   6   1   1   1 #>  #> $insulin$breaks #>  [1]   0 100 200 300 400 500 600 700 800 900 #>  #>  #> $mass #> $mass$counts #>  [1]  14  98 180 221 148  61  27   5   2   0   1 #>  #> $mass$breaks #>  [1] 15 20 25 30 35 40 45 50 55 60 65 70 #>  #>  #> $pedigree #> $pedigree$counts #>  [1] 128 282 154  99  54  22  16   4   4   1   1   2   1 #>  #> $pedigree$breaks #>  [1] 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 #>  #>  #> $pregnant #> $pregnant$counts #> [1] 349 143 107  83  52  20  12   1   1 #>  #> $pregnant$breaks #>  [1]  0  2  4  6  8 10 12 14 16 18 #>  #>  #> $pressure #> $pressure$counts #>  [1]   3   2  24  94 217 228 127  25  11   1   1 #>  #> $pressure$breaks #>  [1]  20  30  40  50  60  70  80  90 100 110 120 130 #>  #>  #> $triceps #> $triceps$counts #>  [1]   9 115 179 164  65   7   1   0   0   1 #>  #> $triceps$breaks #>  [1]   0  10  20  30  40  50  60  70  80  90 100 #>  #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"Impute features fitting Learner feature. Uses features indicated context_columns parameter features train imputation Learner. Note parameter part PipeOpImpute base class explained . Additionally, features supported learner can imputed; .e. learners type regr can impute features type integer numeric, classif can impute features type factor, ordered logical. Learner used imputation trained context_columns; contain missing values, Learner typically either needs able handle missing values , needs imputation (see examples).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"R6Class object inheriting PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"id :: character(1) Identifier resulting object, default \"impute.\", followed id Learner. learner :: Learner | character(1) Learner wrap, string identifying Learner mlr3::mlr_learners Dictionary. Learner usually needs able handle missing values, .e. missings property, unless care taken context_columns contain missings; see examples. argument always cloned; access Learner inside PipeOpImputeLearner -reference, use $learner. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpImputeLearner$new(learner, id = NULL, param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"Input output channels inherited PipeOpImpute. output input Task missing values affected features imputed trained model.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"$state named list $state elements inherited PipeOpImpute. $state$models named list models created Learner's $.train() function column. column consists missing values training, model 0 levels feature; used sampling prediction. state given class \"pipeop_impute_learner_state\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"parameters parameters inherited PipeOpImpute, addition parameters Learner used imputation.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"Uses $train $predict functions provided learner. Features entirely NA imputed 0 randomly sampled available (factor / logical) levels. Learner necessarily need handle missing values cases context_columns chosen well (one column missing values present).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"Fields inherited PipeOpTaskPreproc/PipeOp, well : learner :: LearnerLearner wrapped. Read-. learner_models :: list Learner | NULLLearner wrapped. list named features Learner fitted, contains Learner, different respective models feature. PipeOp trained, empty list. features entirely NA training, list contains NULL elements.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"methods inherited PipeOpImpute/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputelearner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Features by Fitting a Learner — mlr_pipeops_imputelearner","text":"","code":"library(\"mlr3\")  task = tsk(\"pima\") task$missings() #> diabetes      age  glucose  insulin     mass pedigree pregnant pressure  #>        0        0        5      374       11        0        0       35  #>  triceps  #>      227   po = po(\"imputelearner\", lrn(\"regr.rpart\")) new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age pedigree pregnant  glucose  insulin     mass pressure  #>        0        0        0        0        0        0        0        0  #>  triceps  #>        0   # '$state' of the \"regr.rpart\" Learner, trained to predict the 'mass' column: po$state$model$mass #> $model #> n= 757  #>  #> node), split, n, deviance, yval #>       * denotes terminal node #>  #>  1) root 757 36254.3300 32.45746   #>    2) triceps< 25.5 219  5537.6560 27.93196   #>      4) triceps< 20.5 144  3140.7800 26.68333 * #>      5) triceps>=20.5 75  1741.3150 30.32933   #>       10) pressure< 83 64  1081.6090 29.37813 * #>       11) pressure>=83 11   264.8855 35.86364 * #>    3) triceps>=25.5 538 24405.7800 34.29963   #>      6) triceps< 35.5 380 14414.2500 32.50474   #>       12) pressure< 74.5 223  6772.1180 31.49013   #>         24) glucose< 73.5 8    44.1000 24.20000 * #>         25) glucose>=73.5 215  6287.0300 31.76140   #>           50) pregnant>=0.5 190  4822.6790 31.28947 * #>           51) pregnant< 0.5 25  1100.4420 35.34800 * #>       13) pressure>=74.5 157  7086.5100 33.94586   #>         26) insulin< 187 122  4736.5000 33.05656 * #>         27) insulin>=187 35  1917.2070 37.04571 * #>      7) triceps>=35.5 158  5822.9770 38.61646   #>       14) pregnant>=1.5 92  2351.3170 37.02174 * #>       15) pregnant< 1.5 66  2911.5580 40.83939 * #>  #> $param_vals #> $param_vals$xval #> [1] 0 #>  #>  #> $log #> Empty data.table (0 rows and 3 cols): stage,class,msg #>  #> $train_time #> [1] 0.004 #>  #> $task_hash #> [1] \"7682038aa5360fe2\" #>  #> $feature_names #> [1] \"age\"      \"glucose\"  \"insulin\"  \"pedigree\" \"pregnant\" \"pressure\" \"triceps\"  #>  #> $validate #> NULL #>  #> $mlr3_version #> [1] ‘1.1.0’ #>  #> $data_prototype #> Empty data.table (0 rows and 8 cols): .impute_col,age,glucose,insulin,pedigree,pregnant... #>  #> $task_prototype #> Empty data.table (0 rows and 8 cols): .impute_col,age,glucose,insulin,pedigree,pregnant... #>  #> $train_task #>  #> ── <TaskRegr> (768x8) ────────────────────────────────────────────────────────── #> • Target: .impute_col #> • Properties: - #> • Features (7): #>   • dbl (7): age, glucose, insulin, pedigree, pregnant, pressure, triceps #>  #> attr(,\"class\") #> [1] \"learner_state\" \"list\"           library(\"mlr3learners\") # To use the \"regr.lm\" Learner, prefix it with its own imputation method! # The \"imputehist\" PipeOp is used to train \"regr.lm\"; predictions of this # trained Learner are then used to impute the missing values in the Task. po = po(\"imputelearner\",   po(\"imputehist\") %>>% lrn(\"regr.lm\") )  new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age pedigree pregnant  glucose  insulin     mass pressure  #>        0        0        0        0        0        0        0        0  #>  triceps  #>        0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"Impute numerical features mean.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"R6Class object inheriting PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"id :: character(1) Identifier resulting object, default \"imputemean\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpImputeMean$new(id = \"imputemean\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"Input output channels inherited PipeOpImpute. output input Task affected numeric features missing values imputed (column-wise) mean.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"$state named list $state elements inherited PipeOpImpute. $state$model named list numeric(1) indicating mean respective feature.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"parameters parameters inherited PipeOpImpute.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"Uses mean() function. Features entirely NA imputed 0.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"methods inherited PipeOpImpute/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Numerical Features by their Mean — mlr_pipeops_imputemean","text":"","code":"library(\"mlr3\")  task = tsk(\"pima\") task$missings() #> diabetes      age  glucose  insulin     mass pedigree pregnant pressure  #>        0        0        5      374       11        0        0       35  #>  triceps  #>      227   po = po(\"imputemean\") new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age pedigree pregnant  glucose  insulin     mass pressure  #>        0        0        0        0        0        0        0        0  #>  triceps  #>        0   po$state$model #> $age #> [1] 33.24089 #>  #> $glucose #> [1] 121.6868 #>  #> $insulin #> [1] 155.5482 #>  #> $mass #> [1] 32.45746 #>  #> $pedigree #> [1] 0.4718763 #>  #> $pregnant #> [1] 3.845052 #>  #> $pressure #> [1] 72.40518 #>  #> $triceps #> [1] 29.15342 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"Impute numerical features median.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"R6Class object inheriting PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"id :: character(1) Identifier resulting object, default \"imputemedian\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpImputeMedian$new(id = \"imputemedian\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"Input output channels inherited PipeOpImpute. output input Task affected numeric features missing values imputed (column-wise) median.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"$state named list $state elements inherited PipeOpImpute. $state$model named list numeric(1) indicating median respective feature.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"parameters parameters inherited PipeOpImpute.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"Uses stats::median() function. Features entirely NA imputed 0.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"methods inherited PipeOpImpute/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemedian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Numerical Features by their Median — mlr_pipeops_imputemedian","text":"","code":"library(\"mlr3\")  task = tsk(\"pima\") task$missings() #> diabetes      age  glucose  insulin     mass pedigree pregnant pressure  #>        0        0        5      374       11        0        0       35  #>  triceps  #>      227   po = po(\"imputemedian\") new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age pedigree pregnant  glucose  insulin     mass pressure  #>        0        0        0        0        0        0        0        0  #>  triceps  #>        0   po$state$model #> $age #> [1] 29 #>  #> $glucose #> [1] 117 #>  #> $insulin #> [1] 125 #>  #> $mass #> [1] 32.3 #>  #> $pedigree #> [1] 0.3725 #>  #> $pregnant #> [1] 3 #>  #> $pressure #> [1] 72 #>  #> $triceps #> [1] 29 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Features by their Mode — mlr_pipeops_imputemode","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"Impute features mode. Supports factors well logical numerical features. multiple modes present imputed values sampled randomly .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"R6Class object inheriting PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"id :: character(1) Identifier resulting object, default \"imputemode\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpImputeMode$new(id = \"imputemode\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"Input output channels inherited PipeOpImpute. output input Task affected features missing values imputed (column-wise) mode.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"$state named list $state elements inherited PipeOpImpute. $state$model named list vector length one type feature, indicating mode respective feature.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"parameters parameters inherited PipeOpImpute.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"Features entirely NA imputed following: factor ordered, random levels sampled uniformly random. logicals, TRUE FALSE sampled uniformly random. Numerics integers imputed 0. Note every random imputation drawn independently, different values may imputed multiple values missing.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"methods inherited PipeOpImpute/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputemode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Features by their Mode — mlr_pipeops_imputemode","text":"","code":"library(\"mlr3\")  task = tsk(\"pima\") task$missings() #> diabetes      age  glucose  insulin     mass pedigree pregnant pressure  #>        0        0        5      374       11        0        0       35  #>  triceps  #>      227   po = po(\"imputemode\") new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age pedigree pregnant  glucose  insulin     mass pressure  #>        0        0        0        0        0        0        0        0  #>  triceps  #>        0   po$state$model #> $age #> [1] 22 #>  #> $glucose #> [1] 100  99 #>  #> $insulin #> [1] 105 #>  #> $mass #> [1] 32 #>  #> $pedigree #> [1] 0.254 0.258 #>  #> $pregnant #> [1] 1 #>  #> $pressure #> [1] 70 #>  #> $triceps #> [1] 32 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":null,"dir":"Reference","previous_headings":"","what":"Out of Range Imputation — mlr_pipeops_imputeoor","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"Impute factorial features adding new level \".MISSING\". Impute numerical features constant values shifted minimum maximum using \\(min(x) - offset - multiplier * diff(range(x))\\) \\(max(x) + offset + multiplier * diff(range(x))\\). type imputation especially sensible context tree-based methods, see also Ding & Simonoff (2010). Learners expect input Tasks factor (ordered) levels training well prediction. PipeOp modifies levels factor ordered features, since may occur factor ordered feature contains missing values prediction, training, output Task also different levels two stages. avoid problems Learners' expectation, controlling PipeOps' handling edge-case necessary. , use create_empty_level hyperparameter inherited PipeOpImpute. create_empty_level set TRUE, unseen level \".MISSING\" added feature training missing values imputed \".MISSING\" prediction. However, empty factor levels training can problem many Learners. create_empty_level set FALSE, empty level introduced training, columns missing values prediction imputed. may still necessary use po(\"imputesample\", affect_columns = selector_type(types = c(\"factor\", \"ordered\"))) (another imputation method) imputation method. Note setting create_empty_level FALSE setting TRUE using PipeOpFixFactors PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"R6Class object inheriting PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"id :: character(1) Identifier resulting object, default \"imputeoor\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpImputeOOR$new(id = \"imputeoor\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"Input output channels inherited PipeOpImpute. output input Task affected features missing values imputed described .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"$state named list $state elements inherited PipeOpImpute. $state$model contains either \".MISSING\" used character factor (also ordered) features numeric(1) indicating constant value used imputation integer numeric features.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"parameters parameters inherited PipeOpImpute, well : min :: logical(1)  integer numeric features shifted minimum? Initialized TRUE. FALSE shifted maximum. See also description . offset :: numeric(1)  Numerical non-negative offset used description integer numeric features. Initialized 1. multiplier :: numeric(1)  Numerical non-negative multiplier used description integer numeric features. Initialized 1.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"Adds explicit new level() factor ordered features, character features. integer numeric features uses min, max, diff range functions. integer numeric features entirely NA imputed 0. factor ordered features entirely NA imputed \".MISSING\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"methods inherited PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"Ding Y, Simonoff JS (2010). “Investigation Missing Data Methods Classification Trees Applied Binary Response Data.” Journal Machine Learning Research, 11(6), 131-170. https://jmlr.org/papers/v11/ding10a.html.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputeoor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Out of Range Imputation — mlr_pipeops_imputeoor","text":"","code":"library(\"mlr3\") set.seed(2409) data = tsk(\"pima\")$data() data$y = factor(c(NA, sample(letters, size = 766, replace = TRUE), NA)) data$z = ordered(c(NA, sample(1:10, size = 767, replace = TRUE))) task = TaskClassif$new(\"task\", backend = data, target = \"diabetes\") task$missings() #> diabetes      age  glucose  insulin     mass pedigree pregnant pressure  #>        0        0        5      374       11        0        0       35  #>  triceps        y        z  #>      227        2        1  po = po(\"imputeoor\") new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age pedigree pregnant  glucose  insulin     mass pressure  #>        0        0        0        0        0        0        0        0  #>  triceps        y        z  #>        0        0        0  new_task$data() #>      diabetes   age pedigree pregnant glucose insulin  mass pressure triceps #>        <fctr> <num>    <num>    <num>   <num>   <num> <num>    <num>   <num> #>   1:      pos    50    0.627        6     148    -819  33.6       72      35 #>   2:      neg    31    0.351        1      85    -819  26.6       66      29 #>   3:      pos    32    0.672        8     183    -819  23.3       64     -86 #>   4:      neg    21    0.167        1      89      94  28.1       66      23 #>   5:      pos    33    2.288        0     137     168  43.1       40      35 #>  ---                                                                         #> 764:      neg    63    0.171       10     101     180  32.9       76      48 #> 765:      neg    27    0.340        2     122    -819  36.8       70      27 #> 766:      neg    30    0.245        5     121     112  26.2       72      23 #> 767:      pos    47    0.349        1     126    -819  30.1       60     -86 #> 768:      neg    23    0.315        1      93    -819  30.4       70      31 #>             y        z #>        <fctr>    <ord> #>   1: .MISSING .MISSING #>   2:        l        9 #>   3:        q        6 #>   4:        f        3 #>   5:        l        3 #>  ---                   #> 764:        o        7 #> 765:        n        5 #> 766:        e        6 #> 767:        c        8 #> 768: .MISSING        9  # recommended use when missing values are expected during prediction on # factor columns that had no missing values during training gr = po(\"imputeoor\", create_empty_level = FALSE) %>>%   po(\"imputesample\", affect_columns = selector_type(types = c(\"factor\", \"ordered\"))) t1 = as_task_classif(data.frame(l = as.ordered(letters[1:3]), t = letters[1:3]), target = \"t\") t2 = as_task_classif(data.frame(l = as.ordered(c(\"a\", NA, NA)), t = letters[1:3]), target = \"t\") gr$train(t1)[[1]]$data() #>         t     l #>    <fctr> <ord> #> 1:      a     a #> 2:      b     b #> 3:      c     c  # missing values during prediction are sampled randomly gr$predict(t2)[[1]]$data() #>         t     l #>    <fctr> <ord> #> 1:      a     a #> 2:      b     c #> 3:      c     c"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Features by Sampling — mlr_pipeops_imputesample","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"Impute features sampling non-missing training data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"R6Class object inheriting PipeOpImpute/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"id :: character(1) Identifier resulting object, default \"imputesample\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpImputeSample$new(id = \"imputesample\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"Input output channels inherited PipeOpImpute. output input Task affected numeric features missing values imputed values sampled (column-wise) training data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"$state named list $state elements inherited PipeOpImpute. $state$model named list training data missings removed.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"parameters parameters inherited PipeOpImpute.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"Uses sample() function. Features entirely NA imputed following: factor ordered, random levels sampled uniformly random. logicals, TRUE FALSE sampled uniformly random. Numerics integers imputed 0.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"methods inherited PipeOpImpute/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_imputesample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Features by Sampling — mlr_pipeops_imputesample","text":"","code":"library(\"mlr3\")  task = tsk(\"pima\") task$missings() #> diabetes      age  glucose  insulin     mass pedigree pregnant pressure  #>        0        0        5      374       11        0        0       35  #>  triceps  #>      227   po = po(\"imputesample\") new_task = po$train(list(task = task))[[1]] new_task$missings() #> diabetes      age pedigree pregnant  glucose  insulin     mass pressure  #>        0        0        0        0        0        0        0        0  #>  triceps  #>        0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"Extracts kernel principal components data. affects numerical features. See kernlab::kpca details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"id :: character(1) Identifier resulting object, default \"kernelpca\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpKernelPCA$new(id = \"kernelpca\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric parameters replaced principal components.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"$state named list $state elements inherited PipeOpTaskPreproc, well returned S4 object function kernlab::kpca(). @rotated slot \"kpca\" object overwritten empty matrix memory efficiency. slots S4 object can accessed accessor function. See kernlab::kpca.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"parameters parameters inherited PipeOpTaskPreproc, well : kernel :: character(1) standard deviations principal components. See kpca(). kpar :: list List hyper-parameters used kernel function. See kpca(). features :: numeric(1) Number principal components return. Default 0 means principal components returned. See kpca(). th :: numeric(1) value eigenvalue principal components ignored. Default 0.0001. See kpca(). na.action :: function Function specify NA action. Default na.omit. See kpca().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"Uses kpca() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_kernelpca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernelized Principal Component Analysis — mlr_pipeops_kernelpca","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"kernelpca\", features = 3)  # only keep top 3 components  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species        V1         V2           V3 #>         <fctr>     <num>      <num>        <num> #>   1:    setosa -9.439059 -1.1738319  0.818082979 #>   2:    setosa -9.306342 -0.8132986 -1.523991896 #>   3:    setosa -9.536490 -1.3665450 -1.351184473 #>   4:    setosa -9.279544 -0.8197809 -2.060504832 #>   5:    setosa -9.483230 -1.3216931  0.865439972 #>  ---                                             #> 146: virginica  6.588363 -2.4365684  0.686844853 #> 147: virginica  6.117199  0.6557377  0.003376105 #> 148: virginica  6.577817 -1.3279651  0.771331382 #> 149: virginica  6.364696 -2.1709066  0.600659654 #> 150: virginica  5.878114  1.0534310  0.323595267"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"Wraps mlr3::Learner PipeOp. Inherits $param_set (therefore $param_set$values) Learner constructed . Using PipeOpLearner, possible embed mlr3::Learners Graphs, can turned Learners using GraphLearner. way, preprocessing ensemble methods can included machine learning pipeline can handled singular object resampling, benchmarking tuning.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"learner :: Learner | character(1)Learner wrap, string identifying Learner mlr3::mlr_learners Dictionary. argument always cloned; access Learner inside PipeOpLearner -reference, use $learner. id :: character(1) Identifier resulting  object, internally defaulting id Learner wrapped. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpLearner$new(learner, id = NULL, param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"PipeOpLearner one input channel named \"input\", taking Task specific Learner type given learner construction; training prediction. PipeOpLearner one output channel named \"output\", producing NULL training Prediction subclass prediction; subclass specific Learner type given learner construction. output prediction Prediction prediction input data, produced Learner trained training input data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"$state set $state slot Learner object. named list members: model :: Model created Learner's $.train() function. train_log :: data.table columns class (character), msg (character) Errors logged training. train_time :: numeric(1) Training time, seconds. predict_log :: NULL | data.table columns class (character), msg (character) Errors logged prediction. predict_time :: NULL | numeric(1) Prediction time, seconds.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"parameters exactly parameters Learner wrapped object.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"$state currently updated prediction, $state$predict_log $state$predict_time always NULL.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"Fields inherited PipeOp, well : learner :: LearnerLearner wrapped. Read-. learner_model :: LearnerLearner wrapped. learner contains model PipeOp trained. Read-. validate :: \"predefined\" NULL field can set Learners \"validation\" property. Setting field \"predefined\" means wrapped Learner use internal validation task, otherwise ignored. Note specifying validation data created possible via $validate field GraphLearner. PipeOp possible either use (\"predefined\") use (NULL). Also see set_validate.GraphLearner information. internal_tuned_values :: named list() NULL internally tuned values wrapped Learner supports internal tuning, NULL otherwise. internal_valid_scores :: named list() NULL internal validation scores wrapped Learner supports internal validation, NULL otherwise.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"Methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap a Learner into a PipeOp — mlr_pipeops_learner","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") learner = lrn(\"classif.rpart\", cp = 0.1) lrn_po = mlr_pipeops$get(\"learner\", learner)  lrn_po$train(list(task)) #> $output #> NULL #>  lrn_po$predict(list(task)) #> $output #>  #> ── <PredictionClassif> for 150 observations: ─────────────────────────────────── #>  row_ids     truth  response #>        1    setosa    setosa #>        2    setosa    setosa #>        3    setosa    setosa #>      ---       ---       --- #>      148 virginica virginica #>      149 virginica virginica #>      150 virginica virginica #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"Wraps mlr3::Learner PipeOp. Returns cross-validated predictions training Task stores model Learner trained whole data $state. used create similar Task prediction. Task gets features depending capsuled Learner's $predict_type. Learner's $predict.type \"response\", feature <ID>.response created, $predict.type \"prob\" <ID>.prob.<CLASS> features created, $predict.type \"se\" new columns <ID>.response <ID>.se. <ID> denotes $id PipeOpLearnerCV object. Inherits $param_set (therefore $param_set$values) Learner constructed . PipeOpLearnerCV can used create \"stacking\" \"super learning\" Graphs use output one Learner feature another Learner. PipeOpLearnerCV erases original input features, often useful use PipeOpFeatureUnion bind prediction Task original input Task.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"learner :: Learner Learner use cross validation / prediction, string identifying Learner mlr3::mlr_learners Dictionary. argument always cloned; access Learner inside PipeOpLearnerCV -reference, use $learner. id :: character(1) Identifier resulting object, internally defaulting id Learner wrapped. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpLearnerCV$new(learner, id = NULL, param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"PipeOpLearnerCV one input channel named \"input\", taking Task specific Learner type given learner construction; training prediction. PipeOpLearnerCV one output channel named \"output\", producing Task specific Learner type given learner construction; training prediction. output task target input task, features replaced predictions made Learner. training, prediction --sample prediction made resample, prediction, ordinary prediction made data Learner trained training phase data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"$state set $state slot Learner object, together $state elements inherited PipeOpTaskPreproc. named list inherited members, well : model :: Model created Learner's $.train() function. train_log :: data.table columns class (character), msg (character) Errors logged training. train_time :: numeric(1) Training time, seconds. predict_log :: NULL | data.table columns class (character), msg (character) Errors logged prediction. predict_time :: NULL | numeric(1) Prediction time, seconds. state given class \"pipeop_learner_cv_state\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"parameters parameters inherited PipeOpTaskPreproc, well parameters Learner wrapped object. Besides , parameters introduced : resampling.method :: character(1) resampling method want use. Currently supports \"cv\" \"insample\". \"insample\" generates predictions model trained training data. resampling.folds :: numeric(1) Number cross validation folds. Initialized 3. used resampling.method = \"cv\". keep_response :: logical(1) effective \"prob\" prediction: Whether keep response values, available. Initialized FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"$state currently updated prediction, $state$predict_log $state$predict_time always NULL.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"Fields inherited PipeOp, well : learner :: LearnerLearner wrapped. Read-. learner_model :: LearnerLearner wrapped. learner contains model PipeOp trained. Read-.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"Methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap a Learner into a PipeOp with Cross-validated Predictions as Features — mlr_pipeops_learner_cv","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") learner = lrn(\"classif.rpart\")  lrncv_po = po(\"learner_cv\", learner) lrncv_po$learner$predict_type = \"response\"  nop = mlr_pipeops$get(\"nop\")  graph = gunion(list(   lrncv_po,   nop )) %>>% po(\"featureunion\")  graph$train(task) #> $featureunion.output #>  #> ── <TaskClassif> (150x6): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (5): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>   • fct (1): classif.rpart.response #>   graph$pipeops$classif.rpart$learner$predict_type = \"prob\"  graph$train(task) #> $featureunion.output #>  #> ── <TaskClassif> (150x8): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (7): #>   • dbl (7): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width, #>   classif.rpart.prob.setosa, classif.rpart.prob.versicolor, #>   classif.rpart.prob.virginica #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"Wraps mlr3::Learner PipeOp. Inherits $param_set (therefore $param_set$values) Learner constructed . Using PipeOpLearnerPICVPlus, possible embed mlr3::Learner Graph. PipeOpLearnerPICVPlus can used perform cross validation plus (jackknife plus). training, PipeOpLearnerPICVPlus performs cross validation training data. prediction, models training stage used construct predictive confidence intervals prediction data based --fold residuals --fold predictions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"learner :: LearnerRegr LearnerRegr use cross validation models Cross Validation Plus method. argument always cloned; access Learner inside PipeOpLearnerPICVPlus -reference, use $learner. id :: character(1) Identifier resulting  object, internally defaulting id Learner wrapped. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpLearnerPICVPlus$new(learner, id = NULL, param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"PipeOpLearnerPICVPlus one input channel named \"input\", taking Task specific Learner type given learner construction; training prediction. PipeOpLearnerPICVPlus one output channel named \"output\", producing NULL training PredictionRegr prediction. output prediction PredictionRegr predict_type quantiles prediction input data. alpha 1 - alpha quantiles quantiles prediction interval produced cross validation plus method. response median prediction cross validation models prediction data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"$state named list members: cv_model_states :: list List state cross validation model created Learner's $.train() function resampling method \"cv\". residuals :: data.tabledata.table columns fold residual. Lists Regression residuals observation cross validation fold. state given class \"pipeop_learner_cv_state\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"parameters Learner wrapped object, well : folds :: numeric(1) Number cross validation folds. Initialized 3. alpha :: numeric(1) Quantile use cross validation plus prediction intervals. Initialized 0.05.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"$state updated training.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"Fields inherited PipeOp, well : learner :: LearnerLearner wrapped. Read-. learner_model :: Learner list PipeOpLearnerPICVPlus trained, list containing Learners cross validation models. Otherwise, contains Learner wrapped. Read-. predict_type Predict type PipeOpLearnerPICVPlus, always \"response\"  \"quantiles\". can different predict type Learner wrapped.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"Methods inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"Barber RF, Candes EJ, Ramdasa , Tibshirani RJ (2021). “Predictive inference jackknife+.” Annals Statistics, 49, 486–507. doi:10.1214/20-AOS1965 .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_pi_cvplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap a Learner into a PipeOp with Cross-validation Plus Confidence Intervals as Predictions — mlr_pipeops_learner_pi_cvplus","text":"","code":"library(\"mlr3\")  task = tsk(\"mtcars\") learner = lrn(\"regr.rpart\") lrncvplus_po = mlr_pipeops$get(\"learner_pi_cvplus\", learner)  lrncvplus_po$train(list(task)) #> $output #> NULL #>  lrncvplus_po$predict(list(task)) #> $output #>  #> ── <PredictionRegr> for 32 observations: ─────────────────────────────────────── #>  row_ids truth response     q0.05    q0.95 #>        1  21.0 25.17000 10.400000 34.35248 #>        2  21.0 16.73846  9.843529 32.10700 #>        3  22.8 25.56250 17.696750 34.35248 #>      ---   ---      ---       ---      --- #>       30  19.7 16.73846  9.843529 32.10700 #>       31  15.0 16.28667  7.680924 24.46259 #>       32  21.4 25.17000  9.953524 33.07500 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"Wraps LearnerRegr PipeOp predict multiple quantiles. PipeOpLearnerQuantiles supports LearnerRegrs quantiles possible pedict_type. produces quantile-based predictions multiple quantiles one PredictionRegr. especially helpful LearnerRegr can predict one quantile (like example LearnerRegrGBM mlr3extralearners) Inherits $param_set (therefore $param_set$values) Learner constructed .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"learner :: Learner | character(1)Learner wrap, string identifying Learner mlr3::mlr_learners Dictionary. Learner LearnerRegr predict_type \"quantiles\". argument always cloned; access Learner inside PipeOpLearnerQuantiles -reference, use $learner. id :: character(1) Identifier resulting  object, internally defaulting id Learner wrapped. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpLearnerQuantiles$new(learner, id = NULL, param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"PipeOpLearnerQuantiles one input channel named \"input\", taking TaskRegr specific Learner type given learner construction; training prediction. PipeOpLearnerQuantiles one output channel named \"output\", producing NULL training PredictionRegr object prediction. output prediction PredictionRegr prediction input data aggregates results produced Learner quantile quantiles. trained training input data.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"$state set training. named list member: model_states :: list List states models created Learner's $.train() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"parameters exactly parameters Learner wrapped object. q_vals :: numeric Quantiles use training prediction. Initialized c(0.05, 0.5, 0.95) q_response :: numeric(1) quantile quantiles use response PredictionRegr prediction. Initialized 0.5.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"$state updated training.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"Fields inherited PipeOp, well : learner :: LearnerRegrLearner wrapped. Read-. learner_model :: Learner PipeOpLearnerQuantiles trained, list containing Learners quantile. Otherwise, contains Learner wrapped. Read-. predict_type :: character(1) Predict type PipeOpLearnerQuantiles, always \"response\"  \"quantiles\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"Methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_learner_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap a Learner into a PipeOp to to predict multiple Quantiles — mlr_pipeops_learner_quantiles","text":"","code":"library(\"mlr3\")  task = tsk(\"boston_housing\") learner = lrn(\"regr.debug\") po = mlr_pipeops$get(\"learner_quantiles\", learner)  po$train(list(task)) #> $output #> NULL #>  po$predict(list(task)) #> $output #>  #> ── <PredictionRegr> for 506 observations: ────────────────────────────────────── #>  row_ids truth q0.05 q0.5 q0.95 response #>        1  24.0  10.2 21.2  43.4     21.2 #>        2  21.6  10.2 21.2  43.4     21.2 #>        3  34.7  10.2 21.2  43.4     21.2 #>      ---   ---   ---  ---   ---      --- #>      504  23.9  10.2 21.2  43.4     21.2 #>      505  22.0  10.2 21.2  43.4     21.2 #>      506  19.0  10.2 21.2  43.4     21.2 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Missing Indicator Columns — mlr_pipeops_missind","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"Add missing indicator columns (\"dummy columns\") Task. Drops original features; probably used combination PipeOpFeatureUnion imputation PipeOps (see examples). Note affect_columns initialized selector_invert(selector_type(c(\"factor\", \"ordered\", \"character\"))), since missing values factorial columns often indicated --range imputation (PipeOpImputeOOR).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"id :: character(1) Identifier resulting  object, defaulting \"missind\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpMissInd$new(id = \"missind\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : indicand_cols :: character Names columns indicator columns added. parameter \"\", just names features, otherwise names features missing values training.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"parameters parameters inherited PipeOpTaskPreproc, well : :: character(1) Determines features indicator columns added. Can either \"missing_train\" (default), adding indicator columns feature actually missing values, \"\", adding indicator columns features. type :: character(1) Determines type newly created columns. Can one \"factor\" (default), \"integer\", \"logical\", \"numeric\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"PipeOp cover cases \"dummy columns\" \"missing indicators\" desired. edge cases: imputation factorial features performed numeric features gain missing indicators, affect_columns parameter can set selector_type(\"numeric\"). missing indicators added features fraction x missing values, PipeOpRemoveConstants can used affect_columns = selector_grep(\"^missing_\") ratio = x.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"Fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"Methods inherited PipeOpTaskPreprocSimple(PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_missind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Missing Indicator Columns — mlr_pipeops_missind","text":"","code":"library(\"mlr3\")  task = tsk(\"pima\")$select(c(\"insulin\", \"triceps\")) sum(complete.cases(task$data())) #> [1] 394 task$missings() #> diabetes  insulin  triceps  #>        0      374      227  tail(task$data()) #>    diabetes insulin triceps #>      <fctr>   <num>   <num> #> 1:      neg      NA      NA #> 2:      neg     180      48 #> 3:      neg      NA      27 #> 4:      neg     112      23 #> 5:      pos      NA      NA #> 6:      neg      NA      31  po = po(\"missind\") new_task = po$train(list(task))[[1]]  tail(new_task$data()) #>    diabetes missing_insulin missing_triceps #>      <fctr>          <fctr>          <fctr> #> 1:      neg         missing         missing #> 2:      neg         present         present #> 3:      neg         missing         present #> 4:      neg         present         present #> 5:      pos         missing         missing #> 6:      neg         missing         present  # proper imputation + missing indicators  impgraph = list(   po(\"imputesample\"),   po(\"missind\") ) %>>% po(\"featureunion\")  tail(impgraph$train(task)[[1]]$data()) #>    diabetes insulin triceps missing_insulin missing_triceps #>      <fctr>   <num>   <num>          <fctr>          <fctr> #> 1:      neg     465      39         missing         missing #> 2:      neg     180      48         present         present #> 3:      neg      49      27         missing         present #> 4:      neg     112      23         present         present #> 5:      pos      75      39         missing         missing #> 6:      neg      44      31         missing         present"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"Transforms columns using given formula using stats::model.matrix() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"id :: character(1) Identifier resulting object, default \"modelmatrix\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpModelMatrix$new(id = \"modelmatrix\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"Input output channels inherited PipeOpTaskPreproc. output input Task transformed columns according used formula.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"parameters parameters inherited PipeOpTaskPreproc, well : formula  :: formula  Formula use. Higher order interactions can created using constructs like ~. ^ 2. default, (Intercept) column 1s created, can avoided adding 0 + term. See model.matrix().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"Uses model.matrix() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_modelmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Columns by Constructing a Model Matrix — mlr_pipeops_modelmatrix","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"modelmatrix\", formula = ~ .  ^ 2)  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species (Intercept) Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>       <num>        <num>       <num>        <num>       <num> #>   1:    setosa           1          1.4         0.2          5.1         3.5 #>   2:    setosa           1          1.4         0.2          4.9         3.0 #>   3:    setosa           1          1.3         0.2          4.7         3.2 #>   4:    setosa           1          1.5         0.2          4.6         3.1 #>   5:    setosa           1          1.4         0.2          5.0         3.6 #>  ---                                                                         #> 146: virginica           1          5.2         2.3          6.7         3.0 #> 147: virginica           1          5.0         1.9          6.3         2.5 #> 148: virginica           1          5.2         2.0          6.5         3.0 #> 149: virginica           1          5.4         2.3          6.2         3.4 #> 150: virginica           1          5.1         1.8          5.9         3.0 #>      Petal.Length:Petal.Width Petal.Length:Sepal.Length #>                         <num>                     <num> #>   1:                     0.28                      7.14 #>   2:                     0.28                      6.86 #>   3:                     0.26                      6.11 #>   4:                     0.30                      6.90 #>   5:                     0.28                      7.00 #>  ---                                                    #> 146:                    11.96                     34.84 #> 147:                     9.50                     31.50 #> 148:                    10.40                     33.80 #> 149:                    12.42                     33.48 #> 150:                     9.18                     30.09 #>      Petal.Length:Sepal.Width Petal.Width:Sepal.Length Petal.Width:Sepal.Width #>                         <num>                    <num>                   <num> #>   1:                     4.90                     1.02                    0.70 #>   2:                     4.20                     0.98                    0.60 #>   3:                     4.16                     0.94                    0.64 #>   4:                     4.65                     0.92                    0.62 #>   5:                     5.04                     1.00                    0.72 #>  ---                                                                           #> 146:                    15.60                    15.41                    6.90 #> 147:                    12.50                    11.97                    4.75 #> 148:                    15.60                    13.00                    6.00 #> 149:                    18.36                    14.26                    7.82 #> 150:                    15.30                    10.62                    5.40 #>      Sepal.Length:Sepal.Width #>                         <num> #>   1:                    17.85 #>   2:                    14.70 #>   3:                    15.04 #>   4:                    14.26 #>   5:                    18.00 #>  ---                          #> 146:                    20.10 #> 147:                    15.75 #> 148:                    19.50 #> 149:                    21.08 #> 150:                    17.70  pop$param_set$values$formula = ~ 0 + . ^ 2  pop$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 #>      Petal.Length:Petal.Width Petal.Length:Sepal.Length #>                         <num>                     <num> #>   1:                     0.28                      7.14 #>   2:                     0.28                      6.86 #>   3:                     0.26                      6.11 #>   4:                     0.30                      6.90 #>   5:                     0.28                      7.00 #>  ---                                                    #> 146:                    11.96                     34.84 #> 147:                     9.50                     31.50 #> 148:                    10.40                     33.80 #> 149:                    12.42                     33.48 #> 150:                     9.18                     30.09 #>      Petal.Length:Sepal.Width Petal.Width:Sepal.Length Petal.Width:Sepal.Width #>                         <num>                    <num>                   <num> #>   1:                     4.90                     1.02                    0.70 #>   2:                     4.20                     0.98                    0.60 #>   3:                     4.16                     0.94                    0.64 #>   4:                     4.65                     0.92                    0.62 #>   5:                     5.04                     1.00                    0.72 #>  ---                                                                           #> 146:                    15.60                    15.41                    6.90 #> 147:                    12.50                    11.97                    4.75 #> 148:                    15.60                    13.00                    6.00 #> 149:                    18.36                    14.26                    7.82 #> 150:                    15.30                    10.62                    5.40 #>      Sepal.Length:Sepal.Width #>                         <num> #>   1:                    17.85 #>   2:                    14.70 #>   3:                    15.04 #>   4:                    14.26 #>   5:                    18.00 #>  ---                          #> 146:                    20.10 #> 147:                    15.75 #> 148:                    19.50 #> 149:                    21.08 #> 150:                    17.70"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":null,"dir":"Reference","previous_headings":"","what":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"Explicate Multiplicity turning input Multiplicity multiple outputs. PipeOp multiple output channels; members input Multiplicity forwarded along single edge. Therefore, multiplicities exactly many members outnum accepted. Note Multiplicity currently experimental features implementation UI may change.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"outnum :: numeric(1) | character Determines number output channels. id :: character(1) Identifier resulting object, default \"multiplicityexply\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpMultiplicityExply$new(outnum , id = \"multiplicityexply\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"PipeOpMultiplicityExply single input channel named \"input\", collecting Multiplicity type (\"[*]\") training prediction. PipeOpMultiplicityExply multiple output channels depending outnum construction argument, named \"output1\", \"output2\" returning elements unclassed input Multiplicity.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"PipeOpMultiplicityExply Parameters.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"outnum match number elements unclassed input Multiplicity.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityexply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explicate a Multiplicity — mlr_pipeops_multiplicityexply","text":"","code":"library(\"mlr3\") task1 = tsk(\"iris\") task2 = tsk(\"mtcars\") po = po(\"multiplicityexply\", outnum = 2) po$train(list(Multiplicity(task1, task2))) #> $output1 #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> $output2 #>  #> ── <TaskRegr> (32x11): Motor Trends ──────────────────────────────────────────── #> • Target: mpg #> • Properties: - #> • Features (10): #>   • dbl (10): am, carb, cyl, disp, drat, gear, hp, qsec, vs, wt #>  po$predict(list(Multiplicity(task1, task2))) #> $output1 #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> $output2 #>  #> ── <TaskRegr> (32x11): Motor Trends ──────────────────────────────────────────── #> • Target: mpg #> • Properties: - #> • Features (10): #>   • dbl (10): am, carb, cyl, disp, drat, gear, hp, qsec, vs, wt #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":null,"dir":"Reference","previous_headings":"","what":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"Implicate Multiplicity returning input(s) converted Multiplicity. PipeOp multiple input channels; inputs collected Multiplicity forwarded along single edge, causing following PipeOps called multiple times, Multiplicity member. Note Multiplicity currently experimental features implementation UI may change.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"innum :: numeric(1) | character Determines number input channels. innum 0 (default), vararg input channel created can take arbitrary number inputs. innum character vector, number input channels length innum. id :: character(1) Identifier resulting object, default \"multiplicityimply\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpMultiplicityImply$new(innum = 0, id = \"multiplicityimply\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"PipeOpMultiplicityImply multiple input channels depending innum construction argument, named \"input1\", \"input2\", ... innum nonzero; innum 0, one vararg input channel named \"...\". input channels take input (\"*\") training prediction. PipeOpMultiplicityImply one output channel named \"output\", emitting Multiplicity type (\"[*]\"), .e., returning input(s) converted Multiplicity training prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"PipeOpMultiplicityImply Parameters.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"innum numeric, e.g., character, output Multiplicity named based input channel names","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_multiplicityimply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Implicate a Multiplicity — mlr_pipeops_multiplicityimply","text":"","code":"library(\"mlr3\") task1 = tsk(\"iris\") task2 = tsk(\"mtcars\") po = po(\"multiplicityimply\") po$train(list(task1, task2)) #> $output #> Multiplicity: #> [[1]] #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> [[2]] #>  #> ── <TaskRegr> (32x11): Motor Trends ──────────────────────────────────────────── #> • Target: mpg #> • Properties: - #> • Features (10): #>   • dbl (10): am, carb, cyl, disp, drat, gear, hp, qsec, vs, wt #>  #>  po$predict(list(task1, task2)) #> $output #> Multiplicity: #> [[1]] #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> [[2]] #>  #> ── <TaskRegr> (32x11): Motor Trends ──────────────────────────────────────────── #> • Target: mpg #> • Properties: - #> • Features (10): #>   • dbl (10): am, carb, cyl, disp, drat, gear, hp, qsec, vs, wt #>  #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Features According to Expressions — mlr_pipeops_mutate","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"Adds features according expressions given formulas may depend values features. can add new features, can change existing features.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"id :: character(1) Identifier resulting object, default \"mutate\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpMutate$new(id = \"mutate\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"Input output channels inherited PipeOpTaskPreproc. output input Task added /mutated features according mutation parameter.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"parameters parameters inherited PipeOpTaskPreproc, well : mutation :: named list formula Expressions new features create (present features change), form formula. element list formula name element naming feature create change, formula expression determining result. expression may reference features, well variables visible creation formula (see examples). Initialized list(). delete_originals :: logical(1)  Whether delete original features. Even FALSE, present features may still overwritten. Initialized FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"formula created using ~ operator always contains reference environment formula created. makes possible use variables ~-expressions reference either column names variable names. Note formulas mutation evaluated sequentially. allows using variables constructed evaluation previous formula. However, existing features changed, precedence given original ones newly constructed ones.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Features According to Expressions — mlr_pipeops_mutate","text":"","code":"library(\"mlr3\")  constant = 1 pom = po(\"mutate\") pom$param_set$values$mutation = list(   Sepal.Length_plus_constant = ~ Sepal.Length + constant,   Sepal.Area = ~ Sepal.Width * Sepal.Length,   Petal.Area = ~ Petal.Width * Petal.Length,   Sepal.Area_plus_Petal.Area = ~ Sepal.Area + Petal.Area )  pom$train(list(tsk(\"iris\")))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 #>      Sepal.Length_plus_constant Sepal.Area Petal.Area #>                           <num>      <num>      <num> #>   1:                        6.1      17.85       0.28 #>   2:                        5.9      14.70       0.28 #>   3:                        5.7      15.04       0.26 #>   4:                        5.6      14.26       0.30 #>   5:                        6.0      18.00       0.28 #>  ---                                                  #> 146:                        7.7      20.10      11.96 #> 147:                        7.3      15.75       9.50 #> 148:                        7.5      19.50      10.40 #> 149:                        7.2      21.08      12.42 #> 150:                        6.9      17.70       9.18 #>      Sepal.Area_plus_Petal.Area #>                           <num> #>   1:                      18.13 #>   2:                      14.98 #>   3:                      15.30 #>   4:                      14.56 #>   5:                      18.28 #>  ---                            #> 146:                      32.06 #> 147:                      25.25 #> 148:                      29.90 #> 149:                      33.50 #> 150:                      26.88"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":null,"dir":"Reference","previous_headings":"","what":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"Generates balanced data set -sampling instances non-minority classes using NEARMISS algorithm. algorithm -samples selecting instances non-minority classes smallest mean distance k nearest neighbors different classes. numeric integer features taken account. must missing values. can applied classification tasks. Multiclass classification supported. See themis::nearmiss details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"id :: character(1) Identifier resulting object, default \"nearmiss\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpNearmiss$new(id = \"nearmiss\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif used input output training prediction. output training input Task rows removed non-minority classes. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"parameters parameters inherited PipeOpTaskPreproc, well k :: integer(1) Number nearest neighbors used calculating mean distances. Default 5. under_ratio :: numeric(1) Ratio minority--majority frequencies. specifies ratio number instances non-minority classes get -sampled , relative number instances minority class. Default 1. details, see themis::nearmiss.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"Zhang, J., Mani, . (2003). “KNN Approach Unbalanced Data Distributions: Case Study Involving Information Extraction.” Proceedings Workshop Learning Imbalanced Datasets (ICML).","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nearmiss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nearmiss Down-Sampling — mlr_pipeops_nearmiss","text":"","code":"library(\"mlr3\")  # Create example task task = tsk(\"wine\") task$head() #>      type alcalinity alcohol   ash color dilution flavanoids   hue magnesium #>    <fctr>      <num>   <num> <num> <num>    <num>      <num> <num>     <int> #> 1:      1       15.6   14.23  2.43  5.64     3.92       3.06  1.04       127 #> 2:      1       11.2   13.20  2.14  4.38     3.40       2.76  1.05       100 #> 3:      1       18.6   13.16  2.67  5.68     3.17       3.24  1.03       101 #> 4:      1       16.8   14.37  2.50  7.80     3.45       3.49  0.86       113 #> 5:      1       21.0   13.24  2.87  4.32     2.93       2.69  1.04       118 #> 6:      1       15.2   14.20  2.45  6.75     2.85       3.39  1.05       112 #>    malic nonflavanoids phenols proanthocyanins proline #>    <num>         <num>   <num>           <num>   <int> #> 1:  1.71          0.28    2.80            2.29    1065 #> 2:  1.78          0.26    2.65            1.28    1050 #> 3:  2.36          0.30    2.80            2.81    1185 #> 4:  1.95          0.24    3.85            2.18    1480 #> 5:  2.59          0.39    2.80            1.82     735 #> 6:  1.76          0.34    3.27            1.97    1450 table(task$data(cols = \"type\")) #> type #>  1  2  3  #> 59 71 48   # Down-sample and balance data pop = po(\"nearmiss\") nearmiss_result = pop$train(list(task))[[1]]$data() nrow(nearmiss_result) #> [1] 144 table(nearmiss_result$type) #>  #>  1  2  3  #> 48 48 48"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-negative Matrix Factorization — mlr_pipeops_nmf","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"Extracts non-negative components data performing non-negative matrix factorization. affects non-negative numerical features. See nmf() details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"id :: character(1) Identifier resulting object, default \"nmf\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpNMF$new(id = \"nmf\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric features replaced non-negative components.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"$state named list $state elements inherited PipeOpTaskPreproc, well elements object returned nmf().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"parameters parameters inherited PipeOpTaskPreproc, well : rank :: integer(1) Factorization rank, .e., number components. Initialized 2. See nmf(). method :: character(1) Specification NMF algorithm. Initialized \"brunet\". See nmf(). seed :: character(1) | integer(1) | list() | object class NMF | function() Specification starting point. See nmf(). nrun :: integer(1) Number runs performs. Default 1. single run allows computation consensus matrix also stored $state. See nmf(). debug :: logical(1) Whether toggle debug mode. Default FALSE. See nmf(). keep.:: logical(1) Whether factorizations saved returned. Default FALSE. effect nrun > 1. See nmf(). parallel :: character(1) | integer(1) | logical(1) Specification parallel handling nrun > 1. Initialized FALSE, recommended use mlr3's future-based parallelization. See nmf(). parallel.required :: character(1) | integer(1) | logical(1) parallel, error thrown computation performed parallel specified number processors. Initialized FALSE, recommended use mlr3's future-based parallelization. See nmf(). shared.memory :: logical(1) Whether shared memory enabled. See nmf(). simplifyCB :: logical(1) Whether callback results simplified. Default TRUE. See nmf(). track :: logical(1) Whether error tracking enabled. Default FALSE. See nmf(). verbose :: integer(1) | logical(1) Specification verbosity. Default FALSE. See nmf(). pbackend :: character(1) | integer(1) | NULL Specification parallel backend. recommended use mlr3's future-based parallelization. See nmf(). callback | function() Callback function called run (nrun > 1). See nmf().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"Uses nmf() function well basis(), coef() ginv().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-negative Matrix Factorization — mlr_pipeops_nmf","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"nmf\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species      NMF1       NMF2 #>         <fctr>     <num>      <num> #>   1:    setosa 0.4722029 0.02426467 #>   2:    setosa 0.4237720 0.04359711 #>   3:    setosa 0.4322611 0.02502891 #>   4:    setosa 0.4076002 0.04820838 #>   5:    setosa 0.4735927 0.01986585 #>  ---                                #> 146: virginica 0.2489892 0.51344128 #> 147: virginica 0.2124087 0.49500193 #> 148: virginica 0.2463497 0.49957816 #> 149: virginica 0.2372032 0.51500688 #> 150: virginica 0.2226449 0.47879107  pop$state #> <Object of class: NMFfit> #>  # Model: #>   <Object of class:NMFstd> #>   features: 4  #>   basis/rank: 2  #>   samples: 150  #>  # Details: #>   algorithm:  brunet  #>   seed:  random  #>   RNG: 10403L, 222L, ..., 581505866L [0c75f1787a6dee181f94de56ad96448d] #>   distance metric:  'KL'  #>   residuals:  3.084419  #>   miscellaneous: dt_columns=<character>, affected_cols=<character>, #>               intasklayout=c(\"<data.table>\", \"<data.frame>\"), #>               outtasklayout=c(\"<data.table>\", \"<data.frame>\"), #>               outtaskshell=c(\"<data.table>\", \"<data.frame>\") . (use 'misc(object)') #>   Iterations: 650  #>   Timing: #>      user  system elapsed  #>     0.083   0.000   0.083"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":null,"dir":"Reference","previous_headings":"","what":"Simply Push Input Forward — mlr_pipeops_nop","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"Simply pushes input forward. Can useful Graph construction using %>>%-operator specify PipeOp gets connected .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"id :: character(1) Identifier resulting object, default \"nop\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpNOP$new(id = \"nop\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"PipeOpNOP one input channel named \"input\", taking input (\"*\") training prediction. PipeOpNOP one output channel named \"output\", producing object given input (\"*\") without changes.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"PipeOpNOP parameters.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"PipeOpNOP useful \"default\" stand-PipeOp/Graph nothing.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_nop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simply Push Input Forward — mlr_pipeops_nop","text":"","code":"library(\"mlr3\")  nop = po(\"nop\")  nop$train(list(1)) #> $output #> [1] 1 #>   # use `gunion` and `%>>%` to create a \"bypass\" # next to \"pca\" gr = gunion(list(   po(\"pca\"),   nop )) %>>% po(\"featureunion\")  gr$train(tsk(\"iris\"))[[1]]$data() #>        Species       PC1         PC2         PC3          PC4 Petal.Length #>         <fctr>     <num>       <num>       <num>        <num>        <num> #>   1:    setosa -2.684126 -0.31939725  0.02791483 -0.002262437          1.4 #>   2:    setosa -2.714142  0.17700123  0.21046427 -0.099026550          1.4 #>   3:    setosa -2.888991  0.14494943 -0.01790026 -0.019968390          1.3 #>   4:    setosa -2.745343  0.31829898 -0.03155937  0.075575817          1.5 #>   5:    setosa -2.728717 -0.32675451 -0.09007924  0.061258593          1.4 #>  ---                                                                       #> 146: virginica  1.944110 -0.18753230 -0.17782509 -0.426195940          5.2 #> 147: virginica  1.527167  0.37531698  0.12189817 -0.254367442          5.0 #> 148: virginica  1.764346 -0.07885885 -0.13048163 -0.137001274          5.2 #> 149: virginica  1.900942 -0.11662796 -0.72325156 -0.044595305          5.4 #> 150: virginica  1.390189  0.28266094 -0.36290965  0.155038628          5.1 #>      Petal.Width Sepal.Length Sepal.Width #>            <num>        <num>       <num> #>   1:         0.2          5.1         3.5 #>   2:         0.2          4.9         3.0 #>   3:         0.2          4.7         3.2 #>   4:         0.2          4.6         3.1 #>   5:         0.2          5.0         3.6 #>  ---                                      #> 146:         2.3          6.7         3.0 #> 147:         1.9          6.3         2.5 #> 148:         2.0          6.5         3.0 #> 149:         2.3          6.2         3.4 #> 150:         1.8          5.9         3.0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"Splits classification Task several binary classification Tasks perform \"One vs. Rest\" classification. works combination PipeOpOVRUnite. target level new binary classification Task constructed respective target level positive class target levels new negative class \"rest\". PipeOp creates Multiplicity, means subsequent PipeOps executed multiple times, created binary Task, PipeOpOVRUnite reached. Note Multiplicity currently experimental features implementation UI may change.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"R6Class inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"id :: character(1) Identifier resulting object, default \"ovrsplit\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpOVRSplit$new(id = \"ovrsplit\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"PipeOpOVRSplit one input channel named \"input\" taking TaskClassif training prediction. PipeOpOVRSplit one output channel named \"output\" returning Multiplicity TaskClassifs training prediction, .e., newly constructed binary classification Tasks.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"$state contains original target levels TaskClassif supplied training.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"PipeOpOVRSplit parameters.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"original target levels stored $state also used prediction creating new binary classification Tasks. names element output Multiplicity given levels target. target level \"rest\" present input TaskClassif, negative class labeled \"rest.\" (using many \".\"` postfixes needed yield valid label). used combination PipeOpOVRUnite.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrsplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a Classification Task into Binary Classification Tasks — mlr_pipeops_ovrsplit","text":"","code":"library(mlr3) task = tsk(\"iris\") po = po(\"ovrsplit\") po$train(list(task)) #> $output #> Multiplicity: #> $setosa #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (positive class, 33%), rest (67%) #> • Properties: twoclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> $versicolor #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: versicolor (positive class, 33%), rest (67%) #> • Properties: twoclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> $virginica #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: virginica (positive class, 33%), rest (67%) #> • Properties: twoclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #>  po$predict(list(task)) #> $output #> Multiplicity: #> $setosa #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (positive class, 33%), rest (67%) #> • Properties: twoclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> $versicolor #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: versicolor (positive class, 33%), rest (67%) #> • Properties: twoclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> $virginica #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: virginica (positive class, 33%), rest (67%) #> • Properties: twoclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"Perform \"One vs. Rest\" classification (weighted) majority vote prediction classification Predictions. works combination PipeOpOVRSplit. Weights can set parameter; none provided, defaults equal weights prediction. Always returns \"prob\" prediction, regardless incoming Learner's $predict_type. label class highest predicted probability selected \"response\" prediction. Missing values prediction treated class label equally likely. PipeOp uses Multiplicity input, created PipeOpOVRSplit causes PipeOps way PipeOp called individual binary Task. Note Multiplicity currently experimental features implementation UI may change.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"R6Class inheriting PipeOpEnsemble/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"id :: character(1) Identifier resulting object, default \"ovrunite\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpOVRUnite$new(id = \"ovrunite\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"Input output channels inherited PipeOpEnsemble. Instead Prediction, PredictionClassif used input output prediction PipeOpEnsemble's collect parameter initialized TRUE allow collecting Multiplicity input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"parameters parameters inherited PipeOpEnsemble.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"Inherits PipeOpEnsemble implementing private$.predict() method. used combination PipeOpOVRSplit.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"fields inherited PipeOpEnsemble/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"methods inherited PipeOpEnsemble/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_ovrunite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite Binary Classification Tasks — mlr_pipeops_ovrunite","text":"","code":"library(mlr3) task = tsk(\"iris\") gr = po(\"ovrsplit\") %>>% lrn(\"classif.rpart\") %>>% po(\"ovrunite\") gr$train(task) #> $ovrunite.output #> NULL #>  gr$predict(task) #> $ovrunite.output #>  #> ── <PredictionClassif> for 150 observations: ─────────────────────────────────── #>  row_ids     truth  response prob.setosa prob.versicolor prob.virginica #>        1    setosa    setosa           1               0              0 #>        2    setosa    setosa           1               0              0 #>        3    setosa    setosa           1               0              0 #>      ---       ---       ---         ---             ---            --- #>      148 virginica virginica           0               0              1 #>      149 virginica virginica           0               0              1 #>      150 virginica virginica           0               0              1 #>  gr$pipeops$classif.rpart$learner$predict_type = \"prob\" gr$predict(task) #> $ovrunite.output #>  #> ── <PredictionClassif> for 150 observations: ─────────────────────────────────── #>  row_ids     truth  response prob.setosa prob.versicolor prob.virginica #>        1    setosa    setosa   0.9541284      0.00000000     0.04587156 #>        2    setosa    setosa   0.9541284      0.00000000     0.04587156 #>        3    setosa    setosa   0.9541284      0.00000000     0.04587156 #>      ---       ---       ---         ---             ---            --- #>      148 virginica virginica   0.0000000      0.02173913     0.97826087 #>      149 virginica virginica   0.0000000      0.02173913     0.97826087 #>      150 virginica virginica   0.0000000      0.02173913     0.97826087 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Principle Component Analysis — mlr_pipeops_pca","title":"Principle Component Analysis — mlr_pipeops_pca","text":"Extracts principle components data. affects numerical features. See stats::prcomp() details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Principle Component Analysis — mlr_pipeops_pca","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Principle Component Analysis — mlr_pipeops_pca","text":"id :: character(1) Identifier resulting object, default \"pca\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpPCA$new(id = \"pca\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Principle Component Analysis — mlr_pipeops_pca","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric features replaced principal components.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Principle Component Analysis — mlr_pipeops_pca","text":"$state named list $state elements inherited PipeOpTaskPreproc, well elements class stats::prcomp, exception $x slot. particular: sdev :: numeric standard deviations principal components. rotation :: matrix matrix variable loadings. center :: numeric | logical(1) centering used, FALSE. scale :: numeric | logical(1) scaling used, FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Principle Component Analysis — mlr_pipeops_pca","text":"parameters parameters inherited PipeOpTaskPreproc, well : center :: logical(1) Indicating whether features centered. Default TRUE. See prcomp(). scale. :: logical(1) Whether scale features unit variance analysis. Default FALSE, scaling advisable. See prcomp(). rank. :: integer(1) Maximal number principal components used. Default NULL: use components. See prcomp().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Principle Component Analysis — mlr_pipeops_pca","text":"Uses prcomp() function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Principle Component Analysis — mlr_pipeops_pca","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Principle Component Analysis — mlr_pipeops_pca","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principle Component Analysis — mlr_pipeops_pca","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"pca\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species       PC1         PC2         PC3          PC4 #>         <fctr>     <num>       <num>       <num>        <num> #>   1:    setosa -2.684126 -0.31939725  0.02791483 -0.002262437 #>   2:    setosa -2.714142  0.17700123  0.21046427 -0.099026550 #>   3:    setosa -2.888991  0.14494943 -0.01790026 -0.019968390 #>   4:    setosa -2.745343  0.31829898 -0.03155937  0.075575817 #>   5:    setosa -2.728717 -0.32675451 -0.09007924  0.061258593 #>  ---                                                          #> 146: virginica  1.944110 -0.18753230 -0.17782509 -0.426195940 #> 147: virginica  1.527167  0.37531698  0.12189817 -0.254367442 #> 148: virginica  1.764346 -0.07885885 -0.13048163 -0.137001274 #> 149: virginica  1.900942 -0.11662796 -0.72325156 -0.044595305 #> 150: virginica  1.390189  0.28266094 -0.36290965  0.155038628  pop$state #> Standard deviations (1, .., p=4): #> [1] 2.0562689 0.4926162 0.2796596 0.1543862 #>  #> Rotation (n x k) = (4 x 4): #>                      PC1         PC2         PC3        PC4 #> Petal.Length  0.85667061  0.17337266 -0.07623608  0.4798390 #> Petal.Width   0.35828920  0.07548102 -0.54583143 -0.7536574 #> Sepal.Length  0.36138659 -0.65658877  0.58202985 -0.3154872 #> Sepal.Width  -0.08452251 -0.73016143 -0.59791083  0.3197231"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"Wraps another PipeOp Graph determined content hyperparameter. Input routed content contents' output returned. content hyperparameter can changed tuning, useful alternative PipeOpBranch.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"Abstract R6Class inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"innum :: numeric(1)\\cr Determines number input channels. innum` 0 (default), vararg input channel created can take arbitrary number inputs. outnum :: `numeric(1) Determines number output channels. id :: character(1) Identifier resulting object. See $id slot PipeOp. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpProxy$new(innum = 0, outnum = 1, id = \"proxy\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"PipeOpProxy multiple input channels depending innum construction argument, named \"input1\", \"input2\", ... innum nonzero; innum 0, one vararg input channel named \"...\". PipeOpProxy multiple output channels depending outnum construction argument, named \"output1\", \"output2\", ... output determined output content operation (PipeOp Graph).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"$state trained content PipeOp Graph.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"content :: PipeOp | Graph PipeOp Graph proxied (object converted Graph as_graph()). Defaults instance PipeOpFeatureUnion (combines input Tasks).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"content internally coerced graph via as_graph() prior train predict. default value content PipeOpFeatureUnion,","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"Fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_proxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap another PipeOp or Graph as a Hyperparameter — mlr_pipeops_proxy","text":"","code":"library(\"mlr3\")  set.seed(1234) task = tsk(\"iris\")  # use a proxy for preprocessing and a proxy for learning, i.e., # no preprocessing and classif.rpart g = po(\"proxy\", id = \"preproc\", param_vals = list(content = po(\"nop\"))) %>>%   po(\"proxy\", id = \"learner\", param_vals = list(content = lrn(\"classif.rpart\"))) rr_rpart = resample(task, learner = GraphLearner$new(g), resampling = rsmp(\"cv\", folds = 3)) rr_rpart$aggregate(msr(\"classif.ce\")) #> classif.ce  #> 0.05333333   # use pca for preprocessing and classif.rpart as the learner g$param_set$values$preproc.content = po(\"pca\") g$param_set$values$learner.content = lrn(\"classif.rpart\") rr_pca_rpart = resample(task, learner = GraphLearner$new(g), resampling = rsmp(\"cv\", folds = 3)) rr_pca_rpart$aggregate(msr(\"classif.ce\")) #> classif.ce  #>       0.06"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"Splits numeric features quantile bins.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"id :: character(1) Identifier resulting object, default \"quantilebin\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpQuantileBin$new(id = \"quantilebin\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric features replaced binned versions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : bins :: list  List intervals representing bins numeric feature.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"parameters parameters inherited PipeOpTaskPreproc, well : numsplits  :: integer(1)  Number bins create. Default 2.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"Uses stats::quantile function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_quantilebin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Numeric Features into Quantile Bins — mlr_pipeops_quantilebin","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"quantilebin\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <ord>       <ord>        <ord>       <ord> #>   1:    setosa  (-Inf,4.35]  (-Inf,1.3]   (-Inf,5.8]    (3, Inf] #>   2:    setosa  (-Inf,4.35]  (-Inf,1.3]   (-Inf,5.8]    (-Inf,3] #>   3:    setosa  (-Inf,4.35]  (-Inf,1.3]   (-Inf,5.8]    (3, Inf] #>   4:    setosa  (-Inf,4.35]  (-Inf,1.3]   (-Inf,5.8]    (3, Inf] #>   5:    setosa  (-Inf,4.35]  (-Inf,1.3]   (-Inf,5.8]    (3, Inf] #>  ---                                                             #> 146: virginica  (4.35, Inf]  (1.3, Inf]   (5.8, Inf]    (-Inf,3] #> 147: virginica  (4.35, Inf]  (1.3, Inf]   (5.8, Inf]    (-Inf,3] #> 148: virginica  (4.35, Inf]  (1.3, Inf]   (5.8, Inf]    (-Inf,3] #> 149: virginica  (4.35, Inf]  (1.3, Inf]   (5.8, Inf]    (3, Inf] #> 150: virginica  (4.35, Inf]  (1.3, Inf]   (5.8, Inf]    (-Inf,3]  pop$state #> $bins #> $bins$Petal.Length #> [1] -Inf 4.35  Inf #>  #> $bins$Petal.Width #> [1] -Inf  1.3  Inf #>  #> $bins$Sepal.Length #> [1] -Inf  5.8  Inf #>  #> $bins$Sepal.Width #> [1] -Inf    3  Inf #>  #>  #> $dt_columns #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length ordered #> 2:  Petal.Width ordered #> 3: Sepal.Length ordered #> 4:  Sepal.Width ordered #>  #> $outtaskshell #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":null,"dir":"Reference","previous_headings":"","what":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"Projects numeric features onto randomly sampled subspace. numeric features (ones selected affect_columns) replaced numeric features PR1, PR2, ... PRn Samples features contain missing values result PR1..PRn NA sample, advised imputation random projections missing values can expected.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"id :: character(1) Identifier resulting object, default \"randomprojection\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpRandomProjection$new(id = \"randomprojection\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric features projected onto random subspace.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"$state named list $state elements inherited PipeOpTaskPreproc, well element $projection, matrix.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"parameters parameters inherited PipeOpTaskPreproc, well : rank :: integer(1) dimension subspace project onto. Initialized 1.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"n (affected) numeric features input Task, $state$projection rank x m matrix. output calculated input %*% state$projection. random projection matrix obtained Gram-Schmidt orthogonalization matrix values standard normally distributed, gives distribution rotation invariant, per Eaton: Multivariate Statistics, Vector Space Approach, Pg. 234.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomprojection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project Numeric Features onto a Randomly Sampled Subspace — mlr_pipeops_randomprojection","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"randomprojection\", rank = 2)  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species       PR1       PR2 #>         <fctr>     <num>     <num> #>   1:    setosa -3.940642 -4.540791 #>   2:    setosa -3.553407 -4.199705 #>   3:    setosa -3.610673 -4.179699 #>   4:    setosa -3.619223 -4.012498 #>   5:    setosa -3.993417 -4.516007 #>  ---                               #> 146: virginica -4.676199 -5.418214 #> 147: virginica -4.353197 -4.785079 #> 148: virginica -4.787989 -5.121619 #> 149: virginica -4.966248 -5.193520 #> 150: virginica -4.731992 -4.643445  pop$state #> $projection #>                     PR1        PR2 #> Petal.Length -0.4828504  0.2956250 #> Petal.Width   0.4901167 -0.5457836 #> Sepal.Length -0.1762255 -0.6642988 #> Sepal.Width  -0.7039785 -0.4164531 #>  #> $dt_columns #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>        id    type #>    <char>  <char> #> 1:    PR1 numeric #> 2:    PR2 numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 3 cols): Species,PR1,PR2 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"Takes Prediction predict_type \"prob\" (PredictionClassif) \"se\" (PredictionRegr) generates randomized \"response\" prediction. \"prob\", responses sampled according probabilities input PredictionClassif. \"se\", responses randomly drawn according rdistfun parameter (default rnorm) using original responses input PredictionRegr mean original standard errors input PredictionRegr standard deviation (sampling done observation-wise).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"id :: character(1) Identifier resulting object, default \"randomresponse\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list(). packages :: character Set required packages private$.predict() methods related rdistfun parameter. Default character(0).","code":"PipeOpRandomResponse$new(id = \"randomresponse\", param_vals = list(), packages = character(0))"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"PipeOpRandomResponse one input channel named \"input\", taking NULL training Prediction prediction. PipeOpRandomResponse one output channel named \"output\", producing NULL training Prediction random responses prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"rdistfun :: function  function generating random responses predict type \"se\". function must accept arguments n (integerish number responses), mean (numeric mean), sd (numeric  standard deviation), must vectorize mean sd. Default rnorm.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"predict_type input Prediction match \"prob\" \"se\", input Prediction returned unaltered.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_randomresponse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Randomized Response Prediction — mlr_pipeops_randomresponse","text":"","code":"library(mlr3) library(mlr3learners)  task1 = tsk(\"iris\") g1 = LearnerClassifRpart$new() %>>% PipeOpRandomResponse$new() g1$train(task1) #> $randomresponse.output #> NULL #>  g1$pipeops$classif.rpart$learner$predict_type = \"prob\" set.seed(2409) g1$predict(task1) #> $randomresponse.output #>  #> ── <PredictionClassif> for 150 observations: ─────────────────────────────────── #>  row_ids     truth  response #>        1    setosa    setosa #>        2    setosa    setosa #>        3    setosa    setosa #>      ---       ---       --- #>      148 virginica virginica #>      149 virginica virginica #>      150 virginica virginica #>   task2 = tsk(\"mtcars\") g2 = LearnerRegrLM$new() %>>% PipeOpRandomResponse$new() g2$train(task2) #> $randomresponse.output #> NULL #>  g2$pipeops$regr.lm$learner$predict_type = \"se\" set.seed(2906) g2$predict(task2) #> $randomresponse.output #>  #> ── <PredictionRegr> for 32 observations: ─────────────────────────────────────── #>  row_ids truth response #>        1  21.0 23.76570 #>        2  21.0 21.28602 #>        3  22.8 27.52332 #>      ---   ---      --- #>       30  19.7 16.99001 #>       31  15.0 13.88306 #>       32  21.4 22.80808 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Prediction Averaging — mlr_pipeops_regravg","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"Perform (weighted) prediction averaging regression Predictions connecting PipeOpRegrAvg multiple PipeOpLearner outputs. resulting \"response\" prediction weighted average incoming \"response\" predictions. \"se\" prediction currently aggregated discarded present. Weights can set parameter; none provided, defaults equal weights prediction. Defaults equal weights model.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"R6Class inheriting PipeOpEnsemble/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"innum :: numeric(1) Determines number input channels. innum 0 (default), vararg input channel created can take arbitrary number inputs. collect_multiplicity :: logical(1) TRUE, input Multiplicity collecting channel. means, Multiplicity input, instead multiple normal inputs, accepted members aggregated. requires innum 0. Default FALSE. id :: character(1) Identifier resulting  object, default \"regravg\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpRegrAvg$new(innum = 0, collect_multiplicity = FALSE, id = \"regravg\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"Input output channels inherited PipeOpEnsemble. Instead Prediction, PredictionRegr used input output prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"parameters parameters inherited PipeOpEnsemble.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"Inherits PipeOpEnsemble implementing private$weighted_avg_predictions() method.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"methods inherited PipeOpEnsemble/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_regravg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Prediction Averaging — mlr_pipeops_regravg","text":"","code":"library(\"mlr3\")  # Simple Bagging gr = ppl(\"greplicate\",   po(\"subsample\") %>>%   po(\"learner\", lrn(\"classif.rpart\")),   n = 5 ) %>>%   po(\"classifavg\")  resample(tsk(\"iris\"), GraphLearner$new(gr), rsmp(\"holdout\")) #>  #> ── <ResampleResult> with 1 resampling iterations ─────────────────────────────── #>  task_id #>     iris #>                                                                                                                                              learner_id #>  subsample_1.subsample_2.subsample_3.subsample_4.subsample_5.classif.rpart_1.classif.rpart_2.classif.rpart_3.classif.rpart_4.classif.rpart_5.classifavg #>  resampling_id iteration               prediction_test warnings errors #>        holdout         1 <environment: 0x5598e9059390>        0      0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_removeconstants.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Constant Features — mlr_pipeops_removeconstants","title":"Remove Constant Features — mlr_pipeops_removeconstants","text":"Remove constant features mlr3::Task. feature, calculates ratio features differ mode value. features ratio settable threshold removed task. Missing values can ignored treated regular value distinct non-missing values.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_removeconstants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Remove Constant Features — mlr_pipeops_removeconstants","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_removeconstants.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Remove Constant Features — mlr_pipeops_removeconstants","text":"id :: character(1) Identifier resulting  object, defaulting \"removeconstants\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpRemoveConstants$new(id = \"removeconstants\")"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_removeconstants.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Remove Constant Features — mlr_pipeops_removeconstants","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : features :: character() Names features kept. Features types Filter can operate always kept.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_removeconstants.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Remove Constant Features — mlr_pipeops_removeconstants","text":"parameters parameters inherited PipeOpTaskPreproc, well : ratio :: numeric(1) Ratio values must different mode value order keep feature task. Initialized 0, means constant features exactly one observed level removed. rel_tol :: numeric(1) Relative tolerance within consider numeric feature constant. Set 0 disregard relative tolerance. Initialized 1e-8. abs_tol :: numeric(1) Absolute tolerance within consider numeric feature constant. Set 0 disregard absolute tolerance. Initialized 1e-8. na_ignore :: logical(1) TRUE, ratio calculated removing missing values first, column can \"constant\" even values NA. Initialized TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_removeconstants.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Remove Constant Features — mlr_pipeops_removeconstants","text":"Fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_removeconstants.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Remove Constant Features — mlr_pipeops_removeconstants","text":"Methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_removeconstants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Constant Features — mlr_pipeops_removeconstants","text":"","code":"library(\"mlr3\") data = data.table::data.table(y = runif(10), a = 1:10, b = rep(1, 10), c = rep(1:2, each = 5))  task = TaskRegr$new(\"example\", data, target = \"y\")  po = po(\"removeconstants\")  po$train(list(task = task))[[1]]$data() #>              y     a     c #>          <num> <int> <int> #>  1: 0.76530451     1     1 #>  2: 0.54021206     2     1 #>  3: 0.06709176     3     1 #>  4: 0.02093449     4     1 #>  5: 0.80938970     5     1 #>  6: 0.60619806     6     2 #>  7: 0.81683238     7     2 #>  8: 0.05684676     8     2 #>  9: 0.93568457     9     2 #> 10: 0.81349684    10     2  po$state #> $features #> [1] \"a\" \"c\" #>  #> $affected_cols #> [1] \"a\" \"b\" \"c\" #>  #> $intasklayout #> Key: <id> #>        id    type #>    <char>  <char> #> 1:      a integer #> 2:      b numeric #> 3:      c integer #>  #> $outtasklayout #> Key: <id> #>        id    type #>    <char>  <char> #> 1:      a integer #> 2:      c integer #>  #> $outtaskshell #> Empty data.table (0 rows and 3 cols): y,a,c #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Columns — mlr_pipeops_renamecolumns","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"Renames columns Task training prediction. Uses $rename() mutator Task.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"id :: character(1) Identifier resulting object, default \"renamecolumns\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpRenameColumns$new(id = \"renamecolumns\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"Input output channels inherited PipeOpTaskPreproc. output input Task old column names changed new ones.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"parameters parameters inherited PipeOpTaskPreproc, well : renaming :: named character Named character vector. names vector specify old column names changed new column names given elements vector. Initialized empty character vector. ignore_missing :: logical(1) Ignore columns named renaming found input Task. FALSE, names found renaming found Task cause error. Initialized FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"Uses $rename() mutator Task set new column names.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_renamecolumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Columns — mlr_pipeops_renamecolumns","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"renamecolumns\", param_vals = list(renaming = c(\"Petal.Length\" = \"PL\"))) pop$train(list(task)) #> $output #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): PL, Petal.Width, Sepal.Length, Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"Replicate input Multiplicity, causing subsequent PipeOps executed multiple reps times. Note Multiplicity currently experimental features implementation UI may change.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"id :: character(1) Identifier resulting object, default \"replicate\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpReplicate$new(id = \"replicate\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"PipeOpReplicate one input channel named \"input\", taking input (\"*\") training prediction. PipeOpReplicate one output channel named \"output\" returning replicated input Multiplicity type (\"[*]\") training prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"reps :: numeric(1) Integer indicating number times input replicated.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_replicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replicate the Input as a Multiplicity — mlr_pipeops_replicate","text":"","code":"library(\"mlr3\") task = tsk(\"iris\") po = po(\"replicate\", param_vals = list(reps = 3)) po$train(list(task)) #> $output #> Multiplicity: #> [[1]] #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> [[2]] #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> [[3]] #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #>  po$predict(list(task)) #> $output #> Multiplicity: #> [[1]] #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> [[2]] #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> [[3]] #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"Applies function row task. Use affect_columns parameter inherited PipeOpTaskPreprocSimple limit columns function applied .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"id :: character(1) Identifier resulting object, default \"rowapply\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpColApply$new(id = \"rowapply\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"Input output channels inherited PipeOpTaskPreproc. output input Task original affected columns replaced columns created applying applicator row.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"parameters parameters inherited PipeOpTaskPreproc, well : applicator :: function Function apply row affected columns task. return value vector length every input. Initialized identity(). col_prefix :: character(1) specified, prefix prepended column names affected columns, separated dot (.). Initialized \"\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"Calls apply data, using value applicator FUN.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_rowapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Function to each Row of a Task — mlr_pipeops_rowapply","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pora = po(\"rowapply\", applicator = scale) pora$train(list(task))[[1]]  # rows are standardized #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Center and Scale Numeric Features — mlr_pipeops_scale","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"Centers numeric features mean = 0 (center parameter TRUE) scales dividing root-mean-square (scale parameter TRUE). root-mean-square defined sqrt(sum(x^2)/(length(x)-1)). center parameter TRUE, corresponds sd().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"id :: character(1) Identifier resulting object, default \"scale\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpScale$new(id = \"scale\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric parameters centered /scaled.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : center :: numeric mean / median (depending robust) numeric feature training, 0 center FALSE. subtracted predict phase. scale :: numeric value features divided. 1 scale FALSE robust FALSE, root mean square, defined sqrt(sum(x^2)/(length(x)-1)), feature, possibly centering. robust TRUE, median absolute deviation multiplied 1.4826 (see stats::mad) feature, possibly centering. 1 features constant training center TRUE, avoid division--zero.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"parameters parameters inherited PipeOpTaskPreproc, well : center :: logical(1) Whether center  features, .e. subtract mean() . Default TRUE. scale :: logical(1) Whether scale features, .e. divide sqrt(sum(x^2)/(length(x)-1)). Default TRUE. robust :: logical(1) Whether use robust scaling; instead scaling / centering mean / standard deviation, median median absolute deviation mad used. Initialized FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"Imitates scale() function robust = FALSE alternatively subtracts median divides mad robust = TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Center and Scale Numeric Features — mlr_pipeops_scale","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pos = po(\"scale\")  pos$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa   -1.3357516  -1.3110521  -0.89767388  1.01560199 #>   2:    setosa   -1.3357516  -1.3110521  -1.13920048 -0.13153881 #>   3:    setosa   -1.3923993  -1.3110521  -1.38072709  0.32731751 #>   4:    setosa   -1.2791040  -1.3110521  -1.50149039  0.09788935 #>   5:    setosa   -1.3357516  -1.3110521  -1.01843718  1.24503015 #>  ---                                                             #> 146: virginica    0.8168591   1.4439941   1.03453895 -0.13153881 #> 147: virginica    0.7035638   0.9192234   0.55148575 -1.27867961 #> 148: virginica    0.8168591   1.0504160   0.79301235 -0.13153881 #> 149: virginica    0.9301544   1.4439941   0.43072244  0.78617383 #> 150: virginica    0.7602115   0.7880307   0.06843254 -0.13153881  one_line_of_iris = task$filter(13)  one_line_of_iris$data() #>    Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>     <fctr>        <num>       <num>        <num>       <num> #> 1:  setosa          1.4         0.1          4.8           3  pos$predict(list(one_line_of_iris))[[1]]$data() #>    Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>     <fctr>        <num>       <num>        <num>       <num> #> 1:  setosa    -1.335752   -1.442245    -1.259964  -0.1315388"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalemaxabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","title":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","text":"Scales numeric data columns maximum absolute value maxabs, possible. NA, Inf ignored, features constant 0 scaled.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalemaxabs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalemaxabs.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","text":"id :: character(1) Identifier resulting object, default \"scalemaxabs\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpScaleMaxAbs$new(id = \"scalemaxabs\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalemaxabs.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","text":"Input output channels inherited PipeOpTaskPreproc. output input Task scaled numeric features.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalemaxabs.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","text":"$state named list $state elements inherited PipeOpTaskPreproc, well maximum absolute values numeric feature.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalemaxabs.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","text":"parameters parameters inherited PipeOpTaskPreproc, well : maxabs  :: numeric(1)  maximum absolute value column transformation. Default 1.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalemaxabs.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalemaxabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale Numeric Features with Respect to their Maximum Absolute Value — mlr_pipeops_scalemaxabs","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"scalemaxabs\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa    0.2028986        0.08    0.6455696   0.7954545 #>   2:    setosa    0.2028986        0.08    0.6202532   0.6818182 #>   3:    setosa    0.1884058        0.08    0.5949367   0.7272727 #>   4:    setosa    0.2173913        0.08    0.5822785   0.7045455 #>   5:    setosa    0.2028986        0.08    0.6329114   0.8181818 #>  ---                                                             #> 146: virginica    0.7536232        0.92    0.8481013   0.6818182 #> 147: virginica    0.7246377        0.76    0.7974684   0.5681818 #> 148: virginica    0.7536232        0.80    0.8227848   0.6818182 #> 149: virginica    0.7826087        0.92    0.7848101   0.7727273 #> 150: virginica    0.7391304        0.72    0.7468354   0.6818182  pop$state #> $Petal.Length #> [1] 6.9 #>  #> $Petal.Width #> [1] 2.5 #>  #> $Sepal.Length #> [1] 7.9 #>  #> $Sepal.Width #> [1] 4.4 #>  #> $dt_columns #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":null,"dir":"Reference","previous_headings":"","what":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"Linearly transforms numeric data columns lower upper. formula \\(x' = offset + x * scale\\), \\(scale\\) \\((upper - lower) / (max(x) - min(x))\\) \\(offset\\) \\(-min(x) * scale + lower\\). transformation applied training prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"id :: character(1) Identifier resulting object, default \"scalerange\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpScaleRange$new(id = \"scalerange\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"Input output channels inherited PipeOpTaskPreproc. output input Task scaled numeric features.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"$state named list $state elements inherited PipeOpTaskPreproc, well two transformation parameters \\(scale\\) \\(offset\\) numeric feature.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"parameters parameters inherited PipeOpTaskPreproc, well : lower :: numeric(1) Target value smallest item input data. Initialized 0. upper :: numeric(1) Target value greatest item input data. Initialized 1.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_scalerange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linearly Transform Numeric Features to Match Given Boundaries — mlr_pipeops_scalerange","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"scalerange\", param_vals = list(lower = -1, upper = 1))  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa   -0.8644068  -0.9166667  -0.55555556  0.25000000 #>   2:    setosa   -0.8644068  -0.9166667  -0.66666667 -0.16666667 #>   3:    setosa   -0.8983051  -0.9166667  -0.77777778  0.00000000 #>   4:    setosa   -0.8305085  -0.9166667  -0.83333333 -0.08333333 #>   5:    setosa   -0.8644068  -0.9166667  -0.61111111  0.33333333 #>  ---                                                             #> 146: virginica    0.4237288   0.8333333   0.33333333 -0.16666667 #> 147: virginica    0.3559322   0.5000000   0.11111111 -0.58333333 #> 148: virginica    0.4237288   0.5833333   0.22222222 -0.16666667 #> 149: virginica    0.4915254   0.8333333   0.05555556  0.16666667 #> 150: virginica    0.3898305   0.4166667  -0.11111111 -0.16666667  pop$state #> $Petal.Length #>      scale     offset  #>  0.3389831 -1.3389831  #>  #> $Petal.Width #>      scale     offset  #>  0.8333333 -1.0833333  #>  #> $Sepal.Length #>      scale     offset  #>  0.5555556 -3.3888889  #>  #> $Sepal.Width #>      scale     offset  #>  0.8333333 -2.6666667  #>  #> $dt_columns #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Features Depending on a Selector — mlr_pipeops_select","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"Removes features Task depending Selector function: selector parameter gives features keep. See Selector selectors provided write custom Selectors.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"id :: character(1) Identifier resulting object, default \"select\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpSelect$new(id = \"select\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"Input output channels inherited PipeOpTaskPreproc. output input Task features removed selected Selector/function selector.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : selection :: character vector feature names kept (.e. dropped) Task. Initialized selector_all()","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"parameters parameters inherited PipeOpTaskPreproc, well : selector :: function | Selector Selector function, takes Task argument returns character features keep. See Selector example functions. Defaults selector_all().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"Uses task$select().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Features Depending on a Selector — mlr_pipeops_select","text":"","code":"library(\"mlr3\")  task = tsk(\"boston_housing\") pos = po(\"select\")  pos$param_set$values$selector = selector_all() pos$train(list(task))[[1]]$feature_names #>  [1] \"age\"     \"b\"       \"chas\"    \"crim\"    \"dis\"     \"indus\"   \"lat\"     #>  [8] \"lon\"     \"lstat\"   \"nox\"     \"ptratio\" \"rad\"     \"rm\"      \"tax\"     #> [15] \"town\"    \"tract\"   \"zn\"       pos$param_set$values$selector = selector_type(\"factor\") pos$train(list(task))[[1]]$feature_names #> [1] \"chas\" \"town\"  pos$param_set$values$selector = selector_invert(selector_type(\"factor\")) pos$train(list(task))[[1]]$feature_names #>  [1] \"age\"     \"b\"       \"crim\"    \"dis\"     \"indus\"   \"lat\"     \"lon\"     #>  [8] \"lstat\"   \"nox\"     \"ptratio\" \"rad\"     \"rm\"      \"tax\"     \"tract\"   #> [15] \"zn\"       pos$param_set$values$selector = selector_grep(\"^r\") pos$train(list(task))[[1]]$feature_names #> [1] \"rad\" \"rm\""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":null,"dir":"Reference","previous_headings":"","what":"SMOTE Balancing — mlr_pipeops_smote","title":"SMOTE Balancing — mlr_pipeops_smote","text":"Generates balanced data set creating synthetic instances minority class using SMOTE algorithm. algorithm samples minority instance new data point based K nearest neighbors data point. can applied tasks purely numeric features. See smotefamily::SMOTE details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SMOTE Balancing — mlr_pipeops_smote","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"SMOTE Balancing — mlr_pipeops_smote","text":"id :: character(1) Identifier resulting object, default \"smote\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpSmote$new(id = \"smote\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"SMOTE Balancing — mlr_pipeops_smote","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif used input output training prediction. output training input Task added synthetic rows minority class. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"SMOTE Balancing — mlr_pipeops_smote","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"SMOTE Balancing — mlr_pipeops_smote","text":"parameters parameters inherited PipeOpTaskPreproc, well : K :: numeric(1)  number nearest neighbors used sampling new values. See SMOTE(). dup_size :: numeric  Desired times synthetic minority instances original number majority instances. See SMOTE().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"SMOTE Balancing — mlr_pipeops_smote","text":"target level unobserved training, synthetic data points generated class. error raised; unobserved class simply ignored.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"SMOTE Balancing — mlr_pipeops_smote","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SMOTE Balancing — mlr_pipeops_smote","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SMOTE Balancing — mlr_pipeops_smote","text":"Chawla NV, Bowyer KW, Hall LO, Kegelmeyer WP (2002). “SMOTE: Synthetic Minority -sampling Technique.” Journal Artificial Intelligence Research, 16, 321–357. doi:10.1613/jair.953 .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smote.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SMOTE Balancing — mlr_pipeops_smote","text":"","code":"library(\"mlr3\")  # Create example task data = smotefamily::sample_generator(1000, ratio = 0.80) data$result = factor(data$result) task = TaskClassif$new(id = \"example\", backend = data, target = \"result\") task$data() #>       result         X1         X2 #>       <fctr>      <num>      <num> #>    1:      n 0.89626661 0.95115723 #>    2:      n 0.55213728 0.71757150 #>    3:      n 0.25677958 0.41357023 #>    4:      p 0.46838057 0.57479088 #>    5:      n 0.13532564 0.90003515 #>   ---                              #>  996:      n 0.85093931 0.59659210 #>  997:      n 0.37945431 0.85702559 #>  998:      n 0.02663346 0.57191021 #>  999:      p 0.42739162 0.28879513 #> 1000:      n 0.74375332 0.01700384 table(task$data()$result) #>  #>   n   p  #> 827 173   # Generate synthetic data for minority class pop = po(\"smote\") smotedata = pop$train(list(task))[[1]]$data() table(smotedata$result) #>  #>   n   p  #> 827 692"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":null,"dir":"Reference","previous_headings":"","what":"SMOTENC Balancing — mlr_pipeops_smotenc","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"Generates balanced data set creating synthetic instances minority class nominal continuous data using SMOTENC algorithm. algorithm generates minority instance new data point based k nearest neighbors data point. treats integer features numeric. change feature types, numeric, synthetic data generated features rounded back integer. , data generated usage PipeOp exactly equal data generated calling themis::smotenc directly data set. can applied classification tasks factor (ordered) features least one numeric (integer) feature missing values. See themis::smotenc details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"id :: character(1) Identifier resulting object, default \"smotenc\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpSmoteNC$new(id = \"smotenc\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif used input output training prediction. output training input Task added synthetic rows minority class. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"parameters parameters inherited PipeOpTaskPreproc, well : k :: integer(1) Number nearest neighbors used generating new values minority class. Default 5. over_ratio :: numeric(1) Ratio majority minority class. Default 1. details, see themis::smotenc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"target level unobserved training, synthetic data points generated class. error raised; unobserved class simply ignored.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"Chawla NV, Bowyer KW, Hall LO, Kegelmeyer WP (2002). “SMOTE: Synthetic Minority -sampling Technique.” Journal Artificial Intelligence Research, 16, 321–357. doi:10.1613/jair.953 .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_smotenc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SMOTENC Balancing — mlr_pipeops_smotenc","text":"","code":"library(\"mlr3\")  # Create example task data = data.frame(   target = factor(sample(c(\"c1\", \"c2\"), size = 200, replace = TRUE, prob = c(0.1, 0.9))),   feature = rnorm(200) ) task = TaskClassif$new(id = \"example\", backend = data, target = \"target\") task$head() #>    target    feature #>    <fctr>      <num> #> 1:     c2  0.9923314 #> 2:     c2 -1.5280368 #> 3:     c2 -1.0506843 #> 4:     c2  0.9256427 #> 5:     c2 -1.0820668 #> 6:     c2 -0.9316755 table(task$data(cols = \"target\")) #> target #>  c1  c2  #>  18 182   # Generate synthetic data for minority class pop = po(\"smotenc\") smotenc_result = pop$train(list(task))[[1]]$data() nrow(smotenc_result) #> [1] 364 table(smotenc_result$target) #>  #>  c1  c2  #> 182 182"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Data Row-wise — mlr_pipeops_spatialsign","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"Normalizes data row-wise. natural generalization \"sign\" function higher dimensions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"R6Class object inheriting PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"id :: character(1) Identifier resulting object, default \"spatialsign\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpSpatialSign$new(id = \"spatialsign\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric features replaced normalized versions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"parameters parameters inherited PipeOpTaskPreproc, well : length  :: numeric(1)  Length scale rows . Default 1. norm :: numeric(1)  Norm use. Rows scaled sum(x^norm)^(1/norm) == length finite norm, max(abs(x)) == length norm Inf. Default 2.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"methods inherited PipeOpTaskPreprocSimple/PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_spatialsign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Data Row-wise — mlr_pipeops_spatialsign","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0  pop = po(\"spatialsign\")  pop$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa    0.2206435  0.03152050    0.8037728   0.5516088 #>   2:    setosa    0.2366094  0.03380134    0.8281329   0.5070201 #>   3:    setosa    0.2227517  0.03426949    0.8053331   0.5483119 #>   4:    setosa    0.2608794  0.03478392    0.8000302   0.5391508 #>   5:    setosa    0.2214702  0.03163860    0.7909650   0.5694948 #>  ---                                                             #> 146: virginica    0.5600146  0.24769876    0.7215572   0.3230853 #> 147: virginica    0.5790902  0.22005426    0.7296536   0.2895451 #> 148: virginica    0.5732312  0.22047353    0.7165390   0.3307103 #> 149: virginica    0.5876164  0.25028107    0.6746707   0.3699807 #> 150: virginica    0.5966647  0.21058754    0.6902592   0.3509792"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsampling — mlr_pipeops_subsample","title":"Subsampling — mlr_pipeops_subsample","text":"Subsamples Task use fraction rows. Sampling happens training phase. Subsampling Task may beneficial training time possibly (depending original Task size) negligible cost predictive performance.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subsampling — mlr_pipeops_subsample","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Subsampling — mlr_pipeops_subsample","text":"id :: character(1) Identifier resulting  object, default \"subsample\" param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpSubsample$new(id = \"subsample\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Subsampling — mlr_pipeops_subsample","text":"Input output channels inherited PipeOpTaskPreproc. output training input Task added removed rows according sampling. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Subsampling — mlr_pipeops_subsample","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Subsampling — mlr_pipeops_subsample","text":"parameters parameters inherited PipeOpTaskPreproc; however, affect_columns parameter present. parameters : frac :: numeric(1) Fraction rows Task keep. May greater 1 replace TRUE. Initialized (1 - exp(-1)) == 0.6321. stratify :: logical(1) subsamples stratified target? Initialized FALSE. May TRUE TaskClassif input use_groups = FALSE. use_groups :: logical(1) TRUE Task column role group, grouped observations kept together subsampling. case  sampling replace :: logical(1) Sample replacement? Initialized FALSE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Subsampling — mlr_pipeops_subsample","text":"Uses task$filter() remove rows. replace TRUE identical rows added, task$row_roles$use can used duplicate rows [inaudible]; instead task$rbind() function used, new data.table attached contains rows duplicated exactly many times added.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Subsampling — mlr_pipeops_subsample","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Subsampling — mlr_pipeops_subsample","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_subsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsampling — mlr_pipeops_subsample","text":"","code":"library(\"mlr3\")  # Subsample with stratification pop = po(\"subsample\", frac = 0.7, stratify = TRUE, use_groups = FALSE) pop$train(list(tsk(\"iris\"))) #> $output #>  #> ── <TaskClassif> (105x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa (33%), versicolor (33%), virginica (33%) #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>   # Subsample, respecting grouping df = data.frame(   target = runif(3000),   x1 = runif(3000),   x2 = runif(3000),   grp = sample(paste0(\"g\", 1:100), 3000, replace = TRUE) ) task = TaskRegr$new(id = \"example\", backend = df, target = \"target\") task$set_col_roles(\"grp\", \"group\")  pop = po(\"subsample\", frac = 0.7, use_groups = TRUE) pop$train(list(task)) #> $output #>  #> ── <TaskRegr> (2111x3) ───────────────────────────────────────────────────────── #> • Target: target #> • Properties: groups #> • Features (2): #>   • dbl (2): x1, x2 #> • Groups: grp #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert Target Transformations — mlr_pipeops_targetinvert","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"Inverts target-transformations done training based supplied inversion function. Typically used combination subclass PipeOpTargetTrafo. prediction phase function supplied \"fun\" called list containing \"prediction\" single element, return list single element (Prediction) returned PipeOpTargetInvert.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"id :: character(1) Identifier resulting object, default \"targetinvert\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpTargetInvert$new(id = \"targetinvert\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"PipeOpTargetInvert two input channels named \"fun\" \"prediction\". training, take NULL input. prediction, \"fun\" takes function \"prediction\" takes Prediction. PipeOpTargetInvert one output channel named \"output\" returns NULL training Prediction prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"PipeOpTargetInvert parameters.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"used combination subclass PipeOpTargetTrafo.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetinvert.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Invert Target Transformations — mlr_pipeops_targetinvert","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a Target by a Function — mlr_pipeops_targetmutate","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"Changes target Task according function given hyperparameter. inverter-function undoes transformation prediction must also given.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"R6Class object inheriting PipeOpTargetTrafo/PipeOp","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"id :: character(1) Identifier resulting object, default \"targetmutate\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list(). new_task_type :: character(1) | NULL task type output converted, must one mlr_reflections$task_types$type. Defaults NULL: change task type.","code":"PipeOpTargetMutate$new(id = \"targetmutate\", param_vals = list(), new_task_type = NULL)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"Input output channels inherited PipeOpTargetTrafo.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"parameters parameters inherited PipeOpTargetTrafo, well : trafo :: function data.table -> data.frame | data.table | matrix Transformation function target. function target, .e., taking single data.table argument, typically one column. return value used new target resulting Task. change target names, change column name data using e.g. setnames(). Note function also gets called prediction thus gracefully handle NA values. Initialized identity(). inverter :: function data.table -> data.table | named list Inversion transformation function target. Called data.table created Prediction using .data.table(), without $row_ids $truth columns, return data.table named list contains new relevant slots Prediction subclass (e.g., $response, $prob, $se, ...). Initialized identity().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"Overloads PipeOpTargetTrafo's .transform() .invert() functions. used combination PipeOpTargetInvert.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"Fields inherited PipeOp, well : new_task_type :: character(1)new_task_type construction argument. Read-.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"methods inherited PipeOpTargetTrafo/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targetmutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a Target by a Function — mlr_pipeops_targetmutate","text":"","code":"library(mlr3) task = tsk(\"boston_housing\") po = PipeOpTargetMutate$new(\"logtrafo\", param_vals = list(   trafo = function(x) log(x, base = 2),   inverter = function(x) list(response = 2 ^ x$response)) ) # Note that this example is ill-equipped to work with # `predict_type == \"se\"` predictions.  po$train(list(task)) #> $fun #> NULL #>  #> $output #>  #> ── <TaskRegr> (506x18): Boston Housing Prices ────────────────────────────────── #> • Target: cmedv #> • Properties: - #> • Features (17): #>   • dbl (12): age, b, crim, dis, indus, lat, lon, lstat, nox, ptratio, rm, zn #>   • int (3): rad, tax, tract #>   • fct (2): chas, town #>  po$predict(list(task)) #> $fun #> function (inputs)  #> { #>     assert_list(inputs, len = 1L, types = \"Prediction\") #>     list(private$.invert(inputs[[1L]], predict_phase_state)) #> } #> <bytecode: 0x5598d0b31940> #> <environment: 0x5598d0b2bc18> #>  #> $output #>  #> ── <TaskRegr> (506x18): Boston Housing Prices ────────────────────────────────── #> • Target: cmedv #> • Properties: - #> • Features (17): #>   • dbl (12): age, b, crim, dis, indus, lat, lon, lstat, nox, ptratio, rm, zn #>   • int (3): rad, tax, tract #>   • fct (2): chas, town #>   g = Graph$new() g$add_pipeop(po) g$add_pipeop(LearnerRegrRpart$new()) g$add_pipeop(PipeOpTargetInvert$new()) g$add_edge(src_id = \"logtrafo\", dst_id = \"targetinvert\",   src_channel = 1, dst_channel = 1) g$add_edge(src_id = \"logtrafo\", dst_id = \"regr.rpart\",   src_channel = 2, dst_channel = 1) g$add_edge(src_id = \"regr.rpart\", dst_id = \"targetinvert\",   src_channel = 1, dst_channel = 2)  g$train(task) #> $targetinvert.output #> NULL #>  g$predict(task) #> $targetinvert.output #>  #> ── <PredictionRegr> for 506 observations: ────────────────────────────────────── #>  row_ids truth response #>        1  24.0 22.97871 #>        2  21.6 22.97871 #>        3  34.7 33.42115 #>      ---   ---      --- #>      504  23.9 25.44298 #>      505  22.0 25.44298 #>      506  19.0 20.16845 #>   #syntactic sugar using ppl(): tt = ppl(\"targettrafo\", graph = PipeOpLearner$new(LearnerRegrRpart$new())) tt$param_set$values$targetmutate.trafo = function(x) log(x, base = 2) tt$param_set$values$targetmutate.inverter = function(x) list(response = 2 ^ x$response)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":null,"dir":"Reference","previous_headings":"","what":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"Linearly transforms numeric target TaskRegr lower upper. formula \\(x' = offset + x * scale\\), \\(scale\\) \\((upper - lower) / (max(x) - min(x))\\) \\(offset\\) \\(-min(x) * scale + lower\\). transformation applied training prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"R6Class object inheriting PipeOpTargetTrafo/PipeOp","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"id :: character(1) Identifier resulting object, default \"targettrafoscalerange\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpTargetTrafoScaleRange$new(id = \"targettrafoscalerange\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"Input output channels inherited PipeOpTargetTrafo.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"$state named list containing slots $offset $scale.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"parameters parameters inherited PipeOpTargetTrafo, well : lower :: numeric(1) Target value smallest item input target. Initialized 0. upper :: numeric(1) Target value greatest item input target. Initialized 1.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"Overloads PipeOpTargetTrafo's .get_state(), .transform(), .invert(). used combination PipeOpTargetInvert.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"methods inherited PipeOpTargetTrafo/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_targettrafoscalerange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linearly Transform a Numeric Target to Match Given Boundaries — mlr_pipeops_targettrafoscalerange","text":"","code":"library(mlr3) task = tsk(\"boston_housing\") po = PipeOpTargetTrafoScaleRange$new()  po$train(list(task)) #> $fun #> NULL #>  #> $output #>  #> ── <TaskRegr> (506x18): Boston Housing Prices ────────────────────────────────── #> • Target: cmedv.scaled #> • Properties: - #> • Features (17): #>   • dbl (12): age, b, crim, dis, indus, lat, lon, lstat, nox, ptratio, rm, zn #>   • int (3): rad, tax, tract #>   • fct (2): chas, town #>  po$predict(list(task)) #> $fun #> function (inputs)  #> { #>     assert_list(inputs, len = 1L, types = \"Prediction\") #>     list(private$.invert(inputs[[1L]], predict_phase_state)) #> } #> <bytecode: 0x5598d0b31940> #> <environment: 0x5598ed5dfb80> #>  #> $output #>  #> ── <TaskRegr> (506x18): Boston Housing Prices ────────────────────────────────── #> • Target: cmedv.scaled #> • Properties: - #> • Features (17): #>   • dbl (12): age, b, crim, dis, indus, lat, lon, lstat, nox, ptratio, rm, zn #>   • int (3): rad, tax, tract #>   • fct (2): chas, town #>   #syntactic sugar for a graph using ppl(): ttscalerange = ppl(\"targettrafo\", trafo_pipeop = PipeOpTargetTrafoScaleRange$new(),   graph = PipeOpLearner$new(LearnerRegrRpart$new())) ttscalerange$train(task) #> $targetinvert.output #> NULL #>  ttscalerange$predict(task) #> $targetinvert.output #>  #> ── <PredictionRegr> for 506 observations: ────────────────────────────────────── #>  row_ids truth response #>        1  24.0 24.53538 #>        2  21.6 26.91481 #>        3  34.7 32.96875 #>      ---   ---      --- #>      504  23.9 24.53538 #>      505  22.0 24.53538 #>      506  19.0 20.96400 #>  ttscalerange$state$regr.rpart #> $model #> n= 506  #>  #> node), split, n, deviance, yval #>       * denotes terminal node #>  #>  1) root 506 21.0260400 0.3895301   #>    2) town=Arlington,Ashland,Beverly,Boston Allston-Brighton,Boston Charlestown,Boston Dorchester,Boston Downtown,Boston East Boston,Boston Forest Hills,Boston Hyde Park,Boston Mattapan,Boston North End,Boston Roxbury,Boston Savin Hill,Boston South Boston,Boston West Roxbury,Braintree,Burlington,Cambridge,Chelsea,Danvers,Dedham,Everett,Framingham,Hamilton,Hanover,Holbrook,Hull,Lynn,Malden,Marshfield,Medford,Melrose,Middleton,Millis,Nahant,Natick,Norfolk,North Reading,Norwell,Norwood,Peabody,Pembroke,Quincy,Randolph,Reading,Revere,Rockland,Salem,Sargus,Scituate,Sharon,Somerville,Stoneham,Wakefield,Walpole,Waltham,Watertown,Weymouth,Wilmington,Winthrop,Woburn 400  7.5706490 0.3174944   #>      4) lstat>=14.4 176  1.6065670 0.2189646   #>        8) town=Boston Charlestown,Boston East Boston,Boston Forest Hills,Boston North End,Boston Roxbury,Boston Savin Hill,Boston South Boston,Chelsea,Lynn 93  0.4849460 0.1569654 * #>        9) town=Arlington,Beverly,Boston Allston-Brighton,Boston Dorchester,Boston Downtown,Boston Hyde Park,Boston Mattapan,Cambridge,Everett,Framingham,Malden,Medford,Middleton,Norwood,Peabody,Quincy,Revere,Salem,Somerville,Waltham,Watertown 83  0.3635828 0.2884337 * #>      5) lstat< 14.4 224  2.9129590 0.3949107   #>       10) lstat>=4.63 215  0.9995600 0.3787494   #>         20) lstat>=7.765 150  0.5226398 0.3547556 * #>         21) lstat< 7.765 65  0.1912833 0.4341197 * #>       11) lstat< 4.63 9  0.5157443 0.7809877 * #>    3) town=Bedford,Belmont,Boston Back Bay,Boston Beacon Hill,Brookline,Canton,Cohasset,Concord,Dover,Duxbury,Hingham,Lexington,Lincoln,Lynnfield,Manchester,Marblehead,Medfield,Milton,Needham,Newton,Sherborn,Sudbury,Swampscott,Topsfield,Wayland,Wellesley,Wenham,Weston,Westwood,Winchester 106  3.5470870 0.6613627   #>      6) rm< 7.437 82  1.5639410 0.5961518   #>       12) crim< 4.12641 75  0.6617538 0.5730963   #>         24) rm< 6.727 27  0.1925600 0.4869959 * #>         25) rm>=6.727 48  0.1564460 0.6215278 * #>       13) crim>=4.12641 7  0.4351788 0.8431746 * #>      7) rm>=7.437 24  0.4430451 0.8841667 * #>  #> $param_vals #> $param_vals$xval #> [1] 0 #>  #>  #> $log #> Empty data.table (0 rows and 3 cols): stage,class,msg #>  #> $train_time #> [1] 0.008 #>  #> $task_hash #> [1] \"88d153e8827d7aff\" #>  #> $feature_names #>  [1] \"age\"     \"b\"       \"chas\"    \"crim\"    \"dis\"     \"indus\"   \"lat\"     #>  [8] \"lon\"     \"lstat\"   \"nox\"     \"ptratio\" \"rad\"     \"rm\"      \"tax\"     #> [15] \"town\"    \"tract\"   \"zn\"      #>  #> $validate #> NULL #>  #> $mlr3_version #> [1] ‘1.1.0’ #>  #> $data_prototype #> Empty data.table (0 rows and 18 cols): cmedv.scaled,age,b,chas,crim,dis... #>  #> $task_prototype #> Empty data.table (0 rows and 18 cols): cmedv.scaled,age,b,chas,crim,dis... #>  #> $train_task #>  #> ── <TaskRegr> (506x18): Boston Housing Prices ────────────────────────────────── #> • Target: cmedv.scaled #> • Properties: - #> • Features (17): #>   • dbl (12): age, b, crim, dis, indus, lat, lon, lstat, nox, ptratio, rm, zn #>   • int (3): rad, tax, tract #>   • fct (2): chas, town #>  #> attr(,\"class\") #> [1] \"learner_state\" \"list\""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"Computes bag--word representation (set ) columns. Columns type character split words. Uses quanteda::dfm() quanteda::dfm_trim() functions. TF-IDF computation works similarly quanteda::dfm_tfidf() adjusted train/test data split using quanteda::docfreq() quanteda::dfm_weight(). short: Per default, produces bag--words representation n set values > 1, ngrams computed df_trim parameters set, bag--words trimmed. scheme_tf parameter controls term-frequency (per-document, .e. per-row) weighting scheme_df parameter controls document-frequency (per token, .e. per-column) weighting. Parameters specify arguments quanteda's dfm, dfm_trim, docfreq dfm_weight. belongs can obtained parameter's tags tokenizer arguments passed quanteda::dfm(). Defaults bag--words representation token counts matrix entries. order perform default dfm_tfidf weighting, set scheme_df parameter \"inverse\". scheme_df parameter initialized \"unary\", disables document frequency weighting. PipeOp works follows: Words tokenized using quanteda::tokens. Ngrams computed using quanteda::tokens_ngrams. document-frequency matrix computed using quanteda::dfm. document-frequency matrix trimmed using quanteda::dfm_trim train-time. document-frequency matrix re-weighted (similar quanteda::dfm_tfidf) scheme_df set \"unary\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"id :: character(1) Identifier resulting object, default \"textvectorizer\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpTextVectorizer$new(id = \"textvectorizer\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected features converted bag--words representation.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : colmodels :: named list Named list one entry per extracted column. entry two elements: tdm: sparse document-feature matrix resulting quanteda::dfm() docfreq: (weighted) document frequency resulting quanteda::docfreq()","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"parameters parameters inherited PipeOpTaskPreproc, well : return_type :: character(1) Whether return integer representation (\"integer-sequence\") Bag--words (\"bow\"). set \"integer_sequence\", tokens replaced integer padded/truncated sequence_length. set \"factor_sequence\", tokens replaced factor padded/truncated sequence_length. set \"bow\", possibly weighted bag--words matrix returned. Defaults bow. stopwords_language :: character(1) Language use stopword filtering. Needs either \"none\", language identifier listed stopwords::stopwords_getlanguages(\"snowball\") (\"de\", \"en\", ...) \"smart\". \"none\" disables language-specific stopwords. \"smart\" coresponds stopwords::stopwords(source = \"smart\"), contains English stopwords also removes one-character strings. Initialized \"smart\". extra_stopwords :: character Extra stopwords remove. Must character vector containing individual tokens remove. n set values greater 1, can also contain stop-ngrams. Initialized character(0). tolower :: logical(1) Whether convert lower case. See quanteda::dfm. Default TRUE. stem :: logical(1) Whether perform stemming. See quanteda::dfm. Default FALSE. :: character(1) Tokenization splitter. See quanteda::tokens. Default \"word\". remove_punct :: logical(1) See quanteda::tokens. Default FALSE. remove_url :: logical(1) See quanteda::tokens. Default FALSE. remove_symbols :: logical(1) See quanteda::tokens. Default FALSE. remove_numbers :: logical(1) See quanteda::tokens. Default FALSE. remove_separators :: logical(1) See quanteda::tokens. Default  TRUE. split_hypens :: logical(1) See quanteda::tokens. Default FALSE. n :: integer Vector ngram lengths. See quanteda::tokens_ngrams. Initialized 1, deviating base function's default. Note can vector multiple values, construct ngrams multiple orders. skip :: integer Vector skips. See quanteda::tokens_ngrams. Default 0. Note can vector multiple values. sparsity :: numeric(1) Desired sparsity 'tfm' matrix. See quanteda::dfm_trim. Default NULL. max_termfreq :: numeric(1) Maximum term frequency 'tfm' matrix. See quanteda::dfm_trim. Default NULL. min_termfreq :: numeric(1) Minimum term frequency 'tfm' matrix. See quanteda::dfm_trim. Default NULL. termfreq_type :: character(1) asess term frequency. See quanteda::dfm_trim. Default \"count\". scheme_df :: character(1)  Weighting scheme document frequency: See quanteda::docfreq. Initialized \"unary\" (1 document, deviating base function default). smoothing_df :: numeric(1) See quanteda::docfreq. Default 0. k_df :: numeric(1)k parameter given quanteda::docfreq (see ). Default 0. threshold_df :: numeric(1) See quanteda::docfreq. Default 0. considered scheme_df set \"count\". base_df :: numeric(1) base logarithms quanteda::docfreq (see ). Default 10. scheme_tf :: character(1)  Weighting scheme term frequency: See quanteda::dfm_weight. Default \"count\". k_tf :: numeric(1)k parameter given quanteda::dfm_weight (see ). Default 0.5. base_df :: numeric(1) base logarithms quanteda::dfm_weight (see ). Default 10. sequence_length :: integer(1) length integer sequence. Defaults Inf, .e. texts padded length longest text. relevant return_type set \"integer_sequence\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"See Description. Internally uses quanteda package. Calls quanteda::tokens, quanteda::tokens_ngrams quanteda::dfm. training, quanteda::dfm_trim also called. Tokens seen training dropped prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_textvectorizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bag-of-word Representation of Character Features — mlr_pipeops_textvectorizer","text":"","code":"library(\"mlr3\") library(\"data.table\") # create some text data dt = data.table(   txt = replicate(150, paste0(sample(letters, 3), collapse = \" \")) ) task = tsk(\"iris\")$cbind(dt)  pos = po(\"textvectorizer\", param_vals = list(stopwords_language = \"en\"))  pos$train(list(task))[[1]]$data() #> 'as(<dgCMatrix>, \"dgTMatrix\")' is deprecated. #> Use 'as(., \"TsparseMatrix\")' instead. #> See help(\"Deprecated\") and help(\"Matrix-deprecated\"). #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width txt.p txt.t #>         <fctr>        <num>       <num>        <num>       <num> <num> <num> #>   1:    setosa          1.4         0.2          5.1         3.5     1     1 #>   2:    setosa          1.4         0.2          4.9         3.0     0     0 #>   3:    setosa          1.3         0.2          4.7         3.2     0     0 #>   4:    setosa          1.5         0.2          4.6         3.1     0     1 #>   5:    setosa          1.4         0.2          5.0         3.6     0     0 #>  ---                                                                         #> 146: virginica          5.2         2.3          6.7         3.0     0     1 #> 147: virginica          5.0         1.9          6.3         2.5     0     0 #> 148: virginica          5.2         2.0          6.5         3.0     0     0 #> 149: virginica          5.4         2.3          6.2         3.4     0     0 #> 150: virginica          5.1         1.8          5.9         3.0     1     0 #>      txt.v txt.m txt.j txt.g txt.x txt.l txt.s txt.h txt.b txt.f txt.z txt.q #>      <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>   1:     1     0     0     0     0     0     0     0     0     0     0     0 #>   2:     0     1     1     0     0     0     0     0     0     0     0     0 #>   3:     0     0     0     1     1     1     0     0     0     0     0     0 #>   4:     0     1     0     0     0     0     0     0     0     0     0     0 #>   5:     0     0     1     0     0     0     1     1     0     0     0     0 #>  ---                                                                         #> 146:     0     0     0     0     0     0     0     0     0     0     0     0 #> 147:     0     0     0     0     0     0     1     0     0     0     0     0 #> 148:     0     0     1     0     0     0     0     0     0     0     0     1 #> 149:     0     0     0     0     0     0     0     0     0     0     0     0 #> 150:     0     0     0     0     0     0     0     0     0     0     0     0 #>      txt.u txt.y txt.n txt.e txt.r txt.c txt.k txt.d txt.w txt.o #>      <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>   1:     0     0     0     0     0     0     0     0     0     0 #>   2:     0     0     0     0     0     0     0     0     0     0 #>   3:     0     0     0     0     0     0     0     0     0     0 #>   4:     0     0     0     0     0     0     0     0     0     0 #>   5:     0     0     0     0     0     0     0     0     0     0 #>  ---                                                             #> 146:     0     0     0     1     0     0     0     0     0     0 #> 147:     0     0     0     0     0     0     0     0     1     0 #> 148:     1     0     0     0     0     0     0     0     0     0 #> 149:     1     0     0     0     1     1     0     0     0     0 #> 150:     1     0     0     1     0     0     0     0     0     0  one_line_of_iris = task$filter(13)  one_line_of_iris$data() #>    Species Petal.Length Petal.Width Sepal.Length Sepal.Width    txt #>     <fctr>        <num>       <num>        <num>       <num> <char> #> 1:  setosa          1.4         0.1          4.8           3  r c k  pos$predict(list(one_line_of_iris))[[1]]$data() #>    Species Petal.Length Petal.Width Sepal.Length Sepal.Width txt.p txt.t txt.v #>     <fctr>        <num>       <num>        <num>       <num> <num> <num> <num> #> 1:  setosa          1.4         0.1          4.8           3     0     0     0 #>    txt.m txt.j txt.g txt.x txt.l txt.s txt.h txt.b txt.f txt.z txt.q txt.u #>    <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #> 1:     0     0     0     0     0     0     0     0     0     0     0     0 #>    txt.y txt.n txt.e txt.r txt.c txt.k txt.d txt.w txt.o #>    <num> <num> <num> <num> <num> <num> <num> <num> <num> #> 1:     0     0     0     1     1     1     0     0     0"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"Change threshold Prediction predict step. incoming Learner's $predict_type needs \"prob\". Internally calls PredictionClassif$set_threshold.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"R6Class inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"id :: character(1) Identifier resulting  object, default \"threshold\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Defaults numeric(0).","code":"PipeOpThreshold$new(id = \"threshold\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"training, input output NULL. PredictionClassif required input returned output prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"thresholds :: numeric numeric vector thresholds different class levels. May length 1 binary classification predictions, must otherwise length number target classes; see PredictionClassif's $set_threshold() method. Initialized 0.5, .e. thresholding binary classification level 0.5.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"Fields inherited PipeOp, well : predict_type :: character(1) Type prediction return. Either \"prob\" (default) \"response\". Setting \"response\" rarely used; may potentially save memory benefits.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the Threshold of a Classification Prediction — mlr_pipeops_threshold","text":"","code":"library(\"mlr3\") t = tsk(\"german_credit\") gr = po(lrn(\"classif.rpart\", predict_type = \"prob\")) %>>%   po(\"threshold\", param_vals = list(thresholds = 0.9)) gr$train(t) #> $threshold.output #> NULL #>  gr$predict(t) #> $threshold.output #>  #> ── <PredictionClassif> for 1000 observations: ────────────────────────────────── #>  row_ids truth response prob.good  prob.bad #>        1  good      bad 0.8767123 0.1232877 #>        2   bad      bad 0.1388889 0.8611111 #>        3  good      bad 0.8687090 0.1312910 #>      ---   ---      ---       ---       --- #>      998  good      bad 0.8687090 0.1312910 #>      999   bad      bad 0.3795620 0.6204380 #>     1000  good      bad 0.7391304 0.2608696 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":null,"dir":"Reference","previous_headings":"","what":"Tomek Down-Sampling — mlr_pipeops_tomek","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"Generates cleaner data set removing majority-minority Tomek links. algorithm -samples data removing pairs observations form Tomek link, .e. pair observations nearest neighbors belong different classes. numeric integer features taken account. must missing values. can applied classification tasks. Multiclass classification supported. See themis::tomek details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"id :: character(1) Identifier resulting object, default \"tomek\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpTomek$new(id = \"tomek\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskClassif used input output training prediction. output training input Task removed rows pairs observations form Tomek link. output prediction unchanged input.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"$state named list $state elements inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"parameters parameters inherited PipeOpTaskPreproc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"Tomek (1976). “Two Modifications CNN.” IEEE Transactions Systems, Man Cybernetics, 6(11), 769–772. doi:10.1109/TSMC.1976.4309452 .","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tomek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tomek Down-Sampling — mlr_pipeops_tomek","text":"","code":"library(\"mlr3\")  # Create example task task = tsk(\"iris\") task$head() #>    Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>     <fctr>        <num>       <num>        <num>       <num> #> 1:  setosa          1.4         0.2          5.1         3.5 #> 2:  setosa          1.4         0.2          4.9         3.0 #> 3:  setosa          1.3         0.2          4.7         3.2 #> 4:  setosa          1.5         0.2          4.6         3.1 #> 5:  setosa          1.4         0.2          5.0         3.6 #> 6:  setosa          1.7         0.4          5.4         3.9 table(task$data(cols = \"Species\")) #> Species #>     setosa versicolor  virginica  #>         50         50         50   # Down-sample data pop = po(\"tomek\") tomek_result = pop$train(list(task))[[1]]$data() nrow(tomek_result) #> [1] 148 table(tomek_result$Species) #>  #>     setosa versicolor  virginica  #>         50         49         49"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"Tunes optimal probability thresholds different PredictionClassifs. mlr3::Learner predict_type: \"prob\" required. Thresholds learner optimized using Optimizer supplied via param_set. Defaults GenSA. Returns single PredictionClassif. PipeOp used conjunction PipeOpLearnerCV order optimize thresholds cross-validated predictions. order optimize thresholds without cross-validation, use PipeOpLearnerCV conjunction ResamplingInsample.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"id :: character(1) Identifier resulting object. Default: \"tunethreshold\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpTuneThreshold$new(id = \"tunethreshold\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"Input output channels inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"$state named list elements thresholds :: numeric Learned thresholds;","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"parameters parameters inherited PipeOp, well : measure :: Measure  | characterMeasure optimize . converted Measure case character. Initialized \"classif.ce\", .e. misclassification error. optimizer :: Optimizer|character(1)Optimizer used find optimal thresholds. character, converts Optimizer via opt. Initialized OptimizerGenSA. log_level :: character(1) | integer(1) Set temporary log-level lgr::get_logger(\"mlr3/bbotk\"). Initialized : \"warn\".","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"Uses optimizer provided param_val order find optimal threshold. See optimizer parameter info.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"Fields inherited PipeOp, well : predict_type :: character(1) Type prediction return. Either \"prob\" (default) \"response\". Setting \"response\" rarely used; may potentially save memory benefits.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_tunethreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tune the Threshold of a Classification Prediction — mlr_pipeops_tunethreshold","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"learner_cv\", lrn(\"classif.rpart\", predict_type = \"prob\")) %>>%   po(\"tunethreshold\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(task) #> OptimInstanceSingleCrit is deprecated. Use OptimInstanceBatchSingleCrit instead. #> $tunethreshold.output #> NULL #>   pop$state #> $classif.rpart #> $model #> n= 150  #>  #> node), split, n, loss, yval, (yprob) #>       * denotes terminal node #>  #> 1) root 150 100 setosa (0.33333333 0.33333333 0.33333333)   #>   2) Petal.Length< 2.45 50   0 setosa (1.00000000 0.00000000 0.00000000) * #>   3) Petal.Length>=2.45 100  50 versicolor (0.00000000 0.50000000 0.50000000)   #>     6) Petal.Width< 1.75 54   5 versicolor (0.00000000 0.90740741 0.09259259) * #>     7) Petal.Width>=1.75 46   1 virginica (0.00000000 0.02173913 0.97826087) * #>  #> $param_vals #> $param_vals$xval #> [1] 0 #>  #>  #> $log #> Empty data.table (0 rows and 3 cols): stage,class,msg #>  #> $train_time #> [1] 0.005 #>  #> $task_hash #> [1] \"abc694dd29a7a8ce\" #>  #> $feature_names #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $validate #> NULL #>  #> $mlr3_version #> [1] ‘1.1.0’ #>  #> $data_prototype #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>  #> $task_prototype #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>  #> $train_task #>  #> ── <TaskClassif> (150x5): Iris Flowers ───────────────────────────────────────── #> • Target: Species #> • Target classes: setosa, versicolor, virginica #> • Properties: multiclass #> • Features (4): #>   • dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>                               id    type #>                           <char>  <char> #> 1:     classif.rpart.prob.setosa numeric #> 2: classif.rpart.prob.versicolor numeric #> 3:  classif.rpart.prob.virginica numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 4 cols): Species,classif.rpart.prob.setosa,classif.rpart.prob.versicolor,classif.rpart.prob.virginica #>  #> attr(,\"class\") #> [1] \"pipeop_learner_cv_state\" \"learner_state\"           #> [3] \"list\"                    #>  #> $tunethreshold #> $tunethreshold$threshold #>     setosa versicolor  virginica  #>  0.4975242  0.2218270  0.1294840  #>  #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":null,"dir":"Reference","previous_headings":"","what":"Unbranch Different Paths — mlr_pipeops_unbranch","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"Used bring together different paths created PipeOpBranch.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"R6Class object inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"options :: numeric(1) | character options 0, vararg input channel created can take number inputs. options nonzero integer number, determines number input channels / options created, named input1...input<n>. options character, determines names channels directly. difference three purely cosmetic user chooses produce channel names matching corresponding PipeOpBranch. However, necessary matching names vararg option always viable. id :: character(1) Identifier resulting object, default \"unbranch\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpUnbranch$new(options, id = \"unbranch\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"input-and-output","dir":"Reference","previous_headings":"","what":"Input and Output","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"PipeOpUnbranch multiple input channels depending options construction argument, named \"input1\", \"input2\", ... options nonzero integer named options value options character; options 0, one vararg input channel named \"...\". input channels take argument (\"*\") training prediction. PipeOpUnbranch one output channel named \"output\", producing NO_OP object received input (\"*\"), training prediction.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"$state left empty (list()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"PipeOpUnbranch parameters.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"See PipeOpBranch Internals alternative path branching works.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_unbranch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unbranch Different Paths — mlr_pipeops_unbranch","text":"","code":"# See PipeOpBranch for a complete branching example pou = po(\"unbranch\")  pou$train(list(NO_OP, NO_OP, \"hello\", NO_OP, NO_OP)) #> $output #> [1] \"hello\" #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_updatetarget.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","title":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","text":"EXPERIMENTAL, API SUBJECT CHANGE Handles target transformation operations need explicit inversion. case new target required predict, creates vector NA. Works similar PipeOpTargetTrafo PipeOpTargetMutate, forgoes inversion step. case target trafo factor, levels saved $state. prediction: Sets target values NA calling trafo . case target trafo factor, levels saved state set prediction. special case trafo identity new_target_name matches existing column name data input Task, column set new target. Depending drop_original_target original target either dropped added features.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_updatetarget.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","text":"Abstract R6Class inheriting PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_updatetarget.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","text":"id :: character(1) Identifier resulting object. See $id slot PipeOp. param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings given param_set. subclass param_vals parameter pass super$initialize(). Default list().","code":"PipeOpUpdateTarget$new(id, param_set = ps(),   param_vals = list(), packages = character(0))"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_updatetarget.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","text":"parameters parameters inherited PipeOpTargetTrafo, well : trafo :: function Transformation function target. function target, .e., taking single argument. Default identity. Note, data passed target data.table consisting target column. new_target_name :: character(1) Optionally give transformed target new name. default original name used. new_task_type :: character(1) Optionally new task type can set. Legal types listed mlr_reflections$task_types$type. #' drop_original_target :: logical(1) Whether drop original target column. Default: TRUE.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_updatetarget.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","text":"$state list class levels target trafo. list() none targets levels.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_updatetarget.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_updatetarget.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","text":"methods inherited PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_updatetarget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a Target without an Explicit Inversion — mlr_pipeops_updatetarget","text":"","code":"if (FALSE) { # \\dontrun{ # Create a binary class task from iris library(mlr3) trafo_fun = function(x) {factor(ifelse(x$Species == \"setosa\", \"setosa\", \"other\"))} po = PipeOpUpdateTarget$new(param_vals = list(trafo = trafo_fun, new_target_name = \"setosa\")) po$train(list(tsk(\"iris\"))) po$predict(list(tsk(\"iris\"))) } # }"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to the vtreat Package — mlr_pipeops_vtreat","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"Provides interface vtreat package. PipeOpVtreat naturally works classification tasks regression tasks. Internally, PipeOpVtreat follows fit/prepare interface vtreat, .e., first creating data treatment transform object via vtreat::NumericOutcomeTreatment(), vtreat::BinomialOutcomeTreatment(), vtreat::MultinomialOutcomeTreatment(), followed calling vtreat::fit_prepare() training data vtreat::prepare() predicton.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"id :: character(1) Identifier resulting object, default \"vtreat\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpVtreat$new(id = \"vtreat\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"Input output channels inherited PipeOpTaskPreproc. Instead Task, TaskSupervised used input output training prediction. output input Task affected features \"prepared\" vtreat. vtreat found \"usable vars\", input Task returned unaltered.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"$state named list $state elements inherited PipeOpTaskPreproc, well : treatment_plan :: object class vtreat_pipe_step | NULL treatment plan constructed vtreat based training data, .e., object class treatment_plan. vtreat found \"usable vars\" designing treatment failed, NULL.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"parameters parameters inherited PipeOpTaskPreproc, well : recommended :: logical(1) Whether \"recommended\" prepared features returned, .e., non constant variables significance value smaller vtreat's threshold. Initialized TRUE. cols_to_copy :: function | Selector Selector function, takes Task argument returns character() features copy. See Selector example functions. Initialized selector_none(). minFraction :: numeric(1) Minimum frequency categorical level must converted indicator column. smFactor :: numeric(1) Smoothing factor impact coding models. rareCount :: integer(1) Allow levels count pooled shared rare-level. rareSig :: numeric(1) Suppress levels pooling significance value greater. collarProb :: numeric(1) fraction data (pseudo-probability) collar data doCollar = TRUE. doCollar :: logical(1) TRUE collar numeric variables cutting tail-probability specified collarProb treatment design. codeRestriction :: character() types variables produce. customCoders :: named list Map code names custom categorical variable encoding functions. splitFunction :: function Function taking arguments nSplits, nRows, dframe, y; returning user desired split. ncross :: integer(1) Integer larger one, number cross-validation rounds design. forceSplit :: logical(1) TRUE force cross-validated significance calculations variables. catScaling :: logical(1) TRUE use stats::glm() linkspace, FALSE use stats::lm() scaling. verbose :: logical(1) TRUE print progress. use_parallel :: logical(1) TRUE use parallel methods. missingness_imputation :: function Function signature f(values: numeric, weights: numeric), simple missing value imputer. Typically, imputation via PipeOp preferred, see PipeOpImpute. pruneSig :: numeric(1) Suppress variables significance level. effects [regression tasksmlr3::TaskRegr binary classification tasks. scale :: logical(1) TRUE replace numeric variables single variable model regressions (\"move outcome-scale\"). mean zero (variables significant less 1) slope 1 regressed (lm regression problems/glm classification problems) outcome. varRestriction :: list() List treated variable names restrict . effects [regression tasksmlr3::TaskRegr binary classification tasks. trackedValues :: named list() Named list mapping variables know values, allows warnings upon novel level appearances (see vtreat::track_values()). effects [regression tasksmlr3::TaskRegr binary classification tasks. y_dependent_treatments :: character() Character treatment types build per-outcome level. effects multiclass classification tasks. imputation_map :: named list List map column names functions signature f(values: numeric, weights: numeric), simple missing value imputers. Typically, imputation via PipeOp preferred, see PipeOpImpute. information, see vtreat::regression_parameters(), vtreat::classification_parameters(), vtreat::multinomial_parameters().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"Follows vtreat's fit/prepare interface. See vtreat::NumericOutcomeTreatment(), vtreat::BinomialOutcomeTreatment(), vtreat::MultinomialOutcomeTreatment(), vtreat::fit_prepare() vtreat::prepare().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_vtreat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface to the vtreat Package — mlr_pipeops_vtreat","text":"","code":"library(\"mlr3\")  set.seed(2020)  make_data <- function(nrows) {     d <- data.frame(x = 5 * rnorm(nrows))     d[\"y\"] = sin(d[[\"x\"]]) + 0.01 * d[[\"x\"]] + 0.1 * rnorm(nrows)     d[4:10, \"x\"] = NA  # introduce NAs     d[\"xc\"] = paste0(\"level_\", 5 * round(d$y / 5, 1))     d[\"x2\"] = rnorm(nrows)     d[d[\"xc\"] == \"level_-1\", \"xc\"] = NA  # introduce a NA level     return(d) }  task = TaskRegr$new(\"vtreat_regr\", backend = make_data(100), target = \"y\")  pop = PipeOpVtreat$new() pop$train(list(task)) #> $output #>  #> ── <TaskRegr> (100x8) ────────────────────────────────────────────────────────── #> • Target: y #> • Properties: - #> • Features (7): #>   • dbl (7): xc_catD, xc_catN, xc_catP, xc_lev_NA, xc_lev_x_level_0_5, #>   xc_lev_x_level_1, xc_lev_x_level_minus_0_5 #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":null,"dir":"Reference","previous_headings":"","what":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"Conducts Yeo-Johnson transformation numeric features. therefore estimates optimal value lambda transformation. See bestNormalize::yeojohnson() details.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"R6Class object inheriting PipeOpTaskPreproc/PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"construction","dir":"Reference","previous_headings":"","what":"Construction","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"id :: character(1) Identifier resulting object, default \"yeojohnson\". param_vals :: named list List hyperparameter settings, overwriting hyperparameter settings otherwise set construction. Default list().","code":"PipeOpYeoJohnson$new(id = \"yeojohnson\", param_vals = list())"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"input-and-output-channels","dir":"Reference","previous_headings":"","what":"Input and Output Channels","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"Input output channels inherited PipeOpTaskPreproc. output input Task affected numeric features replaced transformed versions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"state","dir":"Reference","previous_headings":"","what":"State","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"$state named list $state elements inherited PipeOpTaskPreproc, well list class yeojohnson column, transformed.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"parameters parameters inherited PipeOpTaskPreproc, well : eps :: numeric(1)  Tolerance parameter identify lambda parameter zero. details see yeojohnson(). standardize :: logical  Whether center scale transformed values attempt standard normal distribution. details see yeojohnson(). lower :: numeric(1)  Lower value estimation lambda parameter. details see yeojohnson(). upper :: numeric(1)  Upper value estimation lambda parameter. details see yeojohnson().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"Uses bestNormalize::yeojohnson function.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"fields inherited PipeOp.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"methods inherited PipeOpTaskPreproc/PipeOp.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_pipeops_yeojohnson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Yeo-Johnson Transformation of Numeric Features — mlr_pipeops_yeojohnson","text":"","code":"library(\"mlr3\")  task = tsk(\"iris\") pop = po(\"yeojohnson\")  task$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa          1.4         0.2          5.1         3.5 #>   2:    setosa          1.4         0.2          4.9         3.0 #>   3:    setosa          1.3         0.2          4.7         3.2 #>   4:    setosa          1.5         0.2          4.6         3.1 #>   5:    setosa          1.4         0.2          5.0         3.6 #>  ---                                                             #> 146: virginica          5.2         2.3          6.7         3.0 #> 147: virginica          5.0         1.9          6.3         2.5 #> 148: virginica          5.2         2.0          6.5         3.0 #> 149: virginica          5.4         2.3          6.2         3.4 #> 150: virginica          5.1         1.8          5.9         3.0 pop$train(list(task))[[1]]$data() #>        Species Petal.Length Petal.Width Sepal.Length Sepal.Width #>         <fctr>        <num>       <num>        <num>       <num> #>   1:    setosa   -1.3278574  -1.3278174   -0.8926989  1.01949272 #>   2:    setosa   -1.3278574  -1.3278174   -1.1812158 -0.08164367 #>   3:    setosa   -1.3813346  -1.3278174   -1.4829526  0.37387369 #>   4:    setosa   -1.2741721  -1.3278174   -1.6391179  0.14878429 #>   5:    setosa   -1.3278574  -1.3278174   -1.0353690  1.22553197 #>  ---                                                             #> 146: virginica    0.8157632   1.4105911    1.0393000 -0.08164367 #> 147: virginica    0.6988626   0.9184998    0.6095086 -1.32389503 #> 148: virginica    0.8157632   1.0424849    0.8281903 -0.08164367 #> 149: virginica    0.9330158   1.4105911    0.4971768  0.80900587 #> 150: virginica    0.7572682   0.7938307    0.1474204 -0.08164367  pop$state #> $bc #> $bc$Petal.Length #> Standardized Yeo-Johnson Transformation with 150 nonmissing obs.: #>  Estimated statistics: #>  - lambda = 1.093219  #>  - mean (before standardization) = 4.156174  #>  - sd (before standardization) = 2.024973  #>  #> $bc$Petal.Width #> Standardized Yeo-Johnson Transformation with 150 nonmissing obs.: #>  Estimated statistics: #>  - lambda = 0.8404896  #>  - mean (before standardization) = 1.098253  #>  - sd (before standardization) = 0.6787234  #>  #> $bc$Sepal.Length #> Standardized Yeo-Johnson Transformation with 150 nonmissing obs.: #>  Estimated statistics: #>  - lambda = -0.3212232  #>  - mean (before standardization) = 1.429598  #>  - sd (before standardization) = 0.06498438  #>  #> $bc$Sepal.Width #> Standardized Yeo-Johnson Transformation with 150 nonmissing obs.: #>  Estimated statistics: #>  - lambda = 0.03907448  #>  - mean (before standardization) = 1.433769  #>  - sd (before standardization) = 0.1131792  #>  #>  #> $dt_columns #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $affected_cols #> [1] \"Petal.Length\" \"Petal.Width\"  \"Sepal.Length\" \"Sepal.Width\"  #>  #> $intasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtasklayout #> Key: <id> #>              id    type #>          <char>  <char> #> 1: Petal.Length numeric #> 2:  Petal.Width numeric #> 3: Sepal.Length numeric #> 4:  Sepal.Width numeric #>  #> $outtaskshell #> Empty data.table (0 rows and 5 cols): Species,Petal.Length,Petal.Width,Sepal.Length,Sepal.Width #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_tasks_boston_housing.html","id":null,"dir":"Reference","previous_headings":"","what":"Housing Data for 506 Census Tracts of Boston — mlr_tasks_boston_housing","title":"Housing Data for 506 Census Tracts of Boston — mlr_tasks_boston_housing","text":"Housing Data 506 Census Tracts Boston","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/mlr_tasks_boston_housing.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Housing Data for 506 Census Tracts of Boston — mlr_tasks_boston_housing","text":"R6Class object inheriting TaskRegr. BostonHousing2 dataset containing corrected data III AMF (1979). “Hedonic Price Approach Measuring Demand Neighborhood Characteristics.” Economics Neighborhood, 191–217. Elsevier. doi:10.1016/B978-0-12-636250-3.50015-5 . provided mlbench package. See data description .","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/po.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand PipeOp Constructor — po","title":"Shorthand PipeOp Constructor — po","text":"Create PipeOp mlr_pipeops given ID PipeOpLearner Learner object PipeOpFilter Filter object PipeOpSelect Selector object clone PipeOp given PipeOp (possibly changed settings) object initialized given parameters param_vals. po() taks single obj (PipeOp id, Learner, ...) converts PipeOp. pos() (plural-s) takes either character-vector, list objects, creates list PipeOps.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/po.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand PipeOp Constructor — po","text":"","code":"po(.obj, ...)  pos(.objs, ...)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/po.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand PipeOp Constructor — po","text":".obj [] object construct PipeOp. character(1), looked mlr_pipeops dictionary. Otherwise, converted PipeOp. ... Additional parameters give constructed object. may argument constructor PipeOp, case given constructor; may parameter value, case given param_vals argument constructor. .objs character | list Either character PipeOps look mlr_pipeops, list objects converted PipeOp. named list, names used $id slot resulting PipeOps.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/po.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorthand PipeOp Constructor — po","text":"PipeOp (po()), list PipeOps (pos()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/po.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorthand PipeOp Constructor — po","text":"","code":"library(\"mlr3\")  po(\"learner\", lrn(\"classif.rpart\"), cp = 0.3) #> PipeOp: <classif.rpart> (not trained) #> values: <cp=0.3, xval=0> #> Input channels <name [train type, predict type]>: #>   input [TaskClassif,TaskClassif] #> Output channels <name [train type, predict type]>: #>   output [NULL,PredictionClassif]  po(lrn(\"classif.rpart\"), cp = 0.3) #> PipeOp: <classif.rpart> (not trained) #> values: <cp=0.3, xval=0> #> Input channels <name [train type, predict type]>: #>   input [TaskClassif,TaskClassif] #> Output channels <name [train type, predict type]>: #>   output [NULL,PredictionClassif]  # is equivalent with: mlr_pipeops$get(\"learner\", lrn(\"classif.rpart\"),   param_vals = list(cp = 0.3)) #> PipeOp: <classif.rpart> (not trained) #> values: <cp=0.3, xval=0> #> Input channels <name [train type, predict type]>: #>   input [TaskClassif,TaskClassif] #> Output channels <name [train type, predict type]>: #>   output [NULL,PredictionClassif]  mlr3pipelines::pos(c(\"pca\", original = \"nop\")) #> $pca #> PipeOp: <pca> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [Task,Task] #> Output channels <name [train type, predict type]>: #>   output [Task,Task] #>  #> $original #> PipeOp: <original> (not trained) #> values: <list()> #> Input channels <name [train type, predict type]>: #>   input [*,*] #> Output channels <name [train type, predict type]>: #>   output [*,*] #>"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/ppl.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand Graph Constructor — ppl","title":"Shorthand Graph Constructor — ppl","text":"Creates Graph mlr_graphs given ID ppl() taks character(1) returns Graph. ppls() takes character vector list returns list possibly muliple Graphs.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/ppl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand Graph Constructor — ppl","text":"","code":"ppl(.key, ...)  ppls(.keys, ...)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/ppl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand Graph Constructor — ppl","text":".key [character(1)] key Graph mlr_graphs. ... Additional parameters give constructed object. may argument constructor underlying function. .keys [character] key possibly multiple Graphs mlr_graphs. named, named list returned, unlike pos() set $id slots.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/ppl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorthand Graph Constructor — ppl","text":"Graph (ppl()) list Graphs (ppls()).","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/ppl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorthand Graph Constructor — ppl","text":"","code":"library(\"mlr3\")  gr = ppl(\"bagging\", graph = po(lrn(\"regr.rpart\")),   averager = po(\"regravg\", collect_multiplicity = TRUE))"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/preproc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Pre-processing — preproc","title":"Simple Pre-processing — preproc","text":"Function offers simple direct way train predict PipeOps Graphs Tasks, data.frames data.tables. Training happens predict set FALSE state passed function. Prediction happens predict set TRUE passed Graph PipeOp either trained state explicitly passed function. passed  PipeOp Graph gets modified -reference.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/preproc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Pre-processing — preproc","text":"","code":"preproc(indata, processor, state = NULL, predict = !is.null(state))"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/preproc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Pre-processing — preproc","text":"indata (Task | data.frame | data.table ) Data pre-processed. processor (Graph | PipeOp)Graph PipeOp accepting Task one output channel. Whenever indata passed data.frame data.table, output channel must return Task converted back data.frame data.table. Additionally, processors work sub-classes TaskSupervised accept data.frame data.table, unclear column target. aware processor gets modified -reference training, state passed function. especially means state trained processor get overwritten state passed. may want use dictionary sugar functions select processor set hyperparameters, e.g. po() ppl(). state (named list | NULL) Optional state used prediction, processor untrained current state processor overwritten. Must complete correct state respective processor. Default NULL (overwrite processor's state). predict (logical(1)) Whether predict (TRUE) train (FALSE). default, FALSE state NULL (state's default), TRUE otherwise.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/preproc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Pre-processing — preproc","text":"| data.frame | data.table: indata Task, whatever returned processor's single output channel returned. indata data.frame data.table, object class returned, processor's output channel return Task, error thrown.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/preproc.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Simple Pre-processing — preproc","text":"processor PipeOp, S3 method preproc.PipeOp gets called first, converting PipeOp Graph wrapping state appropriately, calling S3 method preproc.Graph modified objects. indata data.frame data.table, TaskUnsupervised constructed internally. implies processors work sub-classes TaskSupervised work input types indata.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/preproc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Pre-processing — preproc","text":"","code":"library(\"mlr3\") task = tsk(\"iris\") pop = po(\"pca\")  # Training preproc(task, pop) #> Error in preproc(task, pop): unused argument (pop) # Note that the PipeOp gets trained through this pop$is_trained #> [1] FALSE  # Predicting a trained PipeOp (trained through previous call to preproc) preproc(task, pop, predict = TRUE) #> Error in preproc(task, pop, predict = TRUE): unused arguments (pop, predict = TRUE)  # Predicting using a given state # We use the state of the PipeOp from the last example and then reset it state = pop$state pop$state = NULL preproc(task, pop, state) #> Error in preproc(task, pop, state): unused arguments (pop, state)  # Note that the PipeOp's state may get overwritten inadvertently during # training or if a state is given pop$state$sdev #> NULL preproc(tsk(\"wine\"), pop) #> Error in preproc(tsk(\"wine\"), pop): unused argument (pop) pop$state$sdev #> NULL  # Piping multiple preproc() calls, using dictionary sugar to set parameters # tsk(\"penguins\") |> #   preproc(po(\"imputemode\", affect_columns = selector_name(\"sex\"))) |> #   preproc(po(\"imputemean\"))  # Use preproc with a Graph gr = po(\"pca\", rank. = 4) %>>% po(\"learner\", learner = lrn(\"classif.rpart\")) preproc(tsk(\"sonar\"), gr)  # returns NULL because of the learner #> Error in preproc(tsk(\"sonar\"), gr): unused argument (gr) preproc(tsk(\"sonar\"), gr, predict = TRUE) #> Error in preproc(tsk(\"sonar\"), gr, predict = TRUE): unused arguments (gr, predict = TRUE)  # Training with a data.table input # Note that `$data()` drops the information that \"Species\" is the target. # It gets handled like an ordinary feature here. dt = tsk(\"iris\")$data() preproc(dt, pop) #> Error in preproc(dt, pop): unused argument (pop)  # Predicting with a data.table input preproc(dt, pop) #> Error in preproc(dt, pop): unused argument (pop)"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. data.table .data.table","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/register_autoconvert_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Autoconvert Function to Conversion Register — register_autoconvert_function","title":"Add Autoconvert Function to Conversion Register — register_autoconvert_function","text":"Add functions perform conversion desired class. Whenever Graph PipeOp called object conform declared input type, \"autoconvert register\" queried functions may turn object desired type. Conversion functions try avoid cloning.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/register_autoconvert_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Autoconvert Function to Conversion Register — register_autoconvert_function","text":"","code":"register_autoconvert_function(cls, fun, packages = character(0))"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/register_autoconvert_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Autoconvert Function to Conversion Register — register_autoconvert_function","text":"cls character(1) class fun converts . fun function conversion function. Must take one argument return object class cls, possibly sub-class recognized are_types_compatible(). packages character packages required loaded fun operate.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/register_autoconvert_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Autoconvert Function to Conversion Register — register_autoconvert_function","text":"NULL.","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/register_autoconvert_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Autoconvert Function to Conversion Register — register_autoconvert_function","text":"","code":"# This lets mlr3pipelines automatically try to convert a string into # a `PipeOp` by querying the [`mlr_pipeops`] [`Dictionary`][mlr3misc::Dictionary]. # This is an example and not necessary, because mlr3pipelines adds it by default. register_autoconvert_function(\"PipeOp\", function(x) as_pipeop(x), packages = \"mlr3pipelines\")"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/reset_autoconvert_register.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset Autoconvert Register — reset_autoconvert_register","title":"Reset Autoconvert Register — reset_autoconvert_register","text":"Reset autoconvert register factory default, thereby undoing calls register_autoconvert_function() user.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/reset_autoconvert_register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset Autoconvert Register — reset_autoconvert_register","text":"","code":"reset_autoconvert_register()"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/reset_autoconvert_register.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset Autoconvert Register — reset_autoconvert_register","text":"NULL","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/reset_class_hierarchy_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset the Class Hierarchy Cache — reset_class_hierarchy_cache","title":"Reset the Class Hierarchy Cache — reset_class_hierarchy_cache","text":"Reset class hierarchy cache factory default, thereby undoing calls add_class_hierarchy_cache() user.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/reset_class_hierarchy_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset the Class Hierarchy Cache — reset_class_hierarchy_cache","text":"","code":"reset_class_hierarchy_cache()"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/reset_class_hierarchy_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset the Class Hierarchy Cache — reset_class_hierarchy_cache","text":"NULL","code":""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/set_validate.GraphLearner.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Validation for a GraphLearner — set_validate.GraphLearner","title":"Configure Validation for a GraphLearner — set_validate.GraphLearner","text":"Configure validation graph learner. GraphLearner, validation can configured two levels: GraphLearner level, specifies validation set constructed entering graph. level individual PipeOps (PipeOpLearner), specifies pipeops actually make use validation data (set $validate field \"predefined\") (set NULL). can specified via argument ids.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/set_validate.GraphLearner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Validation for a GraphLearner — set_validate.GraphLearner","text":"","code":"# S3 method for class 'GraphLearner' set_validate(   learner,   validate,   ids = NULL,   args_all = list(),   args = list(),   ... )"},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/set_validate.GraphLearner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Validation for a GraphLearner — set_validate.GraphLearner","text":"learner (GraphLearner) graph learner configure. validate (numeric(1), \"predefined\", \"test\", NULL) set $validate field learner. set NULL validation disabled, graph learner level, also pipeops. ids (NULL character()) pipeops enable validation. parameter ignored validate set NULL. default, validation enabled final PipeOp Graph. args_all (list()) Rarely needed. named list parameter values passed subsequet set_validate() calls individual PipeOps. args (named list()) Rarely needed. named list lists, specifying additional argments passed set_validate() calling individual PipeOps. ... () Currently unused.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/reference/set_validate.GraphLearner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Validation for a GraphLearner — set_validate.GraphLearner","text":"","code":"library(mlr3)  glrn = as_learner(po(\"pca\") %>>% lrn(\"classif.debug\")) set_validate(glrn, 0.3) glrn$validate #> [1] 0.3 glrn$graph$pipeops$classif.debug$learner$validate #> [1] \"predefined\"  set_validate(glrn, NULL) glrn$validate #> NULL glrn$graph$pipeops$classif.debug$learner$validate #> NULL  set_validate(glrn, 0.2, ids = \"classif.debug\") glrn$validate #> [1] 0.2 glrn$graph$pipeops$classif.debug$learner$validate #> [1] \"predefined\""},{"path":[]},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-090","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.9.0","title":"mlr3pipelines 0.9.0","text":"CRAN release: 2025-07-31 Breaking change: Removed initialization PipeOpImputeConstant’s constant hyperparameter since incompatible defaults lead recommended usage (creating empty level). Removed compatibility old paradox versions pre-1.0.0. Added empty_level_control argument PipeOpImpute allowing control edge cases factor/ordered columns. Set new construction argument empty_level_control \"param\" PipeOpImputeOOR \"always\" PipeOpImputeConstant. Untrained PipeOps take NULL input training now automatically perform training prediction. PipeOpImputeConstant, PipeOpImputeMode, PipeOpImputeOOR, PipeOpImputeLearner can now handle factor ordered features zero levels. PipeOpImputeConstant now gives informative error message check_levels TRUE new level created imputation. Fix: PipeOpImputeOOR now imputes \".MISSING\" factor/ordered features NAs instead sampling feature’s levels. Fix: PipeOpImputeLearner longer adds \"factor\" \"ordered\" levels feature types arbitrarily instead updates levels correctly certain edge-cases. Fixed error message unexpected Multiplicities input output type checking PipeOps training prediction. Fixed grammatical error PipeOp’s error message wrapper: now correctly says “happened …”.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-080","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.8.0","title":"mlr3pipelines 0.8.0","text":"CRAN release: 2025-06-17 Added missing error predicting untrained PipeOps / Graphs. Fix: Corrected typo hyperparameter name use_parallel PipeOpVtreat. Fix: overwrite initial hyperparameter settings bbotk::OptimizerBatchNLoptr LearnerClassifAvg / LearnerRegrAvg’s internal optimize_weights_learneravg function. Added new convenience function preproc() easier training prediction PipeOps Graphs. Fix: PipeOpVtreat, PipeOpEncodeImpact, PipeOpEncodeLmer now accept precise TaskSupervised instead Task input training prediction. Docs: Added missing documentation task_type input output channels PipeOps inherit PipeOpTaskPreproc set non-default task_type. Fix: PipeOpEncodeLmer, PipeOpADAS, PipeOpBLSmote, PipeOpSmote, PipeOpSmoteNC longer throw error case empty target levels training. Fix: PipeOpClassBalancing now handles unseen target levels ignoring upsampling instead producing NAs.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-072","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.7.2","title":"mlr3pipelines 0.7.2","text":"CRAN release: 2025-03-07 New parameter no_collapse_above_absolute PipeOpCollapseFactors / po(\"collapse_factors\"). Fix: PipeOpCollapseFactors now correctly collapses levels ordered factors. Fix: LearnerClassifAvg LearnerRegrAvg hyperparameters get \"required\" tag. New parameter use_groups (default TRUE) PipeOpSubsampling respect grouping (changed default behaviour grouped data) New parameter new_role_direct PipeOpColRoles / po(\"colroles\") change column roles role instead column. Dictionary sugar functions po() / pos() / ppl() / ppls() now make suggestions entries mlr_pipeops well mlr_graphs object given name found respective dictionary. New PipeOp PipeOpDecode / po(\"decode\") reverse one-hot treatment encoding. Fix: Columns feature something else longer lose column role training predicting PipeOps inheriting PipeOpTaskPreproc. Fix: Made tests PipeOpBLSmote deterministic. Fix: Corrected hash calculation PipeOpFilter. New PipeOps PipeOpEncodePLQuantiles PipeOpEncodePLTree implement piecewise linear encoding two different binning methods. Compatibility new R6 release. Docs: Performed cleanup standardization. Docs: Performed cleanup reference index page website. Docs: Fixed parsing examples website PipeOpNMF PipeOpLearnerPICVPlus. Fix: PipeOpTargetMutate PipeOpTargetTrafoScaleRange longer drop unseen factor levels features targets train predict. Simplified parameter checks added internal type checking PipeOpTargetMutate.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-071","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.7.1","title":"mlr3pipelines 0.7.1","text":"CRAN release: 2024-11-14 Compatibility fix upcoming mlr3 New -sampling PipeOps inbalanced data: PipeOpTomek / po(\"tomek\") PipeOpNearmiss / po(\"nearmiss\") New PipeOp PipeOpLearnerPICVPlus / po(\"learner_pi_cvplus\") New PipeOp Quantile Regression PipeOpLearnerQuantiles / po(learner_quantiles) GraphLearner new active bindings/methods shortcuts active bindings/methods underlying Graph: $pipeops, $edges, $pipeops_param_set, $pipeops_param_set_values well $ids() $plot().","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-070","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.7.0","title":"mlr3pipelines 0.7.0","text":"CRAN release: 2024-09-24 New PipeOp PipeOpRowApply / po(\"rowapply\") Empty PipeOp IDs now explicitly forbidden. Bugfix: Graph$tran() / Graph$predict() single_input = FALSE now correctly handles PipeOps multiple inputs. GraphLearner$base_learner() now works PipeOpBranch, generally robust. GraphLearner now supports $importance, $selected_features(), $oob_error(), $loglik(). computed underlying Learner. GraphLearner$impute_selected_features option added: $selected_features() reported even underlying base learner report ; case, full feature set seen learner returned. GraphLearner$predict_type handling robust now. PipeOpThreshold PipeOpTuneThreshold now $predict_type \"prob\". can set \"response\", case probability predictions discarded, potentially saving memory. Bugfix handling multiplicities PipeOps vararg channels. Bugfix: PipeOpImputeOOR now retains .MISSING level factors prediction imputed training, missing values prediction. as_data_table(po()) now works even PipeOps can constructed. PipeOps, NA reported columns. Compatibility upcoming mlr3 release. New PipeOps handling inbalanced data: PipeOpADAS / po(\"adas\"), PipeOpBLSmote / po(\"blsmote\") PipeOpSmoteNC / po(\"smotenc\")","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-060","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.6.0","title":"mlr3pipelines 0.6.0","text":"CRAN release: 2024-07-01 Compatibility new bbotk release. Added marshaling support GraphLearner Support internal tuning validation","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-052","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.5.2","title":"mlr3pipelines 0.5.2","text":"CRAN release: 2024-04-23 Added new ppl(\"convert_types\"). Minor documentation fixes. Test helpers now available inst/. considered experimental unstable.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-051","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.5.1","title":"mlr3pipelines 0.5.1","text":"CRAN release: 2024-03-26 Changed ID PipeOpFeatureUnion used ppl(\"robustify\") ppl(\"stacking\"). pipeline_bagging() gets replace argument (old behaviour FALSE default). Feature: $add_pipeop() method got argument clone (old behaviour TRUE default). Bugfix: PipeOpFeatureUnion rare cases dropped variables called \"x\". Compatibility upcoming paradox release.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-050-2","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.5.0-2","title":"mlr3pipelines 0.5.0-2","text":"CRAN release: 2023-12-08 Avoid unnecessarily large serializations ppl(\"robustify\") pipelines. Made tests examples compatible mlr3 update.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-050-1","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.5.0-1","title":"mlr3pipelines 0.5.0-1","text":"CRAN release: 2023-05-22 Bugfix: PipeOpTuneThreshold overloading correct .train .predict functions.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-050","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.5.0","title":"mlr3pipelines 0.5.0","text":"CRAN release: 2023-05-22 New way computing $hash $phash GraphLearner PipeOps. break users inherit PipeOp make use $hash future (ultimately interest!). Neater plots. Bugfix: phash GraphLearner now considers content Graph, IDs. One vignette removed version 0.1.3 added back . Welcome home! Bugfix: Make Graph work PipeOps one output, one output linked multiple inputs.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-043","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.4.3","title":"mlr3pipelines 0.4.3","text":"CRAN release: 2023-03-23 po(), pos() can now construct PipeOps ID postfix _<number> avoid ID clashes. GraphLearner now method $base_learner() returns underlying Learner, can found simple heuristic. Fix S3 function signatures","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-042","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.4.2","title":"mlr3pipelines 0.4.2","text":"CRAN release: 2022-09-20 Documentation: Clarified PipeOpHistBin operation. Documentation: Fixed PipeOpPCA documentation center default. Added $label active binding, setting help()-page title default. Made tests compatible upcoming mlr3misc update.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-041","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.4.1","title":"mlr3pipelines 0.4.1","text":"CRAN release: 2022-05-15 $help() function PipeOps well Graph, GraphLearner Learners. GraphLearner can created without cloning Graph (internal use). predict.Graph throws helpful error create fitting Task. PipeOpLearner packages slot set Learner’s packages. Bugfix: PipeOp train() predict() report correct channel name output wrong type. Bugfix: accurate type inference constructing Graphs. Stability fix interaction packages mlr3spatiotempcv extend existing Task types.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-040","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.4.0","title":"mlr3pipelines 0.4.0","text":"CRAN release: 2021-11-15 New operator %>>!% modifies Graphs -place. New methods chain_graphs(), concat_graphs(), Graph$chain() alternatives %>>% %>>!%. New methods pos() ppls() create lists PipeOps/Graphs can seen “plural” forms po() ppl(). po() S3-method PipeOp class clones PipeOp object optionally modifies attributes. Graph$add_pipeop() now clones PipeOp added. Documentation: Clarified documentation cloning input arguments several places. Performance enhancements Graph concatenation. informative error outputs. New attribute graph_model GraphLearner class, gets trained Graph. as_learner() S3-method PipeOp class wraps PipeOp Graph turns Learner. PipeOpHistBin: renamed bins Param breaks PipeOpImputeHist: fix handling integer features spanning entire represented integer range PipeOpImputeOOR: fix handling integer features spanning entire represented integer range PipeOpProxy: Avoid unnecessary clone PipeOpScale: Performance improvement","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-036-1","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.6-1","title":"mlr3pipelines 0.3.6-1","text":"CRAN release: 2021-10-06 Fix numerics problem tests","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-036","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.6","title":"mlr3pipelines 0.3.6","text":"CRAN release: 2021-09-07 Bugfix: Make empty Multiplicities work (unless nested) Fixed: Compatibility upcoming bbotk version. New mlr_graphs: pipeline_stacking Added JMLR-Citation","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-035-1","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.5-1","title":"mlr3pipelines 0.3.5-1","text":"CRAN release: 2021-08-05 Fixed: Compatibility upcoming mlr3 version.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-035","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.5","title":"mlr3pipelines 0.3.5","text":"CRAN release: 2021-07-06 Changed PipeOp: PipeOpFilter gets additional filter.permuted hyperparameter. Bugfix: Make add_edge Graphs work Multiplicities. Bugfix: Make GraphLearner hash depend id. Documentation: Clarify documentation LearnerAvg. Internals: Using idiomatic internal helper functions. Compatibility upcoming mlr3 version.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-034","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.4","title":"mlr3pipelines 0.3.4","text":"CRAN release: 2021-03-05 Stability: PipeOps don’t crash python/reticulate hyperparameter values. Documentation: Titles PipeOp documentation articles reworked.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-033","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.3","title":"mlr3pipelines 0.3.3","text":"CRAN release: 2021-02-09 Bugfix: fix rare issue randomized test Compatibility bbotk 0.3.0","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-032","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.2","title":"mlr3pipelines 0.3.2","text":"CRAN release: 2020-12-17 Bugfix: Make .data.table(mlr_pipeops) work paradox 0.6 PipeOpColApply: now allows applicator function multiple columns return value; also inherits PipeOpTaskPreprocSimple now","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-031","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.1","title":"mlr3pipelines 0.3.1","text":"CRAN release: 2020-11-16 PipeOpMissInd now also allows setting type = integer PipeOpNMF: now exposes parameters previously .options pipeline_bagging now uses multiplicities internally fix pipeline_robustify determines type newly created columns using PipeOpMissInd PipeOpFeatureUnion: Fixed minor bug checking duplicates added autotest ParamSets PipeOps: expect_valid_pipeop_param_set informative error message PipeOp input value wrong type Fix automatic detection R6 type hierarchy Performance improvements GraphLearner GraphLearner allows custom id Use parallel tests Removed bibtex dependency","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-030","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.3.0","title":"mlr3pipelines 0.3.0","text":"CRAN release: 2020-09-13 compatibility mlr3 0.6 NULL input channels accept kind input print() method Graphs now also allows printing DOT representation console state PipeOps now reset NULL training fails implemented as_learner.PipeOp LearnerClassifAvg, LearnerRegrAvg use bbotk now fix ppl_robustify detects whether learner can handle factors PipeOpTextVectorizer can now return “integer sequence representation”. PipeOpNMF PipeOpColRoles PipeOpVtreat various bugfixes","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-021","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.2.1","title":"mlr3pipelines 0.2.1","text":"CRAN release: 2020-08-18 New feature: Multiplicities: implicit repetition operations pipeline_bagging pipeline_branch pipeline_greplicate pipeline_robustify pipeline_targettrafo pipeline_ovr PipeOpOVRSplit, PipeOpOVRUnite PipeOpReplicate PipeOpMultiplicityExply, PipeOpMultiplicityImply PipeOpTargetTrafo, PipeOpTargetInvert PipeOpTargetMutate PipeOpTargetTrafoScaleRange PipeOpProxy PipeOpDateFeatures PipeOpImputeConstant PipeOpImputeLearner PipeOpMode PipeOpRandomResponse PipeOpRenameColumns PipeOpTextVectorizer PipeOpThreshold PipeOpImputeNewlvl –> PipeOpImputeOOR (additional functionality continuous values) PipeOpFeatureUnion: Bugfix: avoid silently overwriting features names clash PipeOpHistBin: Bugfix: handle test set data training set range PipeOpLearnerCV: Allow returning trainingset prediction train() PipeOpMutate: Allow referencing newly created columns PipeOpScale: Allow robust scaling PipeOpLearner, PipeOpLearnerCV: learner_models access learner model slot selector_missing selector_cardinality_greater_than NULL neutral element %>>% PipeOpTaskPreproc now feature_types slot PipeOpTaskPreproc(Simple) internal API changed: use .train_task(), .predict_task(), .train_dt(), .predict_dt(), .select_cols(), .get_state(), .transform(), .get_state_dt(), .transform_dt() instead old methods without dot prefix PipeOp now tags slot PipeOp internal API changed: use .train(), .predict() instead train_internal(), predict_internal() Graph new method update_ids() Graph methods train(single_input = FALSE) predict(single_input = FALSE) now handle vararg channels correctly. Obsoleted greplicate(); use pipeline_greplicate / ppl(\"greplicate\") instead. po() now automatically converts Selector PipeOpSelect po() prints available mlr_pipeops dictionary content mlr_graphs dictionary useful Graphs, short form accessor ppl() Work new mlr3 version 0.4.0","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-013","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.1.3","title":"mlr3pipelines 0.1.3","text":"CRAN release: 2020-04-06 small test fix R 4.0 (necessary stringsAsFactors option default change 3.6 -> 4.0) predict() generic Graph Migrated last vignette “mlr3 Book” Compact -memory representation R6 objects save space saving objects via saveRDS(), serialize() etc.","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-012","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.1.2","title":"mlr3pipelines 0.1.2","text":"CRAN release: 2019-12-10 Work new mlr3 version 0.1.5 (handling character columns changed)","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-011","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.1.1","title":"mlr3pipelines 0.1.1","text":"CRAN release: 2019-10-29 Better html graphics linear Graphs PipeOpEncodeImpact PipeOpEncode: handle NAs","code":""},{"path":"https://mlr3pipelines.mlr-org.com/dev/news/index.html","id":"mlr3pipelines-010","dir":"Changelog","previous_headings":"","what":"mlr3pipelines 0.1.0","title":"mlr3pipelines 0.1.0","text":"CRAN release: 2019-10-06 Initial upload CRAN.","code":""}]
